<?php

/**
 * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors
 * SPDX-FileCopyrightText: 2016 ownCloud, Inc.
 * SPDX-License-Identifier: AGPL-3.0-only
 */
namespace OC\Files\Cache;

use OCP\DB\Exception;
use OCP\DB\QueryBuilder\IQueryBuilder;
use OCP\Files\Storage\IStorage;
use OCP\IDBConnection;
use OCP\Server;
use Psr\Log\LoggerInterface;

/**
 * Handle the mapping between the string and numeric storage ids
 *
 * Each storage has 2 different ids
 * 	a string id which is generated by the storage backend and reflects the configuration of the storage (e.g. 'smb://user@host/share')
 * 	and a numeric storage id which is referenced in the file cache
 *
 * A mapping between the two storage ids is stored in the database and accessible through this class
 *
 * @package OC\Files\Cache
 */
class Storage {
	private static ?StorageGlobal $globalCache = null;
	private string $storageId;
	private int $numericId;

	public static function getGlobalCache(): StorageGlobal {
		if (is_null(self::$globalCache)) {
			self::$globalCache = new StorageGlobal(Server::get(IDBConnection::class));
		}
		return self::$globalCache;
	}

	/**
	 * @throws \RuntimeException
	 */
	public function __construct(
		IStorage|string $storage,
		bool $isAvailable,
		private readonly IDBConnection $connection,
	) {
		if ($storage instanceof IStorage) {
			$this->storageId = $storage->getId();
		} else {
			$this->storageId = $storage;
		}
		$this->storageId = self::adjustStorageId($this->storageId);

		if ($row = self::getStorageById($this->storageId)) {
			$this->numericId = $row['numeric_id'];
		} else {
			$available = $isAvailable ? 1 : 0;
			if ($row = self::getStorageById($this->storageId)) {
				$this->numericId = $row['numeric_id'];
			} else {
				try {
					$qb = $this->connection->getQueryBuilder();
					$qb->insert('storages')
						->values([
							'id' => $qb->createNamedParameter($this->storageId, IQueryBuilder::PARAM_STR),
							'available' => $qb->createNamedParameter($available, IQueryBuilder::PARAM_INT),
						])
						->executeStatement();
					$this->numericId = $qb->getLastInsertId();
				} catch (Exception $e) {
					throw new \RuntimeException("Could not insert new storage nor fetch existing one", previous: $e);
				}
			}
		}
	}

	/**
	 * @return ?array{id: int, numeric_id: int, available: bool, last_checked: int}
	 */
	public static function getStorageById(string $storageId): ?array {
		return self::getGlobalCache()->getStorageInfo($storageId);
	}

	/**
	 * Adjusts the storage id to use md5 if too long
	 * @param string $storageId storage id
	 * @return string unchanged $storageId if its length is less than 64 characters,
	 *                else returns the md5 of $storageId
	 */
	public static function adjustStorageId(string $storageId): string {
		if (strlen($storageId) > 64) {
			return md5($storageId);
		}
		return $storageId;
	}

	/**
	 * Get the numeric id for the storage
	 */
	public function getNumericId(): int {
		return $this->numericId;
	}

	/**
	 * Get the string id for the storage
	 *
	 * @param int $numericId
	 * @return string|null either the storage id string or null if the numeric id is not known
	 */
	public static function getStorageId(int $numericId): ?string {
		$storage = self::getGlobalCache()->getStorageInfoByNumericId($numericId);
		return $storage['id'] ?? null;
	}

	/**
	 * Get the numeric of the storage with the provided string id
	 *
	 * @return int|null Either the numeric storage id or null if the storage id is not known
	 */
	public static function getNumericStorageId(string $storageId): ?int {
		$storageId = self::adjustStorageId($storageId);

		if ($row = self::getStorageById($storageId)) {
			return (int)$row['numeric_id'];
		} else {
			return null;
		}
	}

	/**
	 * @return array{available: bool, last_checked: int}
	 */
	public function getAvailability(): array {
		if ($row = self::getStorageById($this->storageId)) {
			return [
				'available' => $row['available'],
				'last_checked' => $row['last_checked'],
			];
		} else {
			return [
				'available' => true,
				'last_checked' => time(),
			];
		}
	}

	/**
	 * @param int $delay amount of seconds to delay reconsidering that storage further
	 */
	public function setAvailability(bool $isAvailable, int $delay = 0): void {
		$available = $isAvailable ? 1 : 0;
		if (!$isAvailable) {
			Server::get(LoggerInterface::class)->info('Storage with ' . $this->storageId . ' marked as unavailable', ['app' => 'lib']);
		}

		$query = $this->connection->getQueryBuilder();
		$query->update('storages')
			->set('available', $query->createNamedParameter($available))
			->set('last_checked', $query->createNamedParameter(time() + $delay))
			->where($query->expr()->eq('id', $query->createNamedParameter($this->storageId)));
		$query->executeStatement();
	}

	/**
	 * Check if a string storage id is known.
	 */
	public static function exists(string $storageId): bool {
		return !is_null(self::getNumericStorageId($storageId));
	}

	/**
	 * Remove the entry for the storage.
	 */
	public static function remove(string $storageId): void {
		$storageId = self::adjustStorageId($storageId);
		$numericId = self::getNumericStorageId($storageId);

		$query = Server::get(IDBConnection::class)->getQueryBuilder();
		$query->delete('storages')
			->where($query->expr()->eq('id', $query->createNamedParameter($storageId)));
		$query->executeStatement();

		if (!is_null($numericId)) {
			$query = Server::get(IDBConnection::class)->getQueryBuilder();
			$query->delete('filecache')
				->where($query->expr()->eq('storage', $query->createNamedParameter($numericId)));
			$query->executeStatement();
		}
	}

	/**
	 * Remove the entry for the storage by the mount id.
	 */
	public static function cleanByMountId(int $mountId): void {
		$db = Server::get(IDBConnection::class);

		try {
			$db->beginTransaction();

			$query = $db->getQueryBuilder();
			$query->select('storage_id')
				->from('mounts')
				->where($query->expr()->eq('mount_id', $query->createNamedParameter($mountId, IQueryBuilder::PARAM_INT)));
			$storageIds = $query->executeQuery()->fetchAll(\PDO::FETCH_COLUMN);
			$storageIds = array_unique($storageIds);

			$query = $db->getQueryBuilder();
			$query->delete('filecache')
				->where($query->expr()->in('storage', $query->createNamedParameter($storageIds, IQueryBuilder::PARAM_INT_ARRAY)));
			$query->runAcrossAllShards();
			$query->executeStatement();

			$query = $db->getQueryBuilder();
			$query->delete('storages')
				->where($query->expr()->in('numeric_id', $query->createNamedParameter($storageIds, IQueryBuilder::PARAM_INT_ARRAY)));
			$query->executeStatement();

			$query = $db->getQueryBuilder();
			$query->delete('mounts')
				->where($query->expr()->eq('mount_id', $query->createNamedParameter($mountId, IQueryBuilder::PARAM_INT)));
			$query->executeStatement();

			$db->commit();
		} catch (\Exception $e) {
			$db->rollBack();
			throw $e;
		}
	}
}
