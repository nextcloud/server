{"version":3,"file":"json2xml-BD0x8Z3S.mjs","sources":["../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n"],"names":["nameStartChar","nameChar","nameRegexp","regexName","getAllMatches","string","regex","matches","match","allmatches","len","index","isName","exports","v","obj","target","a","arrayMode","keys","i","util","require$$0","defaultOptions","validator","xmlData","options","tags","tagFound","reachedRoot","readPI","tagStartPos","readCommentAndCDATA","closingTag","tagName","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","otg","openPos","afterAmp","validateAmpersand","isWhiteSpace","t","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","tagClosed","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","validateNumberAmpersand","re","count","code","message","lineNumber","lines","val","jPath","attrs","buildOptions","OptionsBuilder","hexRegex","numRegex","consider","toNumber","str","trimmedStr","sign","leadingZeros","numTrimmedByZeros","trimZeros","eNotation","num","numStr","strnum","prettify","node","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","key","attrMap","jpath","atrrName","textNodeName","propCount","node2json","EOL","toXml","jArray","indentation","arrToStr","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","replaceEntitiesValue","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","attr","attrVal","textValue","entity","orderedJs2Xml","buildFromOrderedJs","Builder","isAttribute","processTextOrObjNode","indentate","jObj","level","newval","arrLen","listTagVal","j","item","Ks","L","object","tagEndExp","piClosingChar","closeTag","name","json2xml"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}