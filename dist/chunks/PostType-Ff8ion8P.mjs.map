{"version":3,"file":"PostType-Ff8ion8P.mjs","sources":["../../apps/settings/src/constants/AppDiscoverTypes.ts","../../apps/settings/src/components/AppStoreDiscover/common.ts","../../apps/settings/src/composables/useGetLocalizedValue.ts","../../apps/settings/src/components/AppStoreDiscover/AppLink.vue","../../apps/settings/src/components/AppStoreDiscover/PostType.vue"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/**\n * Currently known types of app discover section elements\n */\nexport const APP_DISCOVER_KNOWN_TYPES = ['post', 'showcase', 'carousel'] as const\n\n/**\n * Helper for localized values\n */\nexport type ILocalizedValue<T> = Record<string, T | undefined> & { en: T }\n\nexport interface IAppDiscoverElement {\n\t/**\n\t * Type of the element\n\t */\n\ttype: typeof APP_DISCOVER_KNOWN_TYPES[number]\n\n\t/**\n\t * Identifier for this element\n\t */\n\tid: string,\n\n\t/**\n\t * Order of this element to pin elements (smaller = shown on top)\n\t */\n\torder?: number\n\n\t/**\n\t * Optional, localized, headline for the element\n\t */\n\theadline?: ILocalizedValue<string>\n\n\t/**\n\t * Optional link target for the element\n\t */\n\tlink?: string\n\n\t/**\n\t * Optional date when this element will get valid (only show since then)\n\t */\n\tdate?: number\n\n\t/**\n\t * Optional date when this element will be invalid (only show until then)\n\t */\n\texpiryDate?: number\n}\n\n/** Wrapper for media source and MIME type */\ntype MediaSource = { src: string, mime: string }\n\n/**\n * Media content type for posts\n */\ninterface IAppDiscoverMediaContent {\n\t/**\n\t * The media source to show - either one or a list of sources with their MIME type for fallback options\n\t */\n\tsrc: MediaSource | MediaSource[]\n\n\t/**\n\t * Alternative text for the media\n\t */\n\talt: string\n\n\t/**\n\t * Optional link target for the media (e.g. to the full video)\n\t */\n\tlink?: string\n}\n\n/**\n * Wrapper for post media\n */\ninterface IAppDiscoverMedia {\n\t/**\n\t * The alignment of the media element\n\t */\n\talignment?: 'start' | 'end' | 'center'\n\n\t/**\n\t * The (localized) content\n\t */\n\tcontent: ILocalizedValue<IAppDiscoverMediaContent>\n}\n\n/**\n * An app element only used for the showcase type\n */\nexport interface IAppDiscoverApp {\n\t/** The App ID */\n\ttype: 'app'\n\tappId: string\n}\n\nexport interface IAppDiscoverPost extends IAppDiscoverElement {\n\ttype: 'post'\n\ttext?: ILocalizedValue<string>\n\tmedia?: IAppDiscoverMedia\n}\n\nexport interface IAppDiscoverShowcase extends IAppDiscoverElement {\n\ttype: 'showcase'\n\tcontent: (IAppDiscoverPost | IAppDiscoverApp)[]\n}\n\nexport interface IAppDiscoverCarousel extends IAppDiscoverElement {\n\ttype: 'carousel'\n\ttext?: ILocalizedValue<string>\n\tcontent: IAppDiscoverPost[]\n}\n\nexport type IAppDiscoverElements = IAppDiscoverPost | IAppDiscoverCarousel | IAppDiscoverShowcase\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { PropType } from 'vue'\nimport type { IAppDiscoverElement } from '../../constants/AppDiscoverTypes.ts'\n\nimport { APP_DISCOVER_KNOWN_TYPES } from '../../constants/AppDiscoverTypes.ts'\n\n/**\n * Common Props for all app discover types\n */\nexport const commonAppDiscoverProps = {\n\ttype: {\n\t\ttype: String as PropType<IAppDiscoverElement['type']>,\n\t\trequired: true,\n\t\tvalidator: (v: unknown) => typeof v === 'string' && APP_DISCOVER_KNOWN_TYPES.includes(v as never),\n\t},\n\n\tid: {\n\t\ttype: String as PropType<IAppDiscoverElement['id']>,\n\t\trequired: true,\n\t},\n\n\tdate: {\n\t\ttype: Number as PropType<IAppDiscoverElement['date']>,\n\t\trequired: false,\n\t\tdefault: undefined,\n\t},\n\n\texpiryDate: {\n\t\ttype: Number as PropType<IAppDiscoverElement['expiryDate']>,\n\t\trequired: false,\n\t\tdefault: undefined,\n\t},\n\n\theadline: {\n\t\ttype: Object as PropType<IAppDiscoverElement['headline']>,\n\t\trequired: false,\n\t\tdefault: () => null,\n\t},\n\n\tlink: {\n\t\ttype: String as PropType<IAppDiscoverElement['link']>,\n\t\trequired: false,\n\t\tdefault: () => null,\n\t},\n} as const\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { ILocalizedValue } from '../constants/AppDiscoverTypes'\n\nimport { getLanguage } from '@nextcloud/l10n'\nimport { computed, type Ref } from 'vue'\n\n/**\n * Helper to get the localized value for the current users language\n * @param dict The dictionary to get the value from\n * @param language The language to use\n */\nconst getLocalizedValue = <T, >(dict: ILocalizedValue<T>, language: string) => dict[language] ?? dict[language.split('_')[0]] ?? dict.en ?? null\n\n/**\n * Get the localized value of the dictionary provided\n * @param dict Dictionary\n * @return String or null if invalid dictionary\n */\nexport const useLocalizedValue = <T, >(dict: Ref<ILocalizedValue<T|undefined>|undefined|null>) => {\n\t/**\n\t * Language of the current user\n\t */\n\tconst language = getLanguage()\n\n\treturn computed(() => !dict?.value ? null : getLocalizedValue<T>(dict.value as ILocalizedValue<T>, language))\n}\n","<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<a v-if=\"linkProps\" v-bind=\"linkProps\">\n\t\t<slot />\n\t</a>\n\t<RouterLink v-else-if=\"routerProps\" v-bind=\"routerProps\">\n\t\t<slot />\n\t</RouterLink>\n</template>\n\n<script lang=\"ts\">\nimport type { RouterLinkProps } from 'vue-router/types/router.js'\n\nimport { loadState } from '@nextcloud/initial-state'\nimport { generateUrl } from '@nextcloud/router'\nimport { defineComponent } from 'vue'\nimport { RouterLink } from 'vue-router'\n\nconst knownRoutes = Object.fromEntries(\n\tObject.entries(\n\t\tloadState<Record<string, { app?: string, href: string }>>('core', 'apps'),\n\t).map(([k, v]) => [v.app ?? k, v.href]),\n)\n\n/**\n * This component either shows a native link to the installed app or external size - or a router link to the appstore page of the app if not installed\n */\nexport default defineComponent({\n\tname: 'AppLink',\n\n\tcomponents: { RouterLink },\n\n\tprops: {\n\t\thref: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\trouterProps: undefined as RouterLinkProps|undefined,\n\t\t\tlinkProps: undefined as Record<string, string>|undefined,\n\t\t}\n\t},\n\n\twatch: {\n\t\thref: {\n\t\t\timmediate: true,\n\t\t\thandler() {\n\t\t\t\tconst match = this.href.match(/^app:\\/\\/([^/]+)(\\/.+)?$/)\n\t\t\t\tthis.routerProps = undefined\n\t\t\t\tthis.linkProps = undefined\n\n\t\t\t\t// not an app url\n\t\t\t\tif (match === null) {\n\t\t\t\t\tthis.linkProps = {\n\t\t\t\t\t\thref: this.href,\n\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\trel: 'noreferrer noopener',\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconst appId = match[1]\n\t\t\t\t// Check if specific route was requested\n\t\t\t\tif (match[2]) {\n\t\t\t\t\t// we do no know anything about app internal path so we only allow generic app paths\n\t\t\t\t\tthis.linkProps = {\n\t\t\t\t\t\thref: generateUrl(`/apps/${appId}${match[2]}`),\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// If we know any route for that app we open it\n\t\t\t\tif (appId in knownRoutes) {\n\t\t\t\t\tthis.linkProps = {\n\t\t\t\t\t\thref: knownRoutes[appId],\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Fallback to show the app store entry\n\t\t\t\tthis.routerProps = {\n\t\t\t\t\tto: {\n\t\t\t\t\t\tname: 'apps-details',\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tcategory: this.$route.params?.category ?? 'discover',\n\t\t\t\t\t\t\tid: appId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<article :id=\"domId\"\n\t\tref=\"container\"\n\t\tclass=\"app-discover-post\"\n\t\t:class=\"{\n\t\t\t'app-discover-post--reverse': media && media.alignment === 'start',\n\t\t\t'app-discover-post--small': isSmallWidth\n\t\t}\">\n\t\t<component :is=\"link ? 'AppLink' : 'div'\"\n\t\t\tv-if=\"headline || text\"\n\t\t\t:href=\"link\"\n\t\t\tclass=\"app-discover-post__text\">\n\t\t\t<component :is=\"inline ? 'h4' : 'h3'\">\n\t\t\t\t{{ translatedHeadline }}\n\t\t\t</component>\n\t\t\t<p>{{ translatedText }}</p>\n\t\t</component>\n\t\t<component :is=\"mediaLink ? 'AppLink' : 'div'\"\n\t\t\tv-if=\"mediaSources\"\n\t\t\t:href=\"mediaLink\"\n\t\t\tclass=\"app-discover-post__media\"\n\t\t\t:class=\"{\n\t\t\t\t'app-discover-post__media--fullwidth': isFullWidth,\n\t\t\t\t'app-discover-post__media--start': media?.alignment === 'start',\n\t\t\t\t'app-discover-post__media--end': media?.alignment === 'end',\n\t\t\t}\">\n\t\t\t<component :is=\"isImage ? 'picture' : 'video'\"\n\t\t\t\tref=\"mediaElement\"\n\t\t\t\tclass=\"app-discover-post__media-element\"\n\t\t\t\t:muted=\"!isImage\"\n\t\t\t\t:playsinline=\"!isImage\"\n\t\t\t\t:preload=\"!isImage && 'auto'\"\n\t\t\t\t@ended=\"hasPlaybackEnded = true\">\n\t\t\t\t<source v-for=\"source of mediaSources\"\n\t\t\t\t\t:key=\"source.src\"\n\t\t\t\t\t:src=\"isImage ? undefined : generatePrivacyUrl(source.src)\"\n\t\t\t\t\t:srcset=\"isImage ? generatePrivacyUrl(source.src) : undefined\"\n\t\t\t\t\t:type=\"source.mime\">\n\t\t\t\t<img v-if=\"isImage\"\n\t\t\t\t\t:src=\"generatePrivacyUrl(mediaSources[0].src)\"\n\t\t\t\t\t:alt=\"mediaAlt\">\n\t\t\t</component>\n\t\t\t<div class=\"app-discover-post__play-icon-wrapper\">\n\t\t\t\t<NcIconSvgWrapper v-if=\"!isImage && showPlayVideo\"\n\t\t\t\t\tclass=\"app-discover-post__play-icon\"\n\t\t\t\t\t:path=\"mdiPlayCircleOutline\"\n\t\t\t\t\t:size=\"92\" />\n\t\t\t</div>\n\t\t</component>\n\t</article>\n</template>\n\n<script lang=\"ts\">\nimport type { IAppDiscoverPost } from '../../constants/AppDiscoverTypes.ts'\nimport type { PropType } from 'vue'\n\nimport { mdiPlayCircleOutline } from '@mdi/js'\nimport { generateUrl } from '@nextcloud/router'\nimport { useElementSize, useElementVisibility } from '@vueuse/core'\nimport { computed, defineComponent, ref, watchEffect } from 'vue'\nimport { commonAppDiscoverProps } from './common'\nimport { useLocalizedValue } from '../../composables/useGetLocalizedValue'\n\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\nimport AppLink from './AppLink.vue'\n\nexport default defineComponent({\n\tcomponents: {\n\t\tAppLink,\n\t\tNcIconSvgWrapper,\n\t},\n\n\tprops: {\n\t\t...commonAppDiscoverProps,\n\n\t\ttext: {\n\t\t\ttype: Object as PropType<IAppDiscoverPost['text']>,\n\t\t\trequired: false,\n\t\t\tdefault: () => null,\n\t\t},\n\n\t\tmedia: {\n\t\t\ttype: Object as PropType<IAppDiscoverPost['media']>,\n\t\t\trequired: false,\n\t\t\tdefault: () => null,\n\t\t},\n\n\t\tinline: {\n\t\t\ttype: Boolean,\n\t\t\trequired: false,\n\t\t\tdefault: false,\n\t\t},\n\n\t\tdomId: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: null,\n\t\t},\n\t},\n\n\tsetup(props) {\n\t\tconst translatedHeadline = useLocalizedValue(computed(() => props.headline))\n\t\tconst translatedText = useLocalizedValue(computed(() => props.text))\n\t\tconst localizedMedia = useLocalizedValue(computed(() => props.media?.content))\n\n\t\tconst mediaSources = computed(() => localizedMedia.value !== null ? [localizedMedia.value.src].flat() : undefined)\n\t\tconst mediaAlt = computed(() => localizedMedia.value?.alt ?? '')\n\n\t\tconst isImage = computed(() => mediaSources?.value?.[0].mime.startsWith('image/') === true)\n\t\t/**\n\t\t * Is the media is shown full width\n\t\t */\n\t\tconst isFullWidth = computed(() => !translatedHeadline.value && !translatedText.value)\n\n\t\t/**\n\t\t * Link on the media\n\t\t * Fallback to post link to prevent link inside link (which is invalid HTML)\n\t\t */\n\t\tconst mediaLink = computed(() => localizedMedia.value?.link ?? props.link)\n\n\t\tconst hasPlaybackEnded = ref(false)\n\t\tconst showPlayVideo = computed(() => localizedMedia.value?.link && hasPlaybackEnded.value)\n\n\t\t/**\n\t\t * The content is sized / styles are applied based on the container width\n\t\t * To make it responsive even for inline usage and when opening / closing the sidebar / navigation\n\t\t */\n\t\tconst container = ref<HTMLElement>()\n\t\tconst { width: containerWidth } = useElementSize(container)\n\t\tconst isSmallWidth = computed(() => containerWidth.value < 600)\n\n\t\t/**\n\t\t * Generate URL for cached media to prevent user can be tracked\n\t\t * @param url The URL to resolve\n\t\t */\n\t\tconst generatePrivacyUrl = (url: string) => url.startsWith('/') ? url : generateUrl('/settings/api/apps/media?fileName={fileName}', { fileName: url })\n\n\t\tconst mediaElement = ref<HTMLVideoElement|HTMLPictureElement>()\n\t\tconst mediaIsVisible = useElementVisibility(mediaElement, { threshold: 0.3 })\n\t\twatchEffect(() => {\n\t\t\t// Only if media is video\n\t\t\tif (!isImage.value && mediaElement.value) {\n\t\t\t\tconst video = mediaElement.value as HTMLVideoElement\n\n\t\t\t\tif (mediaIsVisible.value) {\n\t\t\t\t\t// Ensure video is muted - otherwise .play() will be blocked by browsers\n\t\t\t\t\tvideo.muted = true\n\t\t\t\t\t// If visible start playback\n\t\t\t\t\tvideo.play()\n\t\t\t\t} else {\n\t\t\t\t\t// If not visible pause the playback\n\t\t\t\t\tvideo.pause()\n\t\t\t\t\t// If the animation has ended reset\n\t\t\t\t\tif (video.ended) {\n\t\t\t\t\t\tvideo.currentTime = 0\n\t\t\t\t\t\thasPlaybackEnded.value = false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\treturn {\n\t\t\tmdiPlayCircleOutline,\n\n\t\t\tcontainer,\n\n\t\t\ttranslatedText,\n\t\t\ttranslatedHeadline,\n\t\t\tmediaElement,\n\t\t\tmediaSources,\n\t\t\tmediaAlt,\n\t\t\tmediaLink,\n\n\t\t\thasPlaybackEnded,\n\t\t\tshowPlayVideo,\n\n\t\t\tisFullWidth,\n\t\t\tisSmallWidth,\n\t\t\tisImage,\n\n\t\t\tgeneratePrivacyUrl,\n\t\t}\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.app-discover-post {\n\tmax-height: 300px;\n\twidth: 100%;\n\tbackground-color: var(--color-primary-element-light);\n\tborder-radius: var(--border-radius-rounded);\n\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: start;\n\n\t&--reverse {\n\t\tflex-direction: row-reverse;\n\t}\n\n\th3, h4 {\n\t\tfont-size: 24px;\n\t\tfont-weight: 600;\n\t\tmargin-block: 0 1em;\n\t}\n\n\t&__text {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\tpadding: var(--border-radius-rounded);\n\t\toverflow-y: scroll;\n\t}\n\n\t// If there is media next to the text we do not want a padding on the bottom as this looks weird when scrolling\n\t&:has(&__media) &__text {\n\t\tpadding-block-end: 0;\n\t}\n\n\t&__media {\n\t\tdisplay: block;\n\t\toverflow: hidden;\n\n\t\tmax-width: 450px;\n\t\tborder-radius: var(--border-radius-rounded);\n\n\t\t&--fullwidth {\n\t\t\tmax-width: unset;\n\t\t\tmax-height: unset;\n\t\t}\n\n\t\t&--end {\n\t\t\tborder-end-start-radius: 0;\n\t\t\tborder-start-start-radius: 0;\n\t\t}\n\n\t\t&--start {\n\t\t\tborder-end-end-radius: 0;\n\t\t\tborder-start-end-radius: 0;\n\t\t}\n\n\t\timg, &-element {\n\t\t\theight: 100%;\n\t\t\twidth: 100%;\n\t\t\tobject-fit: cover;\n\t\t\tobject-position: center;\n\t\t}\n\t}\n\n\t&__play-icon {\n\t\t&-wrapper {\n\t\t\tposition: relative;\n\t\t\ttop: -50%;\n\t\t\tleft: -50%;\n\t\t}\n\n\t\tposition: absolute;\n\t\ttop: -46px; // half of the icon height\n\t\tright: -46px; // half of the icon width\n\t}\n}\n\n.app-discover-post--small {\n\t&.app-discover-post {\n\t\tflex-direction: column;\n\t\tmax-height: 500px;\n\n\t\t&--reverse {\n\t\t\tflex-direction: column-reverse;\n\t\t}\n\t}\n\n\t.app-discover-post {\n\t\t&__text {\n\t\t\tflex: 1 1 50%;\n\t\t}\n\n\t\t&__media {\n\t\t\tmin-width: 100%;\n\n\t\t\t&--end {\n\t\t\t\tborder-radius: var(--border-radius-rounded);\n\t\t\t\tborder-start-end-radius: 0;\n\t\t\t\tborder-start-start-radius: 0;\n\t\t\t}\n\n\t\t\t&--start {\n\t\t\t\tborder-radius: var(--border-radius-rounded);\n\t\t\t\tborder-end-end-radius: 0;\n\t\t\t\tborder-end-start-radius: 0;\n\t\t\t}\n\t\t}\n\t}\n}\n</style>\n"],"names":["APP_DISCOVER_KNOWN_TYPES","commonAppDiscoverProps","v","getLocalizedValue","dict","language","_a","_b","_c","useLocalizedValue","getLanguage","computed","knownRoutes","loadState","k","_sfc_main$1","defineComponent","RouterLink","match","appId","generateUrl","_sfc_main","AppLink","NcIconSvgWrapper","props","translatedHeadline","translatedText","localizedMedia","mediaSources","mediaAlt","isImage","isFullWidth","mediaLink","hasPlaybackEnded","ref","showPlayVideo","container","containerWidth","useElementSize","isSmallWidth","generatePrivacyUrl","url","mediaElement","mediaIsVisible","useElementVisibility","watchEffect","video","mdiPlayCircleOutline"],"mappings":"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"}