/*! third party licenses: dist/vendor.LICENSE.txt */
var I=Object.defineProperty;var p=t=>{throw TypeError(t)};var g=(t,e,s)=>e in t?I(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var m=(t,e,s)=>g(t,typeof e!="symbol"?e+"":e,s),w=(t,e,s)=>e.has(t)||p("Cannot "+s);var r=(t,e,s)=>(w(t,e,"read from private field"),s?s.call(t):e.get(t)),d=(t,e,s)=>e.has(t)?p("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,s),n=(t,e,s,c)=>(w(t,e,"write to private field"),c?c.call(t,s):e.set(t,s),s);var y=(t,e,s,c)=>({set _(v){n(t,e,v,s)},get _(){return r(t,e,c)}});class q{constructor(e){m(this,"value");m(this,"next");this.value=e}}var i,o,u;class z{constructor(){d(this,i);d(this,o);d(this,u);this.clear()}enqueue(e){const s=new q(e);r(this,i)?(r(this,o).next=s,n(this,o,s)):(n(this,i,s),n(this,o,s)),y(this,u)._++}dequeue(){const e=r(this,i);if(e)return n(this,i,r(this,i).next),y(this,u)._--,e.value}clear(){n(this,i,void 0),n(this,o,void 0),n(this,u,0)}get size(){return r(this,u)}*[Symbol.iterator](){let e=r(this,i);for(;e;)yield e.value,e=e.next}}i=new WeakMap,o=new WeakMap,u=new WeakMap;function P(t){if(!((Number.isInteger(t)||t===Number.POSITIVE_INFINITY)&&t>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up");const e=new z;let s=0;const c=()=>{s--,e.size>0&&e.dequeue()()},v=async(a,h,l)=>{s++;const f=(async()=>a(...l))();h(f);try{await f}catch{}c()},x=(a,h,l)=>{e.enqueue(v.bind(void 0,a,h,l)),(async()=>(await Promise.resolve(),s<t&&e.size>0&&e.dequeue()()))()},b=(a,...h)=>new Promise(l=>{x(a,l,h)});return Object.defineProperties(b,{activeCount:{get:()=>s},pendingCount:{get:()=>e.size},clearQueue:{value:()=>{e.clear()}}}),b}export{P as p};
