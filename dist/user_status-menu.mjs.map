{"version":3,"mappings":";;ueAcA,MAAMA,EAAgB,MAAOC,GAAW,CACvC,MAAMC,EAAMC,EAAe,+CAA+C,EAI1E,OAHiB,MAAMC,EAAW,IAAIF,EAAK,CAC1C,OAAQD,EAAS,OAAS,QAC5B,CAAE,GACe,KAAK,IAAI,IAC1B,ECZeI,EAAA,CACd,SAAU,CACT,GAAGC,EAAS,CACX,WAAYC,GAASA,EAAM,WAAW,OACtC,oBAAqBA,GAASA,EAAM,WAAW,oBAC/C,WAAYA,GAASA,EAAM,WAAW,KACtC,cAAeA,GAASA,EAAM,WAAW,OAC5C,CAAG,EAOD,gBAAiB,CAChB,GAAI,KAAK,YAAc,KAAK,cAC3B,MAAO,GAAG,YAAK,WAAU,KAAI,YAAK,eAGnC,GAAI,KAAK,cACR,OAAO,KAAK,cAGb,GAAI,KAAK,oBACR,OAAQ,KAAK,WAAU,CACvB,IAAK,SACJ,OAAO,KAAK,GAAG,cAAe,QAAQ,EAEvC,IAAK,OACL,IAAK,OACJ,OAAO,KAAK,GAAG,cAAe,MAAM,EAErC,IAAK,MACJ,OAAO,KAAK,GAAG,cAAe,gBAAgB,EAE/C,IAAK,YACJ,OAAO,KAAK,GAAG,cAAe,WAAW,EAE1C,IAAK,UACJ,OAAO,KAAK,GAAG,cAAe,SAAS,CACvC,CAGF,OAAO,KAAK,GAAG,cAAe,YAAY,CAC1C,CACD,EAED,QAAS,CAMR,MAAM,aAAaC,EAAY,CAC9B,GAAI,CACH,MAAM,KAAK,OAAO,SAAS,YAAa,CAAE,WAAAA,CAAU,CAAE,CACtD,OAAQC,EAAK,CACbC,EAAU,KAAK,GAAG,cAAe,0CAA0C,CAAC,EAC5E,QAAQ,MAAMD,CAAG,CACjB,CACD,CACD,CACF,EC1BAE,EAAA,CACA,kBAEA,YACA,SAAAC,EACA,iBAAAC,EACA,mBAAAC,EAAA,0GACA,EACA,QAAAT,CAAA,EAEA,OAMA,QACA,aACA,UACA,CACA,EAEA,OACA,OACA,uBACA,UACA,eACA,uBACA,mBACA,CACA,EAMA,UACA,mDAEA,8BAEA,kFACA,yBACA,cACA,EAEA,uBAAAU,EAAA,KACA,MAAAC,EAAA,YACA,eAEA,kCAGA,yCAEAA,GACA,2BAEA,YACA,4DACA,WACA,UACA,GAEA,6BAEAC,EAAA,0DACA,EAKA,gBACA,+DACA,sCACAC,EAAA,0DACA,EAEA,SAIA,YACA,mBACA,EAIA,aACA,mBACA,EAQA,mCACA,IACA,MAAAC,EAAA,MAAAnB,EAAA,aACAmB,WAAA,OACA,8CAAAA,CAAA,EAEA,qDAEA,OAAAC,EAAA,CACA,kDAAAA,IAAA,WAAAA,cAAA,QACA,CACA,EACA,wBAAAb,EAAA,CACA,0BAAAA,EAAA,QACA,4CACA,OAAAA,EAAA,OACA,KAAAA,EAAA,KACA,QAAAA,EAAA,OACA,EAEA,CACA,CACA,s0BCvJMc,EAA6B,SAAY,CAC9C,MAAMnB,EAAMC,EAAe,yDAAyD,EAGpF,OAFiB,MAAMC,EAAW,IAAIF,CAAG,GAEzB,KAAK,IAAI,IAC1B,ECXMK,EAAQ,CACb,mBAAoB,CAAE,CACvB,EAEMe,EAAY,CAQjB,oBAAoBf,EAAOY,EAAQ,CAClCZ,EAAM,mBAAqB,CAAC,GAAGA,EAAM,mBAAoBY,CAAM,CAC/D,CACF,EAEMI,EAAU,CACf,mBAAmBhB,EAAO,CACzB,OAAOA,EAAM,mBAAmB,OAAS,CACzC,CACF,EAEMiB,EAAU,CASf,MAAM,0BAA0B,CAAE,MAAAjB,EAAO,OAAAkB,GAAU,CAClD,GAAIlB,EAAM,mBAAmB,OAAS,EACrC,OAGD,MAAMmB,EAAW,MAAML,EAA4B,EACnD,UAAWF,KAAUO,EACpBD,EAAO,sBAAuBN,CAAM,CAErC,CAEF,EAEAQ,EAAe,OAAEpB,EAAK,UAAEe,EAAWC,kBAASC,CAAO,ECvC7CI,EAAqB,SAAY,CACtC,MAAM1B,EAAMC,EAAe,qCAAqC,EAGhE,OAFiB,MAAMC,EAAW,IAAIF,CAAG,GAEzB,KAAK,IAAI,IAC1B,EAQM2B,EAAoB,MAAOC,GAAW,CAC3C,MAAM5B,EAAMC,EAAe,4CAA6C,CAAE,OAAQ,IAAM2B,EAAQ,EAGhG,OAFiB,MAAM1B,EAAW,IAAIF,CAAG,GAEzB,KAAK,IAAI,IAC1B,EAQM6B,EAAY,MAAOvB,GAAe,CACvC,MAAMN,EAAMC,EAAe,4CAA4C,EACvE,MAAMC,EAAW,IAAIF,EAAK,CACzB,WAAAM,CACF,CAAE,CACF,EASMwB,EAAuB,MAAOC,EAAWC,EAAU,OAAS,CACjE,MAAMhC,EAAMC,EAAe,oEAAoE,EAC/F,MAAMC,EAAW,IAAIF,EAAK,CACzB,UAAA+B,EACA,QAAAC,CACF,CAAE,CACF,EAUMC,EAAmB,MAAOC,EAASC,EAAa,KAAMH,EAAU,OAAS,CAC9E,MAAMhC,EAAMC,EAAe,gEAAgE,EAC3F,MAAMC,EAAW,IAAIF,EAAK,CACzB,QAAAkC,EACA,WAAAC,EACA,QAAAH,CACF,CAAE,CACF,EAOMI,EAAe,SAAY,CAChC,MAAMpC,EAAMC,EAAe,yDAAyD,EACpF,MAAMC,EAAW,OAAOF,CAAG,CAC5B,EAQMqC,EAAuB,MAAON,GAAc,CACjD,MAAM/B,EAAMC,EAAe,yDAA0D,CAAE,UAAA8B,CAAS,CAAE,EAGlG,OAFiB,MAAM7B,EAAW,OAAOF,CAAG,GAE5B,KAAK,IAAI,IAC1B,EC9FMsC,EAAc,IACZ,IAAI,KCUNC,EAA0BP,GAAY,CAC3C,GAAIA,IAAY,KACf,OAAO,KAGR,MAAMQ,EAAOF,EAAa,EAE1B,GAAIN,EAAQ,OAAS,SACpB,OAAAQ,EAAK,WAAWA,EAAK,WAAU,EAAKR,EAAQ,IAAI,EACzC,KAAK,MAAMQ,EAAK,QAAO,EAAK,GAAI,EAExC,GAAIR,EAAQ,OAAS,SACpB,OAAQA,EAAQ,KAAI,CACpB,IAAK,MACL,IAAK,OACJ,OAAO,OAAOS,EAAOD,CAAI,EAAE,MAAMR,EAAQ,IAAI,EAAE,OAAO,GAAG,CAAC,CAC1D,CAKF,OAAIA,EAAQ,OAAS,QACbA,EAAQ,KAGT,IACR,ECzBM3B,GAAQ,CAEb,OAAQ,KAER,oBAAqB,KAErB,QAAS,KAET,KAAM,KAEN,QAAS,KAGT,oBAAqB,KAErB,UAAW,IACZ,EAEMe,GAAY,CASjB,UAAUf,EAAO,CAAE,WAAAC,GAAc,CAChCD,EAAM,OAASC,EACfD,EAAM,oBAAsB,EAC5B,EAYD,qBAAqBA,EAAO,CAAE,UAAA0B,EAAW,QAAAC,EAAS,QAAAE,EAAS,KAAAQ,GAAQ,CAClErC,EAAM,UAAY0B,EAClB1B,EAAM,oBAAsB,GAE5BA,EAAM,QAAU6B,EAChB7B,EAAM,KAAOqC,EACbrC,EAAM,QAAU2B,CAChB,EAWD,iBAAiB3B,EAAO,CAAE,QAAA6B,EAAS,KAAAQ,EAAM,QAAAV,CAAO,EAAI,CACnD3B,EAAM,UAAY,KAClBA,EAAM,oBAAsB,GAE5BA,EAAM,QAAU6B,EAChB7B,EAAM,KAAOqC,EACbrC,EAAM,QAAU2B,CAChB,EAOD,aAAa3B,EAAO,CACnBA,EAAM,UAAY,KAClBA,EAAM,oBAAsB,GAE5BA,EAAM,QAAU,KAChBA,EAAM,KAAO,KACbA,EAAM,QAAU,IAChB,EAeD,qBAAqBA,EAAO,CAAE,OAAAY,EAAQ,oBAAA0B,EAAqB,QAAAT,EAAS,KAAAQ,EAAM,QAAAV,EAAS,oBAAAY,EAAqB,UAAAb,GAAa,CACpH1B,EAAM,OAASY,EACfZ,EAAM,QAAU6B,EAChB7B,EAAM,KAAOqC,EAIT,OAAOC,EAAwB,MAClCtC,EAAM,oBAAsBsC,GAEzB,OAAOX,EAAY,MACtB3B,EAAM,QAAU2B,GAEb,OAAOY,EAAwB,MAClCvC,EAAM,oBAAsBuC,GAEzB,OAAOb,EAAc,MACxB1B,EAAM,UAAY0B,EAEnB,CACF,EAEMV,GAAU,CAAE,EAEZC,GAAU,CAYf,MAAM,UAAU,CAAE,OAAAC,EAAQ,MAAAlB,CAAK,EAAI,CAAE,WAAAC,CAAU,EAAI,OAClD,MAAMuB,EAAUvB,CAAU,EAC1BiB,EAAO,YAAa,CAAE,WAAAjB,EAAY,EAClCuC,EAAK,6BAA8B,CAClC,OAAQxC,EAAM,OACd,QAASA,EAAM,QACf,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,QAAQyC,IAAc,IAAdA,cAAkB,GAC7B,CAAG,CACD,EAaD,MAAM,oBAAoB,CAAE,OAAAvB,EAAQ,MAAAlB,CAAK,EAAIY,EAAQ,CACpDM,EAAO,uBAAwBN,CAAM,CACrC,EAcD,MAAM,qBAAqB,CAAE,OAAAM,EAAQ,UAAAwB,EAAW,MAAA1C,CAAK,EAAI,CAAE,UAAA0B,EAAW,QAAAC,GAAW,OAChF,MAAMgB,EAAkBT,EAAuBP,CAAO,EAEtD,MAAMF,EAAqBC,EAAWiB,CAAe,EACrD,MAAM/B,EAAS8B,EAAU,mBAAmB,mBAAmB,KAAM9B,GAAWA,EAAO,KAAOc,CAAS,EACjG,CAAE,QAAAG,EAAS,KAAAQ,CAAI,EAAKzB,EAE1BM,EAAO,uBAAwB,CAAE,UAAAQ,EAAW,QAASiB,EAAiB,QAAAd,EAAS,KAAAQ,EAAM,EACrFG,EAAK,6BAA8B,CAClC,OAAQxC,EAAM,OACd,QAASA,EAAM,QACf,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,QAAQyC,IAAc,IAAdA,cAAkB,GAC7B,CAAG,CACD,EAcD,MAAM,iBAAiB,CAAE,OAAAvB,EAAQ,MAAAlB,CAAK,EAAI,CAAE,QAAA6B,EAAS,KAAAQ,EAAM,QAAAV,GAAW,OACrE,MAAMgB,EAAkBT,EAAuBP,CAAO,EAEtD,MAAMC,EAAiBC,EAASQ,EAAMM,CAAe,EACrDzB,EAAO,mBAAoB,CAAE,QAAAW,EAAS,KAAAQ,EAAM,QAASM,EAAiB,EACtEH,EAAK,6BAA8B,CAClC,OAAQxC,EAAM,OACd,QAASA,EAAM,QACf,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,QAAQyC,IAAc,IAAdA,cAAkB,GAC7B,CAAG,CACD,EAUD,MAAM,aAAa,CAAE,OAAAvB,EAAQ,MAAAlB,GAAS,OACrC,MAAM+B,EAAc,EACpBb,EAAO,cAAc,EACrBsB,EAAK,6BAA8B,CAClC,OAAQxC,EAAM,OACd,QAASA,EAAM,QACf,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,QAAQyC,IAAc,IAAdA,cAAkB,GAC7B,CAAG,CACD,EASD,MAAM,wBAAwB,CAAE,OAAAvB,GAAU,CACzC,MAAMN,EAAS,MAAMS,EAAoB,EACzCH,EAAO,uBAAwBN,CAAM,CACrC,EAiBD,MAAM,uBAAuB,CAAE,OAAAM,CAAQ,EAAEN,EAAQ,CAChDM,EAAO,uBAAwBN,CAAM,CACrC,EAQD,2BAA2B,CAAE,OAAAM,GAAU,CACtC,MAAMN,EAASgC,EAAU,cAAe,QAAQ,EAChD1B,EAAO,uBAAwBN,CAAM,CACrC,CACF,EAEAiC,GAAe,OAAE7C,GAAK,UAAEe,GAAWC,mBAASC,EAAO,EC1R7CjB,GAAQ,CAEb,OAAQ,KAER,oBAAqB,KAErB,QAAS,KAET,KAAM,KAEN,QAAS,KAGT,oBAAqB,KAErB,UAAW,IACZ,EAEMe,GAAY,CAcjB,2BAA2Bf,EAAO,CAAE,OAAAY,EAAQ,oBAAA0B,EAAqB,QAAAT,EAAS,KAAAQ,EAAM,QAAAV,EAAS,oBAAAY,EAAqB,UAAAb,GAAa,CAC1H1B,EAAM,OAASY,EACfZ,EAAM,QAAU6B,EAChB7B,EAAM,KAAOqC,EAIT,OAAOC,EAAwB,MAClCtC,EAAM,oBAAsBsC,GAEzB,OAAOX,EAAY,MACtB3B,EAAM,QAAU2B,GAEb,OAAOY,EAAwB,MAClCvC,EAAM,oBAAsBuC,GAEzB,OAAOb,EAAc,MACxB1B,EAAM,UAAY0B,EAEnB,CACF,EAEMV,GAAU,CAAE,EAEZC,GAAU,CAQf,MAAM,sBAAsB,CAAE,OAAAC,GAAU,OACvC,GAAI,CACH,MAAMN,EAAS,MAAMU,GAAkBmB,IAAc,IAAdA,cAAkB,GAAG,EAC5DvB,EAAO,6BAA8BN,CAAM,CAC3C,MAAW,CAEX,CACD,EAED,MAAM,uBAAuB,CAAE,OAAAM,GAAU,CAAE,UAAAQ,CAAS,EAAI,OACvD,MAAMd,EAAS,MAAMoB,EAAqBN,CAAS,EAC/Cd,IACHM,EAAO,6BAA8B,EAAE,EACvCA,EAAO,uBAAwBN,CAAM,EACrC4B,EAAK,6BAA8B,CAClC,OAAQ5B,EAAO,OACf,QAASA,EAAO,QAChB,KAAMA,EAAO,KACb,QAASA,EAAO,QAChB,QAAQ6B,IAAc,IAAdA,cAAkB,GAC9B,CAAI,EAEF,CACF,EAEAK,GAAe,CAAE,MAAA9C,GAAO,UAAAe,GAAW,QAAAC,GAAS,QAAAC,EAAO,EC1FnD8B,EAAI,IAAIC,CAAI,EAEZ,MAAeC,EAAA,IAAIC,EAAM,CACxB,QAAS,CACR,mBAAA9B,EACA,WAAAyB,GACA,iBAAAC,EACA,EACD,OAAQ,EACT,CAAC,ECRDC,EAAI,UAAU,EAAI,EAClBA,EAAI,UAAU,GAAK,EAEnB,MAAMI,GAAa,SAAS,eAAe,wBAAwB,EAE7DC,EAAiB,IAAM,CAC5B,MAAMD,EAAa,SAAS,eAAe,wBAAwB,EAEnE,IAAIJ,EAAI,CACP,GAAII,EACJ,OAAQE,GAAKA,EAAEC,CAAU,EACzB,MAAAL,CACF,CAAE,CACF,EAEIE,GACHC,EAAgB,EAEhB1C,EAAU,yBAA0B0C,CAAc,EAInD,SAAS,iBAAiB,mBAAoB,UAAW,CACnD,IAAI,WAIT,IAAI,UAAU,eAAe,SAAWG,GAAO,CAC9C,MAAMC,EAAYT,EAAI,OAAOO,CAAU,EACvC,OAAO,IAAIE,EAAU,CACpB,UAAW,CACV,OAAQ,EACR,EACD,MAAAP,CACH,CAAG,EAAE,OAAOM,CAAE,CACd,CAAE,CACF,CAAC","names":["sendHeartbeat","isAway","url","generateOcsUrl","HttpClient","OnlineStatusMixin","mapState","state","statusType","err","showError","_sfc_main","NcButton","NcUserStatusIcon","__vitePreload","debounce","wasAway","subscribe","unsubscribe","status","error","fetchAllPredefinedStatuses","mutations","getters","actions","commit","statuses","predefinedStatuses","fetchCurrentStatus","fetchBackupStatus","userId","setStatus","setPredefinedMessage","messageId","clearAt","setCustomMessage","message","statusIcon","clearMessage","revertToBackupStatus","dateFactory","getTimestampForClearAt","date","moment","icon","statusIsUserDefined","messageIsPredefined","emit","getCurrentUser","rootState","resolvedClearAt","loadState","userStatus","userBackupStatus","Vue","Vuex","store","Store","mountPoint","mountMenuEntry","h","UserStatus","el","Dashboard"],"ignoreList":[],"sources":["../apps/user_status/src/services/heartbeatService.js","../apps/user_status/src/mixins/OnlineStatusMixin.js","../apps/user_status/src/UserStatus.vue","../apps/user_status/src/services/predefinedStatusService.js","../apps/user_status/src/store/predefinedStatuses.js","../apps/user_status/src/services/statusService.js","../apps/user_status/src/services/dateService.js","../apps/user_status/src/services/clearAtService.js","../apps/user_status/src/store/userStatus.js","../apps/user_status/src/store/userBackupStatus.js","../apps/user_status/src/store/index.js","../apps/user_status/src/menu.js"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport HttpClient from '@nextcloud/axios'\nimport { generateOcsUrl } from '@nextcloud/router'\n\n/**\n * Sends a heartbeat\n *\n * @param {boolean} isAway Whether or not the user is active\n * @return {Promise<void>}\n */\nconst sendHeartbeat = async (isAway) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/heartbeat?format=json')\n\tconst response = await HttpClient.put(url, {\n\t\tstatus: isAway ? 'away' : 'online',\n\t})\n\treturn response.data.ocs.data\n}\n\nexport {\n\tsendHeartbeat,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { mapState } from 'vuex'\nimport { showError } from '@nextcloud/dialogs'\n\nexport default {\n\tcomputed: {\n\t\t...mapState({\n\t\t\tstatusType: state => state.userStatus.status,\n\t\t\tstatusIsUserDefined: state => state.userStatus.statusIsUserDefined,\n\t\t\tcustomIcon: state => state.userStatus.icon,\n\t\t\tcustomMessage: state => state.userStatus.message,\n\t\t}),\n\n\t\t/**\n\t\t * The message displayed in the top right corner\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tvisibleMessage() {\n\t\t\tif (this.customIcon && this.customMessage) {\n\t\t\t\treturn `${this.customIcon} ${this.customMessage}`\n\t\t\t}\n\n\t\t\tif (this.customMessage) {\n\t\t\t\treturn this.customMessage\n\t\t\t}\n\n\t\t\tif (this.statusIsUserDefined) {\n\t\t\t\tswitch (this.statusType) {\n\t\t\t\tcase 'online':\n\t\t\t\t\treturn this.$t('user_status', 'Online')\n\n\t\t\t\tcase 'away':\n\t\t\t\tcase 'busy':\n\t\t\t\t\treturn this.$t('user_status', 'Away')\n\n\t\t\t\tcase 'dnd':\n\t\t\t\t\treturn this.$t('user_status', 'Do not disturb')\n\n\t\t\t\tcase 'invisible':\n\t\t\t\t\treturn this.$t('user_status', 'Invisible')\n\n\t\t\t\tcase 'offline':\n\t\t\t\t\treturn this.$t('user_status', 'Offline')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.$t('user_status', 'Set status')\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Changes the user-status\n\t\t *\n\t\t * @param {string} statusType (online / away / dnd / invisible)\n\t\t */\n\t\tasync changeStatus(statusType) {\n\t\t\ttry {\n\t\t\t\tawait this.$store.dispatch('setStatus', { statusType })\n\t\t\t} catch (err) {\n\t\t\t\tshowError(this.$t('user_status', 'There was an error saving the new status'))\n\t\t\t\tconsole.debug(err)\n\t\t\t}\n\t\t},\n\t},\n}\n","<!--\n  - SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<component :is=\"inline ? 'div' : 'li'\">\n\t\t<!-- User Status = Status modal toggle -->\n\t\t<button v-if=\"!inline\"\n\t\t\tclass=\"user-status-menu-item\"\n\t\t\t@click.stop=\"openModal\">\n\t\t\t<NcUserStatusIcon class=\"user-status-icon\"\n\t\t\t\t:status=\"statusType\"\n\t\t\t\taria-hidden=\"true\" />\n\t\t\t{{ visibleMessage }}\n\t\t</button>\n\n\t\t<!-- Dashboard Status -->\n\t\t<NcButton v-else\n\t\t\t@click.stop=\"openModal\">\n\t\t\t<template #icon>\n\t\t\t\t<NcUserStatusIcon class=\"user-status-icon\"\n\t\t\t\t\t:status=\"statusType\"\n\t\t\t\t\taria-hidden=\"true\" />\n\t\t\t</template>\n\t\t\t{{ visibleMessage }}\n\t\t</NcButton>\n\n\t\t<!-- Status management modal -->\n\t\t<SetStatusModal v-if=\"isModalOpen\"\n\t\t\t:inline=\"inline\"\n\t\t\t@close=\"closeModal\" />\n\t</component>\n</template>\n\n<script>\nimport { subscribe, unsubscribe } from '@nextcloud/event-bus'\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\nimport NcUserStatusIcon from '@nextcloud/vue/dist/Components/NcUserStatusIcon.js'\nimport debounce from 'debounce'\n\nimport { sendHeartbeat } from './services/heartbeatService.js'\nimport OnlineStatusMixin from './mixins/OnlineStatusMixin.js'\n\nexport default {\n\tname: 'UserStatus',\n\n\tcomponents: {\n\t\tNcButton,\n\t\tNcUserStatusIcon,\n\t\tSetStatusModal: () => import(/* webpackChunkName: 'user-status-modal' */'./components/SetStatusModal.vue'),\n\t},\n\tmixins: [OnlineStatusMixin],\n\n\tprops: {\n\t\t/**\n\t\t * Whether the component should be rendered as a Dashboard Status or a User Menu Entries\n\t\t * true = Dashboard Status\n\t\t * false = User Menu Entries\n\t\t */\n\t\tinline: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\theartbeatInterval: null,\n\t\t\tisAway: false,\n\t\t\tisModalOpen: false,\n\t\t\tmouseMoveListener: null,\n\t\t\tsetAwayTimeout: null,\n\t\t}\n\t},\n\n\t/**\n\t * Loads the current user's status from initial state\n\t * and stores it in Vuex\n\t */\n\tmounted() {\n\t\tthis.$store.dispatch('loadStatusFromInitialState')\n\n\t\tif (OC.config.session_keepalive) {\n\t\t\t// Send the latest status to the server every 5 minutes\n\t\t\tthis.heartbeatInterval = setInterval(this._backgroundHeartbeat.bind(this), 1000 * 60 * 5)\n\t\t\tthis.setAwayTimeout = () => {\n\t\t\t\tthis.isAway = true\n\t\t\t}\n\t\t\t// Catch mouse movements, but debounce to once every 30 seconds\n\t\t\tthis.mouseMoveListener = debounce(() => {\n\t\t\t\tconst wasAway = this.isAway\n\t\t\t\tthis.isAway = false\n\t\t\t\t// Reset the two minute counter\n\t\t\t\tclearTimeout(this.setAwayTimeout)\n\t\t\t\t// If the user did not move the mouse within two minutes,\n\t\t\t\t// mark them as away\n\t\t\t\tsetTimeout(this.setAwayTimeout, 1000 * 60 * 2)\n\n\t\t\t\tif (wasAway) {\n\t\t\t\t\tthis._backgroundHeartbeat()\n\t\t\t\t}\n\t\t\t}, 1000 * 2, true)\n\t\t\twindow.addEventListener('mousemove', this.mouseMoveListener, {\n\t\t\t\tcapture: true,\n\t\t\t\tpassive: true,\n\t\t\t})\n\n\t\t\tthis._backgroundHeartbeat()\n\t\t}\n\t\tsubscribe('user_status:status.updated', this.handleUserStatusUpdated)\n\t},\n\n\t/**\n\t * Some housekeeping before destroying the component\n\t */\n\tbeforeDestroy() {\n\t\twindow.removeEventListener('mouseMove', this.mouseMoveListener)\n\t\tclearInterval(this.heartbeatInterval)\n\t\tunsubscribe('user_status:status.updated', this.handleUserStatusUpdated)\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Opens the modal to set a custom status\n\t\t */\n\t\topenModal() {\n\t\t\tthis.isModalOpen = true\n\t\t},\n\t\t/**\n\t\t * Closes the modal\n\t\t */\n\t\tcloseModal() {\n\t\t\tthis.isModalOpen = false\n\t\t},\n\n\t\t/**\n\t\t * Sends the status heartbeat to the server\n\t\t *\n\t\t * @return {Promise<void>}\n\t\t * @private\n\t\t */\n\t\tasync _backgroundHeartbeat() {\n\t\t\ttry {\n\t\t\t\tconst status = await sendHeartbeat(this.isAway)\n\t\t\t\tif (status?.userId) {\n\t\t\t\t\tthis.$store.dispatch('setStatusFromHeartbeat', status)\n\t\t\t\t} else {\n\t\t\t\t\tawait this.$store.dispatch('reFetchStatusFromServer')\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.debug('Failed sending heartbeat, got: ' + error.response?.status)\n\t\t\t}\n\t\t},\n\t\thandleUserStatusUpdated(state) {\n\t\t\tif (OC.getCurrentUser().uid === state.userId) {\n\t\t\t\tthis.$store.dispatch('setStatusFromObject', {\n\t\t\t\t\tstatus: state.status,\n\t\t\t\t\ticon: state.icon,\n\t\t\t\t\tmessage: state.message,\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.user-status-menu-item {\n\t// Ensure the maxcontrast color is set for the background\n\t--color-text-maxcontrast: var(--color-text-maxcontrast-background-blur, var(--color-main-text));\n\n\twidth: auto;\n\tmin-width: 44px;\n\theight: 44px;\n\tmargin: 0;\n\tborder: 0;\n\tborder-radius: var(--border-radius-pill);\n\tbackground-color: var(--color-main-background-blur);\n\tfont-size: inherit;\n\tfont-weight: normal;\n\n\t-webkit-backdrop-filter: var(--background-blur);\n\tbackdrop-filter: var(--background-blur);\n\n\t&:active,\n\t&:hover,\n\t&:focus-visible {\n\t\tbackground-color: var(--color-background-hover);\n\t}\n\t&:focus-visible {\n\t\tbox-shadow: 0 0 0 4px var(--color-main-background) !important;\n\t\toutline: 2px solid var(--color-main-text) !important;\n\t}\n}\n\n.user-status-icon {\n\twidth: 16px;\n\theight: 16px;\n\tmargin-right: 10px;\n\topacity: 1 !important;\n\tbackground-size: 16px;\n\tvertical-align: middle !important;\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport HttpClient from '@nextcloud/axios'\nimport { generateOcsUrl } from '@nextcloud/router'\n\n/**\n * Fetches all predefined statuses from the server\n *\n * @return {Promise<void>}\n */\nconst fetchAllPredefinedStatuses = async () => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/predefined_statuses?format=json')\n\tconst response = await HttpClient.get(url)\n\n\treturn response.data.ocs.data\n}\n\nexport {\n\tfetchAllPredefinedStatuses,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { fetchAllPredefinedStatuses } from '../services/predefinedStatusService.js'\n\nconst state = {\n\tpredefinedStatuses: [],\n}\n\nconst mutations = {\n\n\t/**\n\t * Adds a predefined status to the state\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} status The status to add\n\t */\n\taddPredefinedStatus(state, status) {\n\t\tstate.predefinedStatuses = [...state.predefinedStatuses, status]\n\t},\n}\n\nconst getters = {\n\tstatusesHaveLoaded(state) {\n\t\treturn state.predefinedStatuses.length > 0\n\t},\n}\n\nconst actions = {\n\n\t/**\n\t * Loads all predefined statuses from the server\n\t *\n\t * @param {object} vuex The Vuex components\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state -\n\t */\n\tasync loadAllPredefinedStatuses({ state, commit }) {\n\t\tif (state.predefinedStatuses.length > 0) {\n\t\t\treturn\n\t\t}\n\n\t\tconst statuses = await fetchAllPredefinedStatuses()\n\t\tfor (const status of statuses) {\n\t\t\tcommit('addPredefinedStatus', status)\n\t\t}\n\t},\n\n}\n\nexport default { state, mutations, getters, actions }\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport HttpClient from '@nextcloud/axios'\nimport { generateOcsUrl } from '@nextcloud/router'\n\n/**\n * Fetches the current user-status\n *\n * @return {Promise<object>}\n */\nconst fetchCurrentStatus = async () => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status')\n\tconst response = await HttpClient.get(url)\n\n\treturn response.data.ocs.data\n}\n\n/**\n * Fetches the current user-status\n *\n * @param {string} userId\n * @return {Promise<object>}\n */\nconst fetchBackupStatus = async (userId) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/statuses/{userId}', { userId: '_' + userId })\n\tconst response = await HttpClient.get(url)\n\n\treturn response.data.ocs.data\n}\n\n/**\n * Sets the status\n *\n * @param {string} statusType The status (online / away / dnd / invisible)\n * @return {Promise<void>}\n */\nconst setStatus = async (statusType) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status/status')\n\tawait HttpClient.put(url, {\n\t\tstatusType,\n\t})\n}\n\n/**\n * Sets a message based on our predefined statuses\n *\n * @param {string} messageId The id of the message, taken from predefined status service\n * @param {number | null} clearAt When to automatically clean the status\n * @return {Promise<void>}\n */\nconst setPredefinedMessage = async (messageId, clearAt = null) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status/message/predefined?format=json')\n\tawait HttpClient.put(url, {\n\t\tmessageId,\n\t\tclearAt,\n\t})\n}\n\n/**\n * Sets a custom message\n *\n * @param {string} message The user-defined message\n * @param {string | null} statusIcon The user-defined icon\n * @param {number | null} clearAt When to automatically clean the status\n * @return {Promise<void>}\n */\nconst setCustomMessage = async (message, statusIcon = null, clearAt = null) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status/message/custom?format=json')\n\tawait HttpClient.put(url, {\n\t\tmessage,\n\t\tstatusIcon,\n\t\tclearAt,\n\t})\n}\n\n/**\n * Clears the current status of the user\n *\n * @return {Promise<void>}\n */\nconst clearMessage = async () => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status/message?format=json')\n\tawait HttpClient.delete(url)\n}\n\n/**\n * Revert the automated status\n *\n * @param {string} messageId\n * @return {Promise<object>}\n */\nconst revertToBackupStatus = async (messageId) => {\n\tconst url = generateOcsUrl('apps/user_status/api/v1/user_status/revert/{messageId}', { messageId })\n\tconst response = await HttpClient.delete(url)\n\n\treturn response.data.ocs.data\n}\n\nexport {\n\tfetchCurrentStatus,\n\tfetchBackupStatus,\n\tsetStatus,\n\tsetCustomMessage,\n\tsetPredefinedMessage,\n\tclearMessage,\n\trevertToBackupStatus,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nconst dateFactory = () => {\n\treturn new Date()\n}\n\nexport {\n\tdateFactory,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport {\n\tdateFactory,\n} from './dateService.js'\nimport moment from '@nextcloud/moment'\n\n/**\n * Calculates the actual clearAt timestamp\n *\n * @param {object | null} clearAt The clear-at config\n * @return {number | null}\n */\nconst getTimestampForClearAt = (clearAt) => {\n\tif (clearAt === null) {\n\t\treturn null\n\t}\n\n\tconst date = dateFactory()\n\n\tif (clearAt.type === 'period') {\n\t\tdate.setSeconds(date.getSeconds() + clearAt.time)\n\t\treturn Math.floor(date.getTime() / 1000)\n\t}\n\tif (clearAt.type === 'end-of') {\n\t\tswitch (clearAt.time) {\n\t\tcase 'day':\n\t\tcase 'week':\n\t\t\treturn Number(moment(date).endOf(clearAt.time).format('X'))\n\t\t}\n\t}\n\t// This is not an officially supported type\n\t// but only used internally to show the remaining time\n\t// in the Set Status Modal\n\tif (clearAt.type === '_time') {\n\t\treturn clearAt.time\n\t}\n\n\treturn null\n}\n\nexport {\n\tgetTimestampForClearAt,\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport {\n\tfetchCurrentStatus,\n\tsetStatus,\n\tsetPredefinedMessage,\n\tsetCustomMessage,\n\tclearMessage,\n} from '../services/statusService.js'\nimport { loadState } from '@nextcloud/initial-state'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { getTimestampForClearAt } from '../services/clearAtService.js'\nimport { emit } from '@nextcloud/event-bus'\n\nconst state = {\n\t// Status (online / away / dnd / invisible / offline)\n\tstatus: null,\n\t// Whether the status is user-defined\n\tstatusIsUserDefined: null,\n\t// A custom message set by the user\n\tmessage: null,\n\t// The icon selected by the user\n\ticon: null,\n\t// When to automatically clean the status\n\tclearAt: null,\n\t// Whether the message is predefined\n\t// (and can automatically be translated by Nextcloud)\n\tmessageIsPredefined: null,\n\t// The id of the message in case it's predefined\n\tmessageId: null,\n}\n\nconst mutations = {\n\n\t/**\n\t * Sets a new status\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} data The destructuring object\n\t * @param {string} data.statusType The new status type\n\t */\n\tsetStatus(state, { statusType }) {\n\t\tstate.status = statusType\n\t\tstate.statusIsUserDefined = true\n\t},\n\n\t/**\n\t * Sets a message using a predefined message\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} data The destructuring object\n\t * @param {string} data.messageId The messageId\n\t * @param {number | null} data.clearAt When to automatically clear the status\n\t * @param {string} data.message The message\n\t * @param {string} data.icon The icon\n\t */\n\tsetPredefinedMessage(state, { messageId, clearAt, message, icon }) {\n\t\tstate.messageId = messageId\n\t\tstate.messageIsPredefined = true\n\n\t\tstate.message = message\n\t\tstate.icon = icon\n\t\tstate.clearAt = clearAt\n\t},\n\n\t/**\n\t * Sets a custom message\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} data The destructuring object\n\t * @param {string} data.message The message\n\t * @param {string} data.icon The icon\n\t * @param {number} data.clearAt When to automatically clear the status\n\t */\n\tsetCustomMessage(state, { message, icon, clearAt }) {\n\t\tstate.messageId = null\n\t\tstate.messageIsPredefined = false\n\n\t\tstate.message = message\n\t\tstate.icon = icon\n\t\tstate.clearAt = clearAt\n\t},\n\n\t/**\n\t * Clears the status\n\t *\n\t * @param {object} state The Vuex state\n\t */\n\tclearMessage(state) {\n\t\tstate.messageId = null\n\t\tstate.messageIsPredefined = false\n\n\t\tstate.message = null\n\t\tstate.icon = null\n\t\tstate.clearAt = null\n\t},\n\n\t/**\n\t * Loads the status from initial state\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} data The destructuring object\n\t * @param {string} data.status The status type\n\t * @param {boolean} data.statusIsUserDefined Whether or not this status is user-defined\n\t * @param {string} data.message The message\n\t * @param {string} data.icon The icon\n\t * @param {number} data.clearAt When to automatically clear the status\n\t * @param {boolean} data.messageIsPredefined Whether or not the message is predefined\n\t * @param {string} data.messageId The id of the predefined message\n\t */\n\tloadStatusFromServer(state, { status, statusIsUserDefined, message, icon, clearAt, messageIsPredefined, messageId }) {\n\t\tstate.status = status\n\t\tstate.message = message\n\t\tstate.icon = icon\n\n\t\t// Don't overwrite certain values if the refreshing comes in via short updates\n\t\t// E.g. from talk participant list which only has the status, message and icon\n\t\tif (typeof statusIsUserDefined !== 'undefined') {\n\t\t\tstate.statusIsUserDefined = statusIsUserDefined\n\t\t}\n\t\tif (typeof clearAt !== 'undefined') {\n\t\t\tstate.clearAt = clearAt\n\t\t}\n\t\tif (typeof messageIsPredefined !== 'undefined') {\n\t\t\tstate.messageIsPredefined = messageIsPredefined\n\t\t}\n\t\tif (typeof messageId !== 'undefined') {\n\t\t\tstate.messageId = messageId\n\t\t}\n\t},\n}\n\nconst getters = {}\n\nconst actions = {\n\n\t/**\n\t * Sets a new status\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state The Vuex state object\n\t * @param {object} data The data destructuring object\n\t * @param {string} data.statusType The new status type\n\t * @return {Promise<void>}\n\t */\n\tasync setStatus({ commit, state }, { statusType }) {\n\t\tawait setStatus(statusType)\n\t\tcommit('setStatus', { statusType })\n\t\temit('user_status:status.updated', {\n\t\t\tstatus: state.status,\n\t\t\tmessage: state.message,\n\t\t\ticon: state.icon,\n\t\t\tclearAt: state.clearAt,\n\t\t\tuserId: getCurrentUser()?.uid,\n\t\t})\n\t},\n\n\t/**\n\t * Update status from 'user_status:status.updated' update.\n\t * This doesn't trigger another 'user_status:status.updated'\n\t * event.\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state The Vuex state object\n\t * @param {string} status The new status\n\t * @return {Promise<void>}\n\t */\n\tasync setStatusFromObject({ commit, state }, status) {\n\t\tcommit('loadStatusFromServer', status)\n\t},\n\n\t/**\n\t * Sets a message using a predefined message\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state The Vuex state object\n\t * @param {object} vuex.rootState The Vuex root state\n\t * @param {object} data The data destructuring object\n\t * @param {string} data.messageId The messageId\n\t * @param {object | null} data.clearAt When to automatically clear the status\n\t * @return {Promise<void>}\n\t */\n\tasync setPredefinedMessage({ commit, rootState, state }, { messageId, clearAt }) {\n\t\tconst resolvedClearAt = getTimestampForClearAt(clearAt)\n\n\t\tawait setPredefinedMessage(messageId, resolvedClearAt)\n\t\tconst status = rootState.predefinedStatuses.predefinedStatuses.find((status) => status.id === messageId)\n\t\tconst { message, icon } = status\n\n\t\tcommit('setPredefinedMessage', { messageId, clearAt: resolvedClearAt, message, icon })\n\t\temit('user_status:status.updated', {\n\t\t\tstatus: state.status,\n\t\t\tmessage: state.message,\n\t\t\ticon: state.icon,\n\t\t\tclearAt: state.clearAt,\n\t\t\tuserId: getCurrentUser()?.uid,\n\t\t})\n\t},\n\n\t/**\n\t * Sets a custom message\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state The Vuex state object\n\t * @param {object} data The data destructuring object\n\t * @param {string} data.message The message\n\t * @param {string} data.icon The icon\n\t * @param {object | null} data.clearAt When to automatically clear the status\n\t * @return {Promise<void>}\n\t */\n\tasync setCustomMessage({ commit, state }, { message, icon, clearAt }) {\n\t\tconst resolvedClearAt = getTimestampForClearAt(clearAt)\n\n\t\tawait setCustomMessage(message, icon, resolvedClearAt)\n\t\tcommit('setCustomMessage', { message, icon, clearAt: resolvedClearAt })\n\t\temit('user_status:status.updated', {\n\t\t\tstatus: state.status,\n\t\t\tmessage: state.message,\n\t\t\ticon: state.icon,\n\t\t\tclearAt: state.clearAt,\n\t\t\tuserId: getCurrentUser()?.uid,\n\t\t})\n\t},\n\n\t/**\n\t * Clears the status\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} vuex.state The Vuex state object\n\t * @return {Promise<void>}\n\t */\n\tasync clearMessage({ commit, state }) {\n\t\tawait clearMessage()\n\t\tcommit('clearMessage')\n\t\temit('user_status:status.updated', {\n\t\t\tstatus: state.status,\n\t\t\tmessage: state.message,\n\t\t\ticon: state.icon,\n\t\t\tclearAt: state.clearAt,\n\t\t\tuserId: getCurrentUser()?.uid,\n\t\t})\n\t},\n\n\t/**\n\t * Re-fetches the status from the server\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @return {Promise<void>}\n\t */\n\tasync reFetchStatusFromServer({ commit }) {\n\t\tconst status = await fetchCurrentStatus()\n\t\tcommit('loadStatusFromServer', status)\n\t},\n\n\t/**\n\t * Stores the status we got in the reply of the heartbeat\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @param {object} status The data destructuring object\n\t * @param {string} status.status The status type\n\t * @param {boolean} status.statusIsUserDefined Whether or not this status is user-defined\n\t * @param {string} status.message The message\n\t * @param {string} status.icon The icon\n\t * @param {number} status.clearAt When to automatically clear the status\n\t * @param {boolean} status.messageIsPredefined Whether or not the message is predefined\n\t * @param {string} status.messageId The id of the predefined message\n\t * @return {Promise<void>}\n\t */\n\tasync setStatusFromHeartbeat({ commit }, status) {\n\t\tcommit('loadStatusFromServer', status)\n\t},\n\n\t/**\n\t * Loads the server from the initial state\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t */\n\tloadStatusFromInitialState({ commit }) {\n\t\tconst status = loadState('user_status', 'status')\n\t\tcommit('loadStatusFromServer', status)\n\t},\n}\n\nexport default { state, mutations, getters, actions }\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport {\n\tfetchBackupStatus,\n\trevertToBackupStatus,\n} from '../services/statusService.js'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { emit } from '@nextcloud/event-bus'\n\nconst state = {\n\t// Status (online / away / dnd / invisible / offline)\n\tstatus: null,\n\t// Whether the status is user-defined\n\tstatusIsUserDefined: null,\n\t// A custom message set by the user\n\tmessage: null,\n\t// The icon selected by the user\n\ticon: null,\n\t// When to automatically clean the status\n\tclearAt: null,\n\t// Whether the message is predefined\n\t// (and can automatically be translated by Nextcloud)\n\tmessageIsPredefined: null,\n\t// The id of the message in case it's predefined\n\tmessageId: null,\n}\n\nconst mutations = {\n\t/**\n\t * Loads the status from initial state\n\t *\n\t * @param {object} state The Vuex state\n\t * @param {object} data The destructuring object\n\t * @param {string} data.status The status type\n\t * @param {boolean} data.statusIsUserDefined Whether or not this status is user-defined\n\t * @param {string} data.message The message\n\t * @param {string} data.icon The icon\n\t * @param {number} data.clearAt When to automatically clear the status\n\t * @param {boolean} data.messageIsPredefined Whether or not the message is predefined\n\t * @param {string} data.messageId The id of the predefined message\n\t */\n\tloadBackupStatusFromServer(state, { status, statusIsUserDefined, message, icon, clearAt, messageIsPredefined, messageId }) {\n\t\tstate.status = status\n\t\tstate.message = message\n\t\tstate.icon = icon\n\n\t\t// Don't overwrite certain values if the refreshing comes in via short updates\n\t\t// E.g. from talk participant list which only has the status, message and icon\n\t\tif (typeof statusIsUserDefined !== 'undefined') {\n\t\t\tstate.statusIsUserDefined = statusIsUserDefined\n\t\t}\n\t\tif (typeof clearAt !== 'undefined') {\n\t\t\tstate.clearAt = clearAt\n\t\t}\n\t\tif (typeof messageIsPredefined !== 'undefined') {\n\t\t\tstate.messageIsPredefined = messageIsPredefined\n\t\t}\n\t\tif (typeof messageId !== 'undefined') {\n\t\t\tstate.messageId = messageId\n\t\t}\n\t},\n}\n\nconst getters = {}\n\nconst actions = {\n\t/**\n\t * Re-fetches the status from the server\n\t *\n\t * @param {object} vuex The Vuex destructuring object\n\t * @param {Function} vuex.commit The Vuex commit function\n\t * @return {Promise<void>}\n\t */\n\tasync fetchBackupFromServer({ commit }) {\n\t\ttry {\n\t\t\tconst status = await fetchBackupStatus(getCurrentUser()?.uid)\n\t\t\tcommit('loadBackupStatusFromServer', status)\n\t\t} catch (e) {\n\t\t\t// Ignore missing user backup status\n\t\t}\n\t},\n\n\tasync revertBackupFromServer({ commit }, { messageId }) {\n\t\tconst status = await revertToBackupStatus(messageId)\n\t\tif (status) {\n\t\t\tcommit('loadBackupStatusFromServer', {})\n\t\t\tcommit('loadStatusFromServer', status)\n\t\t\temit('user_status:status.updated', {\n\t\t\t\tstatus: status.status,\n\t\t\t\tmessage: status.message,\n\t\t\t\ticon: status.icon,\n\t\t\t\tclearAt: status.clearAt,\n\t\t\t\tuserId: getCurrentUser()?.uid,\n\t\t\t})\n\t\t}\n\t},\n}\n\nexport default { state, mutations, getters, actions }\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport Vue from 'vue'\nimport Vuex, { Store } from 'vuex'\nimport predefinedStatuses from './predefinedStatuses.js'\nimport userStatus from './userStatus.js'\nimport userBackupStatus from './userBackupStatus.js'\n\nVue.use(Vuex)\n\nexport default new Store({\n\tmodules: {\n\t\tpredefinedStatuses,\n\t\tuserStatus,\n\t\tuserBackupStatus,\n\t},\n\tstrict: true,\n})\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport Vue from 'vue'\nimport { subscribe } from '@nextcloud/event-bus'\n\nimport UserStatus from './UserStatus.vue'\n\nimport store from './store/index.js'\n\nVue.prototype.t = t\nVue.prototype.$t = t\n\nconst mountPoint = document.getElementById('user_status-menu-entry')\n\nconst mountMenuEntry = () => {\n\tconst mountPoint = document.getElementById('user_status-menu-entry')\n\t// eslint-disable-next-line no-new\n\tnew Vue({\n\t\tel: mountPoint,\n\t\trender: h => h(UserStatus),\n\t\tstore,\n\t})\n}\n\nif (mountPoint) {\n\tmountMenuEntry()\n} else {\n\tsubscribe('core:user-menu:mounted', mountMenuEntry)\n}\n\n// Register dashboard status\ndocument.addEventListener('DOMContentLoaded', function() {\n\tif (!OCA.Dashboard) {\n\t\treturn\n\t}\n\n\tOCA.Dashboard.registerStatus('status', (el) => {\n\t\tconst Dashboard = Vue.extend(UserStatus)\n\t\treturn new Dashboard({\n\t\t\tpropsData: {\n\t\t\t\tinline: true,\n\t\t\t},\n\t\t\tstore,\n\t\t}).$mount(el)\n\t})\n})\n"],"file":"user_status-menu.mjs"}