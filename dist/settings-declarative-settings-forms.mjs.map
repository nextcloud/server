{"version":3,"file":"settings-declarative-settings-forms.mjs","sources":["../apps/settings/src/components/DeclarativeSettings/DeclarativeSection.vue","../apps/settings/src/main-declarative-settings-forms.ts"],"sourcesContent":["<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcSettingsSection\n\t\tclass=\"declarative-settings-section\"\n\t\t:name=\"t(formApp, form.title)\"\n\t\t:description=\"t(formApp, form.description)\"\n\t\t:doc-url=\"form.doc_url || ''\">\n\t\t<div v-for=\"formField in formFields\"\n\t\t\t :key=\"formField.id\"\n\t\t\t class=\"declarative-form-field\"\n\t\t\t:aria-label=\"t('settings', '{app}\\'s declarative setting field: {name}', { app: formApp, name: t(formApp, formField.title) })\"\n\t\t\t:class=\"{\n\t\t\t\t'declarative-form-field-text': isTextFormField(formField),\n\t\t\t\t'declarative-form-field-select': formField.type === 'select',\n\t\t\t\t'declarative-form-field-multi-select': formField.type === 'multi-select',\n\t\t\t\t'declarative-form-field-checkbox': formField.type === 'checkbox',\n\t\t\t\t'declarative-form-field-multi_checkbox': formField.type === 'multi-checkbox',\n\t\t\t\t'declarative-form-field-radio': formField.type === 'radio'\n\t\t\t}\">\n\n\t\t\t<template v-if=\"isTextFormField(formField)\">\n\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t<NcInputField\n\t\t\t\t\t\t:type=\"formField.type\"\n\t\t\t\t\t\t:label=\"t(formApp, formField.title)\"\n\t\t\t\t\t\t:value.sync=\"formFieldsData[formField.id].value\"\n\t\t\t\t\t\t:placeholder=\"t(formApp, formField.placeholder)\"\n\t\t\t\t\t\t@update:value=\"onChangeDebounced(formField)\"\n\t\t\t\t\t\t@submit=\"updateDeclarativeSettingsValue(formField)\"/>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\n\t\t\t<template v-if=\"formField.type === 'select'\">\n\t\t\t\t<label :for=\"formField.id + '_field'\">{{ t(formApp, formField.title) }}</label>\n\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t<NcSelect\n\t\t\t\t\t\t:id=\"formField.id + '_field'\"\n\t\t\t\t\t\t:options=\"formField.options\"\n\t\t\t\t\t\t:placeholder=\"t(formApp, formField.placeholder)\"\n\t\t\t\t\t\t:label-outside=\"true\"\n\t\t\t\t\t\t:value=\"formFieldsData[formField.id].value\"\n\t\t\t\t\t\t@input=\"(value) => updateFormFieldDataValue(value, formField, true)\"/>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\n\t\t\t<template v-if=\"formField.type === 'multi-select'\">\n\t\t\t\t<label :for=\"formField.id + '_field'\">{{ t(formApp, formField.title) }}</label>\n\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t<NcSelect\n\t\t\t\t\t\t:id=\"formField.id + '_field'\"\n\t\t\t\t\t\t:options=\"formField.options\"\n\t\t\t\t\t\t:placeholder=\"t(formApp, formField.placeholder)\"\n\t\t\t\t\t\t:multiple=\"true\"\n\t\t\t\t\t\t:label-outside=\"true\"\n\t\t\t\t\t\t:value=\"formFieldsData[formField.id].value\"\n\t\t\t\t\t\t@input=\"(value) => {\n\t\t\t\t\t\t\tformFieldsData[formField.id].value = value\n\t\t\t\t\t\t\tupdateDeclarativeSettingsValue(formField, JSON.stringify(formFieldsData[formField.id].value))\n\t\t\t\t\t\t}\n\t\t\t\t\"/>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\n\t\t\t<template v-if=\"formField.type === 'checkbox'\">\n\t\t\t\t<label :for=\"formField.id + '_field'\">{{ t(formApp, formField.title) }}</label>\n\t\t\t\t<NcCheckboxRadioSwitch\n\t\t\t\t\t:id=\"formField.id + '_field'\"\n\t\t\t\t\t:checked=\"Boolean(formFieldsData[formField.id].value)\"\n\t\t\t\t\t@update:checked=\"(value) => {\n\t\t\t\t\t\tformField.value = value\n\t\t\t\t\t\tupdateFormFieldDataValue(+value, formField, true)\n\t\t\t\t\t}\n\t\t\t\t\">\n\t\t\t\t\t{{ t(formApp, formField.label) }}\n\t\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\n\t\t\t<template v-if=\"formField.type === 'multi-checkbox'\">\n\t\t\t\t<label :for=\"formField.id + '_field'\">{{ t(formApp, formField.title) }}</label>\n\t\t\t\t<NcCheckboxRadioSwitch\n\t\t\t\t\tv-for=\"option in formField.options\"\n\t\t\t\t\t:id=\"formField.id + '_field_' + option.value\"\n\t\t\t\t\t:key=\"option.value\"\n\t\t\t\t\t:checked=\"formFieldsData[formField.id].value[option.value]\"\n\t\t\t\t\t@update:checked=\"(value) => {\n\t\t\t\t\t\tformFieldsData[formField.id].value[option.value] = value\n\t\t\t\t\t\t// Update without re-generating initial formFieldsData.value object as the link to components are lost\n\t\t\t\t\t\tupdateDeclarativeSettingsValue(formField, JSON.stringify(formFieldsData[formField.id].value))\n\t\t\t\t\t}\n\t\t\t\t\">\n\t\t\t\t\t{{ t(formApp, option.name) }}\n\t\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\n\t\t\t<template v-if=\"formField.type === 'radio'\">\n\t\t\t\t<label :for=\"formField.id + '_field'\">{{ t(formApp, formField.title) }}</label>\n\t\t\t\t<NcCheckboxRadioSwitch\n\t\t\t\t\tv-for=\"option in formField.options\"\n\t\t\t\t\t:key=\"option.value\"\n\t\t\t\t\t:value=\"option.value\"\n\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t:checked=\"formFieldsData[formField.id].value\"\n\t\t\t\t\t@update:checked=\"(value) => updateFormFieldDataValue(value, formField, true)\">\n\t\t\t\t\t{{ t(formApp, option.name) }}\n\t\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t\t<span class=\"hint\">{{ t(formApp, formField.description) }}</span>\n\t\t\t</template>\n\t\t</div>\n\t</NcSettingsSection>\n</template>\n\n<script>\nimport axios from '@nextcloud/axios'\nimport { generateOcsUrl } from '@nextcloud/router'\nimport { showError } from '@nextcloud/dialogs'\nimport debounce from 'debounce'\nimport NcSettingsSection from '@nextcloud/vue/dist/Components/NcSettingsSection.js'\nimport NcInputField from '@nextcloud/vue/dist/Components/NcInputField.js'\nimport NcSelect from '@nextcloud/vue/dist/Components/NcSelect.js'\nimport NcCheckboxRadioSwitch from '@nextcloud/vue/dist/Components/NcCheckboxRadioSwitch.js'\n\nexport default {\n\tname: 'DeclarativeSection',\n\tcomponents: {\n\t\tNcSettingsSection,\n\t\tNcInputField,\n\t\tNcSelect,\n\t\tNcCheckboxRadioSwitch,\n\t},\n\tprops: {\n\t\tform: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tformFieldsData: {},\n\t\t}\n\t},\n\tbeforeMount() {\n\t\tthis.initFormFieldsData()\n\t},\n\tcomputed: {\n\t\tformApp() {\n\t\t\treturn this.form.app || ''\n\t\t},\n\t\tformFields() {\n\t\t\treturn this.form.fields || []\n\t\t},\n\t},\n\tmethods: {\n\t\tinitFormFieldsData() {\n\t\t\tthis.form.fields.forEach((formField) => {\n\t\t\t\tif (formField.type === 'checkbox') {\n\t\t\t\t\t// convert bool to number using unary plus (+) operator\n\t\t\t\t\tthis.$set(formField, 'value', +formField.value)\n\t\t\t\t}\n\t\t\t\tif (formField.type === 'multi-checkbox') {\n\t\t\t\t\tif (formField.value === '') {\n\t\t\t\t\t\t// Init formFieldsData from options\n\t\t\t\t\t\tthis.$set(formField, 'value', {})\n\t\t\t\t\t\tformField.options.forEach(option => {\n\t\t\t\t\t\t\tthis.$set(formField.value, option.value, false)\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$set(formField, 'value', JSON.parse(formField.value))\n\t\t\t\t\t\t// Merge possible new options\n\t\t\t\t\t\tformField.options.forEach(option => {\n\t\t\t\t\t\t\tif (!formField.value.hasOwnProperty(option.value)) {\n\t\t\t\t\t\t\t\tthis.$set(formField.value, option.value, false)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t// Remove options that are not in the form anymore\n\t\t\t\t\t\tObject.keys(formField.value).forEach(key => {\n\t\t\t\t\t\t\tif (!formField.options.find(option => option.value === key)) {\n\t\t\t\t\t\t\t\tdelete formField.value[key]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (formField.type === 'multi-select') {\n\t\t\t\t\tif (formField.value === '') {\n\t\t\t\t\t\t// Init empty array for multi-select\n\t\t\t\t\t\tthis.$set(formField, 'value', [])\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// JSON decode an array of multiple values set\n\t\t\t\t\t\tthis.$set(formField, 'value', JSON.parse(formField.value))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$set(this.formFieldsData, formField.id, {\n\t\t\t\t\tvalue: formField.value,\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\n\t\tupdateFormFieldDataValue(value, formField, update = false) {\n\t\t\tthis.formFieldsData[formField.id].value = value\n\t\t\tif (update) {\n\t\t\t\tthis.updateDeclarativeSettingsValue(formField)\n\t\t\t}\n\t\t},\n\n\t\tupdateDeclarativeSettingsValue(formField, value = null) {\n\t\t\ttry {\n\t\t\t\treturn axios.post(generateOcsUrl('settings/api/declarative/value'), {\n\t\t\t\t\tapp: this.formApp,\n\t\t\t\t\tformId: this.form.id.replace(this.formApp + '_', ''), // Remove app prefix to send clean form id\n\t\t\t\t\tfieldId: formField.id,\n\t\t\t\t\tvalue: value === null ? this.formFieldsData[formField.id].value : value,\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.debug(err)\n\t\t\t\tshowError(t('settings', 'Failed to save setting'))\n\t\t\t}\n\t\t},\n\n\t\tonChangeDebounced: debounce(function(formField) {\n\t\t\tthis.updateDeclarativeSettingsValue(formField)\n\t\t}, 1000),\n\n\t\tisTextFormField(formField) {\n\t\t\treturn ['text', 'password', 'email', 'tel', 'url', 'number'].includes(formField.type)\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.declarative-form-field {\n\tmargin: 20px 0;\n\tpadding: 10px 0;\n\n\t.input-wrapper {\n\t\twidth: 100%;\n\t\tmax-width: 400px;\n\t}\n\n\t&:last-child {\n\t\tborder-bottom: none;\n\t}\n\n\t.hint {\n\t\tdisplay: inline-block;\n\t\tcolor: var(--color-text-maxcontrast);\n\t\tmargin-left: 8px;\n\t\tpadding-top: 5px;\n\t}\n\n\t&-radio, &-multi_checkbox {\n\t\tmax-height: 250px;\n\t\toverflow-y: auto;\n\t}\n\n\t&-multi-select, &-select {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\tlabel {\n\t\t\tmargin-bottom: 5px;\n\t\t}\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport Vue from 'vue';\nimport { loadState } from '@nextcloud/initial-state';\nimport { translate as t, translatePlural as n } from '@nextcloud/l10n';\nimport DeclarativeSection from './components/DeclarativeSettings/DeclarativeSection.vue';\n\ninterface DeclarativeFormField {\n\tid: string,\n\ttitle: string,\n\tdescription: string,\n\ttype: string,\n\tplaceholder: string,\n\tlabel: string,\n\toptions: Array<any>|null,\n\tvalue: any,\n\tdefault: any,\n}\n\ninterface DeclarativeForm {\n\tid: number,\n\tpriority: number,\n\tsection_type: string,\n\tsection_id: string,\n\tstorage_type: string,\n\ttitle: string,\n\tdescription: string,\n\tdoc_url: string,\n\tapp: string,\n\tfields: Array<DeclarativeFormField>,\n}\n\nconst forms = loadState('settings', 'declarative-settings-forms', []) as Array<DeclarativeForm>;\nconsole.debug('Loaded declarative forms:', forms);\n\nfunction renderDeclarativeSettingsSections(forms: Array<DeclarativeForm>): void {\n\tVue.mixin({ methods: { t, n } })\n\tconst DeclarativeSettingsSection = Vue.extend(<any>DeclarativeSection);\n\tfor (const form of forms) {\n\t\tconst el = `#${form.app}_${form.id}`\n\t\tnew DeclarativeSettingsSection({\n\t\t\tel: el,\n\t\t\tpropsData: {\n\t\t\t\tform,\n\t\t\t},\n\t\t})\n\t}\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\trenderDeclarativeSettingsSections(forms);\n});\n"],"names":["_sfc_main","NcSettingsSection","NcInputField","NcSelect","NcCheckboxRadioSwitch","formField","option","key","value","update","axios","generateOcsUrl","err","showError","debounce","forms","loadState","renderDeclarativeSettingsSections","Vue","t","n","DeclarativeSettingsSection","DeclarativeSection","form","el"],"mappings":";6TAiIA,MAAAA,EAAA,CACA,KAAA,qBACA,WAAA,CACA,kBAAAC,EACA,aAAAC,EACA,SAAAC,EACA,sBAAAC,CACA,EACA,MAAA,CACA,KAAA,CACA,KAAA,OACA,SAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CACA,eAAA,CAAA,CACA,CACA,EACA,aAAA,CACA,KAAA,mBAAA,CACA,EACA,SAAA,CACA,SAAA,CACA,OAAA,KAAA,KAAA,KAAA,EACA,EACA,YAAA,CACA,OAAA,KAAA,KAAA,QAAA,CAAA,CACA,CACA,EACA,QAAA,CACA,oBAAA,CACA,KAAA,KAAA,OAAA,QAAAC,GAAA,CACAA,EAAA,OAAA,YAEA,KAAA,KAAAA,EAAA,QAAA,CAAAA,EAAA,KAAA,EAEAA,EAAA,OAAA,mBACAA,EAAA,QAAA,IAEA,KAAA,KAAAA,EAAA,QAAA,CAAA,CAAA,EACAA,EAAA,QAAA,QAAAC,GAAA,CACA,KAAA,KAAAD,EAAA,MAAAC,EAAA,MAAA,EAAA,CACA,CAAA,IAEA,KAAA,KAAAD,EAAA,QAAA,KAAA,MAAAA,EAAA,KAAA,CAAA,EAEAA,EAAA,QAAA,QAAAC,GAAA,CACAD,EAAA,MAAA,eAAAC,EAAA,KAAA,GACA,KAAA,KAAAD,EAAA,MAAAC,EAAA,MAAA,EAAA,CAEA,CAAA,EAEA,OAAA,KAAAD,EAAA,KAAA,EAAA,QAAAE,GAAA,CACAF,EAAA,QAAA,KAAAC,GAAAA,EAAA,QAAAC,CAAA,GACA,OAAAF,EAAA,MAAAE,CAAA,CAEA,CAAA,IAGAF,EAAA,OAAA,iBACAA,EAAA,QAAA,GAEA,KAAA,KAAAA,EAAA,QAAA,CAAA,CAAA,EAGA,KAAA,KAAAA,EAAA,QAAA,KAAA,MAAAA,EAAA,KAAA,CAAA,GAGA,KAAA,KAAA,KAAA,eAAAA,EAAA,GAAA,CACA,MAAAA,EAAA,KACA,CAAA,CACA,CAAA,CACA,EAEA,yBAAAG,EAAAH,EAAAI,EAAA,GAAA,CACA,KAAA,eAAAJ,EAAA,EAAA,EAAA,MAAAG,EACAC,GACA,KAAA,+BAAAJ,CAAA,CAEA,EAEA,+BAAAA,EAAAG,EAAA,KAAA,CACA,GAAA,CACA,OAAAE,EAAA,KAAAC,EAAA,gCAAA,EAAA,CACA,IAAA,KAAA,QACA,OAAA,KAAA,KAAA,GAAA,QAAA,KAAA,QAAA,IAAA,EAAA,EACA,QAAAN,EAAA,GACA,MAAAG,IAAA,KAAA,KAAA,eAAAH,EAAA,EAAA,EAAA,MAAAG,CACA,CAAA,CACA,OAAAI,EAAA,CACA,QAAA,MAAAA,CAAA,EACAC,EAAA,EAAA,WAAA,wBAAA,CAAA,CACA,CACA,EAEA,kBAAAC,EAAA,SAAAT,EAAA,CACA,KAAA,+BAAAA,CAAA,CACA,EAAA,GAAA,EAEA,gBAAAA,EAAA,CACA,MAAA,CAAA,OAAA,WAAA,QAAA,MAAA,MAAA,QAAA,EAAA,SAAAA,EAAA,IAAA,CACA,CACA,CACA,+iHCvMMU,EAAQC,EAAU,WAAY,6BAA8B,CAAE,CAAA,EACpE,QAAQ,MAAM,4BAA6BD,CAAK,EAEhD,SAASE,EAAkCF,EAAqC,CAC/EG,EAAI,MAAM,CAAE,QAAS,CAAEC,EAAAA,EAAGC,EAAAA,GAAK,EACzB,MAAAC,EAA6BH,EAAI,OAAYI,CAAkB,EACrE,UAAWC,KAAQR,EAAO,CACzB,MAAMS,EAAK,IAAI,OAAKD,EAAA,IAAG,KAAI,OAAKA,EAAA,EAAA,EAChC,IAAIF,EAA2B,CAC9B,GAAAG,EACA,UAAW,CACV,KAAAD,CACD,CAAA,CACA,CACF,CACD,CAEA,SAAS,iBAAiB,mBAAoB,IAAM,CACnDN,EAAkCF,CAAK,CACxC,CAAC"}