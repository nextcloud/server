{"version":3,"file":"core-files_fileinfo.js?v=14befd60705ee080edbf","mappingssources":["webpack:///nextcloud/core/src/files/fileinfo.js"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2016-2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-FileCopyrightText: 2016 ownCloud, Inc.\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable */\n(function (OC) {\n  /**\n   * @class OC.Files.FileInfo\n   * @classdesc File information\n   *\n   * @param {Object} data file data, see attributes for details\n   *\n   * @since 8.2\n   */\n  const FileInfo = function (data) {\n    const self = this;\n    _.each(data, function (value, key) {\n      if (!_.isFunction(value)) {\n        self[key] = value;\n      }\n    });\n    if (!_.isUndefined(this.id)) {\n      this.id = parseInt(data.id, 10);\n    }\n\n    // TODO: normalize path\n    this.path = data.path || '';\n    if (this.type === 'dir') {\n      this.mimetype = 'httpd/unix-directory';\n    } else {\n      this.mimetype = this.mimetype || 'application/octet-stream';\n    }\n    if (!this.type) {\n      if (this.mimetype === 'httpd/unix-directory') {\n        this.type = 'dir';\n      } else {\n        this.type = 'file';\n      }\n    }\n  };\n\n  /**\n   * @memberof OC.Files\n   */\n  FileInfo.prototype = {\n    /**\n     * File id\n     *\n     * @type int\n     */\n    id: null,\n    /**\n     * File name\n     *\n     * @type String\n     */\n    name: null,\n    /**\n     * Path leading to the file, without the file name,\n     * and with a leading slash.\n     *\n     * @type String\n     */\n    path: null,\n    /**\n     * Mime type\n     *\n     * @type String\n     */\n    mimetype: null,\n    /**\n     * Icon URL.\n     *\n     * Can be used to override the mime type icon.\n     *\n     * @type String\n     */\n    icon: null,\n    /**\n     * File type. 'file'  for files, 'dir' for directories.\n     *\n     * @type String\n     * @deprecated rely on mimetype instead\n     */\n    type: null,\n    /**\n     * Permissions.\n     *\n     * @see OC#PERMISSION_ALL for permissions\n     * @type int\n     */\n    permissions: null,\n    /**\n     * Modification time\n     *\n     * @type int\n     */\n    mtime: null,\n    /**\n     * Etag\n     *\n     * @type String\n     */\n    etag: null,\n    /**\n     * Mount type.\n     *\n     * One of null, \"external-root\", \"shared\" or \"shared-root\"\n     *\n     * @type string\n     */\n    mountType: null,\n    /**\n     * @type boolean\n     */\n    hasPreview: true,\n    /**\n     * @type int\n     */\n    sharePermissions: null,\n    /**\n     * @type Array\n     */\n    shareAttributes: [],\n    quotaAvailableBytes: -1,\n    canDownload: function () {\n      for (const i in this.shareAttributes) {\n        const attr = this.shareAttributes[i];\n        if (attr.scope === 'permissions' && attr.key === 'download') {\n          return attr.value === true;\n        }\n      }\n      return true;\n    }\n  };\n  if (!OC.Files) {\n    OC.Files = {};\n  }\n  OC.Files.FileInfo = FileInfo;\n})(OC);"],"names":[],"sourceRoot":""}