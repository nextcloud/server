{"version":3,"file":"comments-comments-app.mjs","sources":["../apps/comments/src/utils/cancelableRequest.js","../apps/comments/src/services/ReadComments.ts","../apps/comments/src/views/Comments.vue","../apps/comments/src/services/CommentsInstance.js","../apps/comments/src/comments-app.js"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/**\n * Creates a cancelable axios 'request object'.\n *\n * @param {Function} request the axios promise request\n * @return {object}\n */\nconst cancelableRequest = function(request) {\n\tconst controller = new AbortController()\n\tconst signal = controller.signal\n\n\t/**\n\t * Execute the request\n\t *\n\t * @param {string} url the url to send the request to\n\t * @param {object} [options] optional config for the request\n\t */\n\tconst fetch = async function(url, options) {\n\t\tconst response = await request(\n\t\t\turl,\n\t\t\tObject.assign({ signal }, options)\n\t\t)\n\t\treturn response\n\t}\n\n\treturn {\n\t\trequest: fetch,\n\t\tabort: () => controller.abort(),\n\t}\n}\n\nexport default cancelableRequest\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport client from './DavClient.js'\n\nimport type { Response } from 'webdav'\n\n/**\n * Mark comments older than the date timestamp as read\n *\n * @param resourceType the resource type\n * @param resourceId the resource ID\n * @param date the date object\n */\nexport const markCommentsAsRead = (\n\tresourceType: string,\n\tresourceId: number,\n\tdate: Date,\n): Promise<Response> => {\n\tconst resourcePath = ['', resourceType, resourceId].join('/')\n\tconst readMarker = date.toUTCString()\n\n\treturn client.customRequest(resourcePath, {\n\t\tmethod: 'PROPPATCH',\n\t\tdata: `<?xml version=\"1.0\"?>\n\t\t\t<d:propertyupdate\n\t\t\t\txmlns:d=\"DAV:\"\n\t\t\t\txmlns:oc=\"http://owncloud.org/ns\">\n\t\t\t<d:set>\n\t\t\t\t<d:prop>\n\t\t\t\t\t<oc:readMarker>${readMarker}</oc:readMarker>\n\t\t\t\t</d:prop>\n\t\t\t</d:set>\n\t\t\t</d:propertyupdate>`,\n\t})\n}\n","<!--\n  - SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<div v-element-visibility=\"onVisibilityChange\"\n\t\tclass=\"comments\"\n\t\t:class=\"{ 'icon-loading': isFirstLoading }\">\n\t\t<!-- Editor -->\n\t\t<Comment v-bind=\"editorData\"\n\t\t\t:auto-complete=\"autoComplete\"\n\t\t\t:resource-type=\"resourceType\"\n\t\t\t:editor=\"true\"\n\t\t\t:user-data=\"userData\"\n\t\t\t:resource-id=\"currentResourceId\"\n\t\t\tclass=\"comments__writer\"\n\t\t\t@new=\"onNewComment\" />\n\n\t\t<template v-if=\"!isFirstLoading\">\n\t\t\t<NcEmptyContent v-if=\"!hasComments && done\"\n\t\t\t\tclass=\"comments__empty\"\n\t\t\t\t:name=\"t('comments', 'No comments yet, start the conversation!')\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<MessageReplyTextIcon />\n\t\t\t\t</template>\n\t\t\t</NcEmptyContent>\n\t\t\t<ul v-else>\n\t\t\t\t<!-- Comments -->\n\t\t\t\t<Comment v-for=\"comment in comments\"\n\t\t\t\t\t:key=\"comment.props.id\"\n\t\t\t\t\ttag=\"li\"\n\t\t\t\t\tv-bind=\"comment.props\"\n\t\t\t\t\t:auto-complete=\"autoComplete\"\n\t\t\t\t\t:resource-type=\"resourceType\"\n\t\t\t\t\t:message.sync=\"comment.props.message\"\n\t\t\t\t\t:resource-id=\"currentResourceId\"\n\t\t\t\t\t:user-data=\"genMentionsData(comment.props.mentions)\"\n\t\t\t\t\tclass=\"comments__list\"\n\t\t\t\t\t@delete=\"onDelete\" />\n\t\t\t</ul>\n\n\t\t\t<!-- Loading more message -->\n\t\t\t<div v-if=\"loading && !isFirstLoading\" class=\"comments__info icon-loading\" />\n\n\t\t\t<div v-else-if=\"hasComments && done\" class=\"comments__info\">\n\t\t\t\t{{ t('comments', 'No more messages') }}\n\t\t\t</div>\n\n\t\t\t<!-- Error message -->\n\t\t\t<template v-else-if=\"error\">\n\t\t\t\t<NcEmptyContent class=\"comments__error\" :name=\"error\">\n\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t<AlertCircleOutlineIcon />\n\t\t\t\t\t</template>\n\t\t\t\t</NcEmptyContent>\n\t\t\t\t<NcButton class=\"comments__retry\" @click=\"getComments\">\n\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t<RefreshIcon />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ t('comments', 'Retry') }}\n\t\t\t\t</NcButton>\n\t\t\t</template>\n\t\t</template>\n\t</div>\n</template>\n\n<script>\nimport { showError } from '@nextcloud/dialogs'\nimport { translate as t } from '@nextcloud/l10n'\nimport { vElementVisibility as elementVisibility } from '@vueuse/components'\n\nimport NcEmptyContent from '@nextcloud/vue/dist/Components/NcEmptyContent.js'\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\nimport RefreshIcon from 'vue-material-design-icons/Refresh.vue'\nimport MessageReplyTextIcon from 'vue-material-design-icons/MessageReplyText.vue'\nimport AlertCircleOutlineIcon from 'vue-material-design-icons/AlertCircleOutline.vue'\n\nimport Comment from '../components/Comment.vue'\nimport CommentView from '../mixins/CommentView'\nimport cancelableRequest from '../utils/cancelableRequest.js'\nimport { getComments, DEFAULT_LIMIT } from '../services/GetComments.ts'\nimport { markCommentsAsRead } from '../services/ReadComments.ts'\n\nexport default {\n\tname: 'Comments',\n\n\tcomponents: {\n\t\tComment,\n\t\tNcEmptyContent,\n\t\tNcButton,\n\t\tRefreshIcon,\n\t\tMessageReplyTextIcon,\n\t\tAlertCircleOutlineIcon,\n\t},\n\n\tdirectives: {\n\t\telementVisibility,\n\t},\n\n\tmixins: [CommentView],\n\n\tdata() {\n\t\treturn {\n\t\t\terror: '',\n\t\t\tloading: false,\n\t\t\tdone: false,\n\n\t\t\tcurrentResourceId: this.resourceId,\n\t\t\toffset: 0,\n\t\t\tcomments: [],\n\n\t\t\tcancelRequest: () => {},\n\n\t\t\tComment,\n\t\t\tuserData: {},\n\t\t}\n\t},\n\n\tcomputed: {\n\t\thasComments() {\n\t\t\treturn this.comments.length > 0\n\t\t},\n\t\tisFirstLoading() {\n\t\t\treturn this.loading && this.offset === 0\n\t\t},\n\t},\n\n\twatch: {\n\t\tresourceId() {\n\t\t\tthis.currentResourceId = this.resourceId\n\t\t},\n\t},\n\n\tmethods: {\n\t\tt,\n\n\t\tasync onVisibilityChange(isVisible) {\n\t\t\tif (isVisible) {\n\t\t\t\ttry {\n\t\t\t\t\tawait markCommentsAsRead(this.resourceType, this.currentResourceId, new Date())\n\t\t\t\t} catch (e) {\n\t\t\t\t\tshowError(e.message || t('comments', 'Failed to mark comments as read'))\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Update current resourceId and fetch new data\n\t\t *\n\t\t * @param {number} resourceId the current resourceId (fileId...)\n\t\t */\n\t\tasync update(resourceId) {\n\t\t\tthis.currentResourceId = resourceId\n\t\t\tthis.resetState()\n\t\t\tthis.getComments()\n\t\t},\n\n\t\t/**\n\t\t * Ran when the bottom of the tab is reached\n\t\t */\n\t\tonScrollBottomReached() {\n\t\t\t/**\n\t\t\t * Do not fetch more if we:\n\t\t\t * - are showing an error\n\t\t\t * - already fetched everything\n\t\t\t * - are currently loading\n\t\t\t */\n\t\t\tif (this.error || this.done || this.loading) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.getComments()\n\t\t},\n\n\t\t/**\n\t\t * Get the existing shares infos\n\t\t */\n\t\tasync getComments() {\n\t\t\t// Cancel any ongoing request\n\t\t\tthis.cancelRequest('cancel')\n\n\t\t\ttry {\n\t\t\t\tthis.loading = true\n\t\t\t\tthis.error = ''\n\n\t\t\t\t// Init cancellable request\n\t\t\t\tconst { request, abort } = cancelableRequest(getComments)\n\t\t\t\tthis.cancelRequest = abort\n\n\t\t\t\t// Fetch comments\n\t\t\t\tconst { data: comments } = await request({\n\t\t\t\t\tresourceType: this.resourceType,\n\t\t\t\t\tresourceId: this.currentResourceId,\n\t\t\t\t}, { offset: this.offset }) || { data: [] }\n\n\t\t\t\tthis.logger.debug(`Processed ${comments.length} comments`, { comments })\n\n\t\t\t\t// We received less than the requested amount,\n\t\t\t\t// we're done fetching comments\n\t\t\t\tif (comments.length < DEFAULT_LIMIT) {\n\t\t\t\t\tthis.done = true\n\t\t\t\t}\n\n\t\t\t\t// Insert results\n\t\t\t\tthis.comments.push(...comments)\n\n\t\t\t\t// Increase offset for next fetch\n\t\t\t\tthis.offset += DEFAULT_LIMIT\n\t\t\t} catch (error) {\n\t\t\t\tif (error.message === 'cancel') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis.error = t('comments', 'Unable to load the comments list')\n\t\t\t\tconsole.error('Error loading the comments list', error)\n\t\t\t} finally {\n\t\t\t\tthis.loading = false\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add newly created comment to the list\n\t\t *\n\t\t * @param {object} comment the new comment\n\t\t */\n\t\tonNewComment(comment) {\n\t\t\tthis.comments.unshift(comment)\n\t\t},\n\n\t\t/**\n\t\t * Remove deleted comment from the list\n\t\t *\n\t\t * @param {number} id the deleted comment\n\t\t */\n\t\tonDelete(id) {\n\t\t\tconst index = this.comments.findIndex(comment => comment.props.id === id)\n\t\t\tif (index > -1) {\n\t\t\t\tthis.comments.splice(index, 1)\n\t\t\t} else {\n\t\t\t\tconsole.error('Could not find the deleted comment in the list', id)\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Reset the current view to its default state\n\t\t */\n\t\tresetState() {\n\t\t\tthis.error = ''\n\t\t\tthis.loading = false\n\t\t\tthis.done = false\n\t\t\tthis.offset = 0\n\t\t\tthis.comments = []\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.comments {\n\tmin-height: 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n\n\t&__empty,\n\t&__error {\n\t\tflex: 1 0;\n\t}\n\n\t&__retry {\n\t\tmargin: 0 auto;\n\t}\n\n\t&__info {\n\t\theight: 60px;\n\t\tcolor: var(--color-text-maxcontrast);\n\t\ttext-align: center;\n\t\tline-height: 60px;\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { translate as t, translatePlural as n } from '@nextcloud/l10n'\nimport Vue from 'vue'\nimport CommentsApp from '../views/Comments.vue'\nimport logger from '../logger.js'\n\n// Add translates functions\nVue.mixin({\n\tdata() {\n\t\treturn {\n\t\t\tlogger,\n\t\t}\n\t},\n\tmethods: {\n\t\tt,\n\t\tn,\n\t},\n})\n\nexport default class CommentInstance {\n\n\t/**\n\t * Initialize a new Comments instance for the desired type\n\t *\n\t * @param {string} resourceType the comments endpoint type\n\t * @param  {object} options the vue options (propsData, parent, el...)\n\t */\n\tconstructor(resourceType = 'files', options = {}) {\n\t\t// Merge options and set `resourceType` property\n\t\toptions = {\n\t\t\t...options,\n\t\t\tpropsData: {\n\t\t\t\t...(options.propsData ?? {}),\n\t\t\t\tresourceType,\n\t\t\t},\n\t\t}\n\t\t// Init Comments component\n\t\tconst View = Vue.extend(CommentsApp)\n\t\treturn new View(options)\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport CommentsInstance from './services/CommentsInstance.js'\n\n// Init Comments\nif (window.OCA && !window.OCA.Comments) {\n\tObject.assign(window.OCA, { Comments: {} })\n}\n\n// Init Comments App view\nObject.assign(window.OCA.Comments, { View: CommentsInstance })\nconsole.debug('OCA.Comments.View initialized')\n"],"names":["cancelableRequest","request","controller","signal","url","options","markCommentsAsRead","resourceType","resourceId","date","resourcePath","readMarker","client","_sfc_main","Comment","NcEmptyContent","NcButton","RefreshIcon","MessageReplyTextIcon","AlertCircleOutlineIcon","elementVisibility","CommentView","t","isVisible","e","showError","abort","getComments","comments","DEFAULT_LIMIT","error","comment","id","index","Vue","logger","n","CommentInstance","View","CommentsApp","CommentsInstance"],"mappings":"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"}