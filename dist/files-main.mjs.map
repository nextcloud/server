{"version":3,"file":"files-main.mjs","sources":["../apps/files/src/router/router.ts","../apps/files/src/services/RouterService.ts","../apps/files/src/models/Setting.js","../apps/files/src/services/Settings.js","../apps/files/src/store/viewConfig.ts","../node_modules/throttle-debounce/esm/index.js","../apps/files/src/components/NavigationQuota.vue","../apps/files/src/components/Setting.vue","../apps/files/src/views/Settings.vue","../apps/files/src/views/Navigation.vue","../apps/files/src/store/files.ts","../apps/files/src/store/paths.ts","../apps/files/src/store/selection.ts","../apps/files/src/store/uploader.ts","../apps/files/src/services/SortingService.ts","../apps/files/src/services/DropServiceUtils.ts","../apps/files/src/services/DropService.ts","../apps/files/src/store/dragging.ts","../apps/files/src/mixins/filesListWidth.ts","../apps/files/src/components/BreadCrumbs.vue","../apps/files/src/store/actionsmenu.ts","../apps/files/src/store/renaming.ts","../apps/files/src/components/DragAndDropPreview.vue","../apps/files/src/utils/dragUtils.ts","../apps/files/src/components/CustomElementRender.vue","../apps/files/src/components/FileEntry/FileEntryActions.vue","../apps/files/src/components/FileEntryMixin.ts","../apps/files/src/store/keyboard.ts","../apps/files/src/components/FileEntry/FileEntryCheckbox.vue","../apps/files/src/components/FileEntry/FileEntryName.vue","../apps/files/src/components/FileEntry/CollectivesIcon.vue","../apps/files/src/components/FileEntry/FavoriteIcon.vue","../apps/files/src/components/FileEntry/FileEntryPreview.vue","../apps/files/src/components/FileEntry.vue","../apps/files/src/components/FileEntryGrid.vue","../apps/files/src/components/FilesListHeader.vue","../apps/files/src/components/FilesListTableFooter.vue","../apps/files/src/mixins/filesSorting.ts","../apps/files/src/components/FilesListTableHeaderButton.vue","../apps/files/src/components/FilesListTableHeader.vue","../apps/files/src/components/VirtualList.vue","../apps/files/src/components/FilesListTableHeaderActions.vue","../apps/files/src/components/FilesListVirtual.vue","../apps/files/src/components/DragAndDropNotice.vue","../apps/files/src/views/FilesList.vue","../apps/files/src/FilesApp.vue","../apps/files/src/main.ts"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { RawLocation, Route } from 'vue-router'\nimport type { ErrorHandler } from 'vue-router/types/router.d.ts'\n\nimport { generateUrl } from '@nextcloud/router'\nimport queryString from 'query-string'\nimport Router from 'vue-router'\nimport Vue from 'vue'\n\nVue.use(Router)\n\n// Prevent router from throwing errors when we're already on the page we're trying to go to\nconst originalPush = Router.prototype.push as (to, onComplete?, onAbort?) => Promise<Route>\nRouter.prototype.push = function push(to: RawLocation, onComplete?: ((route: Route) => void) | undefined, onAbort?: ErrorHandler | undefined): Promise<Route> {\n\tif (onComplete || onAbort) return originalPush.call(this, to, onComplete, onAbort)\n\treturn originalPush.call(this, to).catch(err => err)\n}\n\nconst router = new Router({\n\tmode: 'history',\n\n\t// if index.php is in the url AND we got this far, then it's working:\n\t// let's keep using index.php in the url\n\tbase: generateUrl('/apps/files'),\n\tlinkActiveClass: 'active',\n\n\troutes: [\n\t\t{\n\t\t\tpath: '/',\n\t\t\t// Pretending we're using the default view\n\t\t\tredirect: { name: 'filelist', params: { view: 'files' } },\n\t\t},\n\t\t{\n\t\t\tpath: '/:view/:fileid(\\\\d+)?',\n\t\t\tname: 'filelist',\n\t\t\tprops: true,\n\t\t},\n\t],\n\n\t// Custom stringifyQuery to prevent encoding of slashes in the url\n\tstringifyQuery(query) {\n\t\tconst result = queryString.stringify(query).replace(/%2F/gmi, '/')\n\t\treturn result ? ('?' + result) : ''\n\t},\n})\n\nexport default router\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { Route } from 'vue-router'\nimport type VueRouter from 'vue-router'\nimport type { Dictionary, Location } from 'vue-router/types/router'\n\nexport default class RouterService {\n\n\tprivate _router: VueRouter\n\n\tconstructor(router: VueRouter) {\n\t\tthis._router = router\n\t}\n\n\tget name(): string | null | undefined {\n\t\treturn this._router.currentRoute.name\n\t}\n\n\tget query(): Dictionary<string | (string | null)[] | null | undefined> {\n\t\treturn this._router.currentRoute.query || {}\n\t}\n\n\tget params(): Dictionary<string> {\n\t\treturn this._router.currentRoute.params || {}\n\t}\n\n\t/**\n\t * Trigger a route change on the files app\n\t *\n\t * @param path the url path, eg: '/trashbin?dir=/Deleted'\n\t * @param replace replace the current history\n\t * @see https://router.vuejs.org/guide/essentials/navigation.html#navigate-to-a-different-location\n\t */\n\tgoTo(path: string, replace = false): Promise<Route> {\n\t\treturn this._router.push({\n\t\t\tpath,\n\t\t\treplace,\n\t\t})\n\t}\n\n\t/**\n\t * Trigger a route change on the files App\n\t *\n\t * @param name the route name\n\t * @param params the route parameters\n\t * @param query the url query parameters\n\t * @param replace replace the current history\n\t * @see https://router.vuejs.org/guide/essentials/navigation.html#navigate-to-a-different-location\n\t */\n\tgoToRoute(\n\t\tname?: string,\n\t\tparams?: Dictionary<string>,\n\t\tquery?: Dictionary<string | (string | null)[] | null | undefined>,\n\t\treplace?: boolean,\n\t): Promise<Route> {\n\t\treturn this._router.push({\n\t\t\tname,\n\t\t\tquery,\n\t\t\tparams,\n\t\t\treplace,\n\t\t} as Location)\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nexport default class Setting {\n\n\t_close\n\t_el\n\t_name\n\t_open\n\n\t/**\n\t * Create a new files app setting\n\t *\n\t * @since 19.0.0\n\t * @param {string} name the name of this setting\n\t * @param {object} component the component\n\t * @param {Function} component.el function that returns an unmounted dom element to be added\n\t * @param {Function} [component.open] callback for when setting is added\n\t * @param {Function} [component.close] callback for when setting is closed\n\t */\n\tconstructor(name, { el, open, close }) {\n\t\tthis._name = name\n\t\tthis._el = el\n\t\tthis._open = open\n\t\tthis._close = close\n\n\t\tif (typeof this._open !== 'function') {\n\t\t\tthis._open = () => {}\n\t\t}\n\n\t\tif (typeof this._close !== 'function') {\n\t\t\tthis._close = () => {}\n\t\t}\n\t}\n\n\tget name() {\n\t\treturn this._name\n\t}\n\n\tget el() {\n\t\treturn this._el\n\t}\n\n\tget open() {\n\t\treturn this._open\n\t}\n\n\tget close() {\n\t\treturn this._close\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nexport default class Settings {\n\n\t_settings\n\n\tconstructor() {\n\t\tthis._settings = []\n\t\tconsole.debug('OCA.Files.Settings initialized')\n\t}\n\n\t/**\n\t * Register a new setting\n\t *\n\t * @since 19.0.0\n\t * @param {OCA.Files.Settings.Setting} view element to add to settings\n\t * @return {boolean} whether registering was successful\n\t */\n\tregister(view) {\n\t\tif (this._settings.filter(e => e.name === view.name).length > 0) {\n\t\t\tconsole.error('A setting with the same name is already registered')\n\t\t\treturn false\n\t\t}\n\t\tthis._settings.push(view)\n\t\treturn true\n\t}\n\n\t/**\n\t * All settings elements\n\t *\n\t * @return {OCA.Files.Settings.Setting[]} All currently registered settings\n\t */\n\tget settings() {\n\t\treturn this._settings\n\t}\n\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { defineStore } from 'pinia'\nimport { emit, subscribe } from '@nextcloud/event-bus'\nimport { generateUrl } from '@nextcloud/router'\nimport { loadState } from '@nextcloud/initial-state'\nimport axios from '@nextcloud/axios'\nimport Vue from 'vue'\n\nimport type { ViewConfigs, ViewConfigStore, ViewId, ViewConfig } from '../types'\n\nconst viewConfig = loadState('files', 'viewConfigs', {}) as ViewConfigs\n\nexport const useViewConfigStore = function(...args) {\n\tconst store = defineStore('viewconfig', {\n\t\tstate: () => ({\n\t\t\tviewConfig,\n\t\t} as ViewConfigStore),\n\n\t\tgetters: {\n\t\t\tgetConfig: (state) => (view: ViewId): ViewConfig => state.viewConfig[view] || {},\n\t\t},\n\n\t\tactions: {\n\t\t\t/**\n\t\t\t * Update the view config local store\n\t\t\t */\n\t\t\tonUpdate(view: ViewId, key: string, value: string | number | boolean) {\n\t\t\t\tif (!this.viewConfig[view]) {\n\t\t\t\t\tVue.set(this.viewConfig, view, {})\n\t\t\t\t}\n\t\t\t\tVue.set(this.viewConfig[view], key, value)\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Update the view config local store AND on server side\n\t\t\t */\n\t\t\tasync update(view: ViewId, key: string, value: string | number | boolean) {\n\t\t\t\taxios.put(generateUrl(`/apps/files/api/v1/views/${view}/${key}`), {\n\t\t\t\t\tvalue,\n\t\t\t\t})\n\n\t\t\t\temit('files:viewconfig:updated', { view, key, value })\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Set the sorting key AND sort by ASC\n\t\t\t * The key param must be a valid key of a File object\n\t\t\t * If not found, will be searched within the File attributes\n\t\t\t */\n\t\t\tsetSortingBy(key = 'basename', view = 'files') {\n\t\t\t\t// Save new config\n\t\t\t\tthis.update(view, 'sorting_mode', key)\n\t\t\t\tthis.update(view, 'sorting_direction', 'asc')\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Toggle the sorting direction\n\t\t\t */\n\t\t\ttoggleSortingDirection(view = 'files') {\n\t\t\t\tconst config = this.getConfig(view) || { sorting_direction: 'asc' }\n\t\t\t\tconst newDirection = config.sorting_direction === 'asc' ? 'desc' : 'asc'\n\n\t\t\t\t// Save new config\n\t\t\t\tthis.update(view, 'sorting_direction', newDirection)\n\t\t\t},\n\t\t},\n\t})\n\n\tconst viewConfigStore = store(...args)\n\n\t// Make sure we only register the listeners once\n\tif (!viewConfigStore._initialized) {\n\t\tsubscribe('files:viewconfig:updated', function({ view, key, value }: { view: ViewId, key: string, value: boolean }) {\n\t\t\tviewConfigStore.onUpdate(view, key, value)\n\t\t})\n\t\tviewConfigStore._initialized = true\n\t}\n\n\treturn viewConfigStore\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nfunction throttle (delay, callback, options) {\n  var _ref = options || {},\n      _ref$noTrailing = _ref.noTrailing,\n      noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n      _ref$noLeading = _ref.noLeading,\n      noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n      _ref$debounceMode = _ref.debounceMode,\n      debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n\n\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel(options) {\n    var _ref2 = options || {},\n        _ref2$upcomingOnly = _ref2.upcomingOnly,\n        upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */\n        lastExec = Date.now();\n\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, callback, options) {\n  var _ref = options || {},\n      _ref$atBegin = _ref.atBegin,\n      atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\n\nexport { debounce, throttle };\n//# sourceMappingURL=index.js.map\n","<!--\n - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n -->\n<template>\n\t<NcAppNavigationItem v-if=\"storageStats\"\n\t\t:aria-label=\"t('files', 'Storage informations')\"\n\t\t:class=\"{ 'app-navigation-entry__settings-quota--not-unlimited': storageStats.quota >= 0}\"\n\t\t:loading=\"loadingStorageStats\"\n\t\t:name=\"storageStatsTitle\"\n\t\t:title=\"storageStatsTooltip\"\n\t\tclass=\"app-navigation-entry__settings-quota\"\n\t\tdata-cy-files-navigation-settings-quota\n\t\t@click.stop.prevent=\"debounceUpdateStorageStats\">\n\t\t<ChartPie slot=\"icon\" :size=\"20\" />\n\n\t\t<!-- Progress bar -->\n\t\t<NcProgressBar v-if=\"storageStats.quota >= 0\"\n\t\t\tslot=\"extra\"\n\t\t\t:error=\"storageStats.relative > 80\"\n\t\t\t:value=\"Math.min(storageStats.relative, 100)\" />\n\t</NcAppNavigationItem>\n</template>\n\n<script>\nimport { debounce, throttle } from 'throttle-debounce'\nimport { formatFileSize } from '@nextcloud/files'\nimport { generateUrl } from '@nextcloud/router'\nimport { loadState } from '@nextcloud/initial-state'\nimport { showError } from '@nextcloud/dialogs'\nimport { subscribe } from '@nextcloud/event-bus'\nimport { translate } from '@nextcloud/l10n'\nimport axios from '@nextcloud/axios'\n\nimport ChartPie from 'vue-material-design-icons/ChartPie.vue'\nimport NcAppNavigationItem from '@nextcloud/vue/dist/Components/NcAppNavigationItem.js'\nimport NcProgressBar from '@nextcloud/vue/dist/Components/NcProgressBar.js'\n\nimport logger from '../logger.js'\n\nexport default {\n\tname: 'NavigationQuota',\n\n\tcomponents: {\n\t\tChartPie,\n\t\tNcAppNavigationItem,\n\t\tNcProgressBar,\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tloadingStorageStats: false,\n\t\t\tstorageStats: loadState('files', 'storageStats', null),\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tstorageStatsTitle() {\n\t\t\tconst usedQuotaByte = formatFileSize(this.storageStats?.used, false, false)\n\t\t\tconst quotaByte = formatFileSize(this.storageStats?.quota, false, false)\n\n\t\t\t// If no quota set\n\t\t\tif (this.storageStats?.quota < 0) {\n\t\t\t\treturn this.t('files', '{usedQuotaByte} used', { usedQuotaByte })\n\t\t\t}\n\n\t\t\treturn this.t('files', '{used} of {quota} used', {\n\t\t\t\tused: usedQuotaByte,\n\t\t\t\tquota: quotaByte,\n\t\t\t})\n\t\t},\n\t\tstorageStatsTooltip() {\n\t\t\tif (!this.storageStats.relative) {\n\t\t\t\treturn ''\n\t\t\t}\n\n\t\t\treturn this.t('files', '{relative}% used', this.storageStats)\n\t\t},\n\t},\n\n\tbeforeMount() {\n\t\t/**\n\t\t * Update storage stats every minute\n\t\t * TODO: remove when all views are migrated to Vue\n\t\t */\n\t\tsetInterval(this.throttleUpdateStorageStats, 60 * 1000)\n\n\t\tsubscribe('files:node:created', this.throttleUpdateStorageStats)\n\t\tsubscribe('files:node:deleted', this.throttleUpdateStorageStats)\n\t\tsubscribe('files:node:moved', this.throttleUpdateStorageStats)\n\t\tsubscribe('files:node:updated', this.throttleUpdateStorageStats)\n\t},\n\n\tmounted() {\n\t\t// If the user has a quota set, warn if the available account storage is <=0\n\t\t//\n\t\t// NOTE: This doesn't catch situations where actual *server* \n\t\t// disk (non-quota) space is low, but those should probably\n\t\t// be handled differently anyway since a regular user can't\n\t\t// can't do much about them (If we did want to indicate server disk \n\t\t// space matters to users, we'd probably want to use a warning\n\t\t// specific to that situation anyhow. So this covers warning covers \n\t\t// our primary day-to-day concern (individual account quota usage).\n\t\t//\n\t\tif (this.storageStats?.quota > 0 && this.storageStats?.free <= 0) {\n\t\t\tthis.showStorageFullWarning()\n\t\t}\n\t},\n\n\tmethods: {\n\t\t// From user input\n\t\tdebounceUpdateStorageStats: debounce(200, function(event) {\n\t\t\tthis.updateStorageStats(event)\n\t\t}),\n\t\t// From interval or event bus\n\t\tthrottleUpdateStorageStats: throttle(1000, function(event) {\n\t\t\tthis.updateStorageStats(event)\n\t\t}),\n\n\t\t/**\n\t\t * Update the storage stats\n\t\t * Throttled at max 1 refresh per minute\n\t\t *\n\t\t * @param {Event} [event = null] if user interaction\n\t\t */\n\t\tasync updateStorageStats(event = null) {\n\t\t\tif (this.loadingStorageStats) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.loadingStorageStats = true\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(generateUrl('/apps/files/api/v1/stats'))\n\t\t\t\tif (!response?.data?.data) {\n\t\t\t\t\tthrow new Error('Invalid storage stats')\n\t\t\t\t}\n\n\t\t\t\t// Warn the user if the available account storage changed from > 0 to 0 \n\t\t\t\t// (unless only because quota was intentionally set to 0 by admin in the interim)\n\t\t\t\tif (this.storageStats?.free > 0 && response.data.data?.free <= 0 && response.data.data?.quota > 0) {\n\t\t\t\t\tthis.showStorageFullWarning()\n\t\t\t\t}\n\n\t\t\t\tthis.storageStats = response.data.data\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Could not refresh storage stats', { error })\n\t\t\t\t// Only show to the user if it was manually triggered\n\t\t\t\tif (event) {\n\t\t\t\t\tshowError(t('files', 'Could not refresh storage stats'))\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis.loadingStorageStats = false\n\t\t\t}\n\t\t},\n\n\t\tshowStorageFullWarning() {\n\t\t\tshowError(this.t('files', 'Your storage is full, files can not be updated or synced anymore!'))\n\t\t},\n\n\t\tt: translate,\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n// User storage stats display\n.app-navigation-entry__settings-quota {\n\t// Align title with progress and icon\n\t&--not-unlimited::v-deep .app-navigation-entry__name {\n\t\tmargin-top: -6px;\n\t}\n\n\tprogress {\n\t\tposition: absolute;\n\t\tbottom: 12px;\n\t\tmargin-left: 44px;\n\t\twidth: calc(100% - 44px - 22px);\n\t}\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<div />\n</template>\n<script>\nexport default {\n\tname: 'Setting',\n\tprops: {\n\t\tel: {\n\t\t\ttype: Function,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tmounted() {\n\t\tthis.$el.appendChild(this.el())\n\t},\n}\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcAppSettingsDialog :open=\"open\"\n\t\t:show-navigation=\"true\"\n\t\t:name=\"t('files', 'Files settings')\"\n\t\t@update:open=\"onClose\">\n\t\t<!-- Settings API-->\n\t\t<NcAppSettingsSection id=\"settings\" :name=\"t('files', 'Files settings')\">\n\t\t\t<NcCheckboxRadioSwitch data-cy-files-settings-setting=\"sort_favorites_first\"\n\t\t\t\t:checked=\"userConfig.sort_favorites_first\"\n\t\t\t\t@update:checked=\"setConfig('sort_favorites_first', $event)\">\n\t\t\t\t{{ t('files', 'Sort favorites first') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t<NcCheckboxRadioSwitch data-cy-files-settings-setting=\"sort_folders_first\"\n\t\t\t\t:checked=\"userConfig.sort_folders_first\"\n\t\t\t\t@update:checked=\"setConfig('sort_folders_first', $event)\">\n\t\t\t\t{{ t('files', 'Sort folders before files') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t<NcCheckboxRadioSwitch data-cy-files-settings-setting=\"show_hidden\"\n\t\t\t\t:checked=\"userConfig.show_hidden\"\n\t\t\t\t@update:checked=\"setConfig('show_hidden', $event)\">\n\t\t\t\t{{ t('files', 'Show hidden files') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t<NcCheckboxRadioSwitch data-cy-files-settings-setting=\"crop_image_previews\"\n\t\t\t\t:checked=\"userConfig.crop_image_previews\"\n\t\t\t\t@update:checked=\"setConfig('crop_image_previews', $event)\">\n\t\t\t\t{{ t('files', 'Crop image previews') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t\t<NcCheckboxRadioSwitch v-if=\"enableGridView\"\n\t\t\t\tdata-cy-files-settings-setting=\"grid_view\"\n\t\t\t\t:checked=\"userConfig.grid_view\"\n\t\t\t\t@update:checked=\"setConfig('grid_view', $event)\">\n\t\t\t\t{{ t('files', 'Enable the grid view') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t</NcAppSettingsSection>\n\n\t\t<!-- Settings API-->\n\t\t<NcAppSettingsSection v-if=\"settings.length !== 0\"\n\t\t\tid=\"more-settings\"\n\t\t\t:name=\"t('files', 'Additional settings')\">\n\t\t\t<template v-for=\"setting in settings\">\n\t\t\t\t<Setting :key=\"setting.name\" :el=\"setting.el\" />\n\t\t\t</template>\n\t\t</NcAppSettingsSection>\n\n\t\t<!-- Webdav URL-->\n\t\t<NcAppSettingsSection id=\"webdav\" :name=\"t('files', 'WebDAV')\">\n\t\t\t<NcInputField id=\"webdav-url-input\"\n\t\t\t\t:label=\"t('files', 'WebDAV URL')\"\n\t\t\t\t:show-trailing-button=\"true\"\n\t\t\t\t:success=\"webdavUrlCopied\"\n\t\t\t\t:trailing-button-label=\"t('files', 'Copy to clipboard')\"\n\t\t\t\t:value=\"webdavUrl\"\n\t\t\t\treadonly=\"readonly\"\n\t\t\t\ttype=\"url\"\n\t\t\t\t@focus=\"$event.target.select()\"\n\t\t\t\t@trailing-button-click=\"copyCloudId\">\n\t\t\t\t<template #trailing-button-icon>\n\t\t\t\t\t<Clipboard :size=\"20\" />\n\t\t\t\t</template>\n\t\t\t</NcInputField>\n\t\t\t<em>\n\t\t\t\t<a class=\"setting-link\"\n\t\t\t\t\t:href=\"webdavDocs\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noreferrer noopener\">\n\t\t\t\t\t{{ t('files', 'Use this address to access your Files via WebDAV') }} ↗\n\t\t\t\t</a>\n\t\t\t</em>\n\t\t\t<br>\n\t\t\t<em>\n\t\t\t\t<a class=\"setting-link\" :href=\"appPasswordUrl\">\n\t\t\t\t\t{{ t('files', 'If you have enabled 2FA, you must create and use a new app password by clicking here.') }} ↗\n\t\t\t\t</a>\n\t\t\t</em>\n\t\t</NcAppSettingsSection>\n\t</NcAppSettingsDialog>\n</template>\n\n<script>\nimport NcAppSettingsDialog from '@nextcloud/vue/dist/Components/NcAppSettingsDialog.js'\nimport NcAppSettingsSection from '@nextcloud/vue/dist/Components/NcAppSettingsSection.js'\nimport NcCheckboxRadioSwitch from '@nextcloud/vue/dist/Components/NcCheckboxRadioSwitch.js'\nimport Clipboard from 'vue-material-design-icons/Clipboard.vue'\nimport NcInputField from '@nextcloud/vue/dist/Components/NcInputField.js'\nimport Setting from '../components/Setting.vue'\n\nimport { generateRemoteUrl, generateUrl } from '@nextcloud/router'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { showError, showSuccess } from '@nextcloud/dialogs'\nimport { translate } from '@nextcloud/l10n'\nimport { loadState } from '@nextcloud/initial-state'\nimport { useUserConfigStore } from '../store/userconfig.ts'\n\nexport default {\n\tname: 'Settings',\n\tcomponents: {\n\t\tClipboard,\n\t\tNcAppSettingsDialog,\n\t\tNcAppSettingsSection,\n\t\tNcCheckboxRadioSwitch,\n\t\tNcInputField,\n\t\tSetting,\n\t},\n\n\tprops: {\n\t\topen: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst userConfigStore = useUserConfigStore()\n\t\treturn {\n\t\t\tuserConfigStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\t// Settings API\n\t\t\tsettings: window.OCA?.Files?.Settings?.settings || [],\n\n\t\t\t// Webdav infos\n\t\t\twebdavUrl: generateRemoteUrl('dav/files/' + encodeURIComponent(getCurrentUser()?.uid)),\n\t\t\twebdavDocs: 'https://docs.nextcloud.com/server/stable/go.php?to=user-webdav',\n\t\t\tappPasswordUrl: generateUrl('/settings/user/security#generate-app-token-section'),\n\t\t\twebdavUrlCopied: false,\n\t\t\tenableGridView: (loadState('core', 'config', [])['enable_non-accessible_features'] ?? true),\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tuserConfig() {\n\t\t\treturn this.userConfigStore.userConfig\n\t\t},\n\t},\n\n\tbeforeMount() {\n\t\t// Update the settings API entries state\n\t\tthis.settings.forEach(setting => setting.open())\n\t},\n\n\tbeforeDestroy() {\n\t\t// Update the settings API entries state\n\t\tthis.settings.forEach(setting => setting.close())\n\t},\n\n\tmethods: {\n\t\tonClose() {\n\t\t\tthis.$emit('close')\n\t\t},\n\n\t\tsetConfig(key, value) {\n\t\t\tthis.userConfigStore.update(key, value)\n\t\t},\n\n\t\tasync copyCloudId() {\n\t\t\tdocument.querySelector('input#webdav-url-input').select()\n\n\t\t\tif (!navigator.clipboard) {\n\t\t\t\t// Clipboard API not available\n\t\t\t\tshowError(t('files', 'Clipboard is not available'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tawait navigator.clipboard.writeText(this.webdavUrl)\n\t\t\tthis.webdavUrlCopied = true\n\t\t\tshowSuccess(t('files', 'WebDAV URL copied to clipboard'))\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.webdavUrlCopied = false\n\t\t\t}, 5000)\n\t\t},\n\n\t\tt: translate,\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.setting-link:hover {\n\ttext-decoration: underline;\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcAppNavigation data-cy-files-navigation\n\t\t:aria-label=\"t('files', 'Files')\">\n\t\t<template #list>\n\t\t\t<NcAppNavigationItem v-for=\"view in parentViews\"\n\t\t\t\t:key=\"view.id\"\n\t\t\t\t:allow-collapse=\"true\"\n\t\t\t\t:data-cy-files-navigation-item=\"view.id\"\n\t\t\t\t:exact=\"useExactRouteMatching(view)\"\n\t\t\t\t:icon=\"view.iconClass\"\n\t\t\t\t:name=\"view.name\"\n\t\t\t\t:open=\"isExpanded(view)\"\n\t\t\t\t:pinned=\"view.sticky\"\n\t\t\t\t:to=\"generateToNavigation(view)\"\n\t\t\t\t@update:open=\"onToggleExpand(view)\">\n\t\t\t\t<!-- Sanitized icon as svg if provided -->\n\t\t\t\t<NcIconSvgWrapper v-if=\"view.icon\" slot=\"icon\" :svg=\"view.icon\" />\n\n\t\t\t\t<!-- Child views if any -->\n\t\t\t\t<NcAppNavigationItem v-for=\"child in childViews[view.id]\"\n\t\t\t\t\t:key=\"child.id\"\n\t\t\t\t\t:data-cy-files-navigation-item=\"child.id\"\n\t\t\t\t\t:exact-path=\"true\"\n\t\t\t\t\t:icon=\"child.iconClass\"\n\t\t\t\t\t:name=\"child.name\"\n\t\t\t\t\t:to=\"generateToNavigation(child)\">\n\t\t\t\t\t<!-- Sanitized icon as svg if provided -->\n\t\t\t\t\t<NcIconSvgWrapper v-if=\"child.icon\" slot=\"icon\" :svg=\"child.icon\" />\n\t\t\t\t</NcAppNavigationItem>\n\t\t\t</NcAppNavigationItem>\n\t\t</template>\n\n\t\t<!-- Non-scrollable navigation bottom elements -->\n\t\t<template #footer>\n\t\t\t<ul class=\"app-navigation-entry__settings\">\n\t\t\t\t<!-- User storage usage statistics -->\n\t\t\t\t<NavigationQuota />\n\n\t\t\t\t<!-- Files settings modal toggle-->\n\t\t\t\t<NcAppNavigationItem :aria-label=\"t('files', 'Open the files app settings')\"\n\t\t\t\t\t:name=\"t('files', 'Files settings')\"\n\t\t\t\t\tdata-cy-files-navigation-settings-button\n\t\t\t\t\t@click.prevent.stop=\"openSettings\">\n\t\t\t\t\t<Cog slot=\"icon\" :size=\"20\" />\n\t\t\t\t</NcAppNavigationItem>\n\t\t\t</ul>\n\t\t</template>\n\n\t\t<!-- Settings modal-->\n\t\t<SettingsModal :open=\"settingsOpened\"\n\t\t\tdata-cy-files-navigation-settings\n\t\t\t@close=\"onSettingsClose\" />\n\t</NcAppNavigation>\n</template>\n\n<script lang=\"ts\">\nimport type { View } from '@nextcloud/files'\n\nimport { emit } from '@nextcloud/event-bus'\nimport { translate } from '@nextcloud/l10n'\nimport Cog from 'vue-material-design-icons/Cog.vue'\nimport NcAppNavigation from '@nextcloud/vue/dist/Components/NcAppNavigation.js'\nimport NcAppNavigationItem from '@nextcloud/vue/dist/Components/NcAppNavigationItem.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\n\nimport { useViewConfigStore } from '../store/viewConfig.ts'\nimport logger from '../logger.js'\nimport NavigationQuota from '../components/NavigationQuota.vue'\nimport SettingsModal from './Settings.vue'\n\nexport default {\n\tname: 'Navigation',\n\n\tcomponents: {\n\t\tCog,\n\t\tNavigationQuota,\n\t\tNcAppNavigation,\n\t\tNcAppNavigationItem,\n\t\tNcIconSvgWrapper,\n\t\tSettingsModal,\n\t},\n\n\tsetup() {\n\t\tconst viewConfigStore = useViewConfigStore()\n\t\treturn {\n\t\t\tviewConfigStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tsettingsOpened: false,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentViewId() {\n\t\t\treturn this.$route?.params?.view || 'files'\n\t\t},\n\n\t\tcurrentView(): View {\n\t\t\treturn this.views.find(view => view.id === this.currentViewId)!\n\t\t},\n\n\t\tviews(): View[] {\n\t\t\treturn this.$navigation.views\n\t\t},\n\n\t\tparentViews(): View[] {\n\t\t\treturn this.views\n\t\t\t\t// filter child views\n\t\t\t\t.filter(view => !view.parent)\n\t\t\t\t// sort views by order\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\treturn a.order - b.order\n\t\t\t\t})\n\t\t},\n\n\t\tchildViews(): Record<string, View[]> {\n\t\t\treturn this.views\n\t\t\t\t// filter parent views\n\t\t\t\t.filter(view => !!view.parent)\n\t\t\t\t// create a map of parents and their children\n\t\t\t\t.reduce((list, view) => {\n\t\t\t\t\tlist[view.parent!] = [...(list[view.parent!] || []), view]\n\t\t\t\t\t// Sort children by order\n\t\t\t\t\tlist[view.parent!].sort((a, b) => {\n\t\t\t\t\t\treturn a.order - b.order\n\t\t\t\t\t})\n\t\t\t\t\treturn list\n\t\t\t\t}, {} as Record<string, View[]>)\n\t\t},\n\t},\n\n\twatch: {\n\t\tcurrentView(view, oldView) {\n\t\t\tif (view.id !== oldView?.id) {\n\t\t\t\tthis.$navigation.setActive(view)\n\t\t\t\tlogger.debug(`Navigation changed from ${oldView.id} to ${view.id}`, { from: oldView, to: view })\n\n\t\t\t\tthis.showView(view)\n\t\t\t}\n\t\t},\n\t},\n\n\tbeforeMount() {\n\t\tif (this.currentView) {\n\t\t\tlogger.debug('Navigation mounted. Showing requested view', { view: this.currentView })\n\t\t\tthis.showView(this.currentView)\n\t\t}\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Only use exact route matching on routes with child views\n\t\t * Because if a view does not have children (like the files view) then multiple routes might be matched for it\n\t\t * Like for the 'files' view this does not work because of optional 'fileid' param so /files and /files/1234 are both in the 'files' view\n\t\t * @param view The view to check\n\t\t */\n\t\tuseExactRouteMatching(view: View): boolean {\n\t\t\treturn this.childViews[view.id]?.length > 0\n\t\t},\n\n\t\tshowView(view: View) {\n\t\t\t// Closing any opened sidebar\n\t\t\twindow?.OCA?.Files?.Sidebar?.close?.()\n\t\t\tthis.$navigation.setActive(view)\n\t\t\temit('files:navigation:changed', view)\n\t\t},\n\n\t\t/**\n\t\t * Expand/collapse a a view with children and permanently\n\t\t * save this setting in the server.\n\t\t * @param view View to toggle\n\t\t */\n\t\tonToggleExpand(view: View) {\n\t\t\t// Invert state\n\t\t\tconst isExpanded = this.isExpanded(view)\n\t\t\t// Update the view expanded state, might not be necessary\n\t\t\tview.expanded = !isExpanded\n\t\t\tthis.viewConfigStore.update(view.id, 'expanded', !isExpanded)\n\t\t},\n\n\t\t/**\n\t\t * Check if a view is expanded by user config\n\t\t * or fallback to the default value.\n\t\t * @param view View to check if expanded\n\t\t */\n\t\tisExpanded(view: View): boolean {\n\t\t\treturn typeof this.viewConfigStore.getConfig(view.id)?.expanded === 'boolean'\n\t\t\t\t? this.viewConfigStore.getConfig(view.id).expanded === true\n\t\t\t\t: view.expanded === true\n\t\t},\n\n\t\t/**\n\t\t * Generate the route to a view\n\t\t * @param view View to generate \"to\" navigation for\n\t\t */\n\t\tgenerateToNavigation(view: View) {\n\t\t\tif (view.params) {\n\t\t\t\tconst { dir } = view.params\n\t\t\t\treturn { name: 'filelist', params: view.params, query: { dir } }\n\t\t\t}\n\t\t\treturn { name: 'filelist', params: { view: view.id } }\n\t\t},\n\n\t\t/**\n\t\t * Open the settings modal\n\t\t */\n\t\topenSettings() {\n\t\t\tthis.settingsOpened = true\n\t\t},\n\n\t\t/**\n\t\t * Close the settings modal\n\t\t */\n\t\tonSettingsClose() {\n\t\t\tthis.settingsOpened = false\n\t\t},\n\n\t\tt: translate,\n\t},\n}\n</script>\n\n<style scoped lang=\"scss\">\n// TODO: remove when https://github.com/nextcloud/nextcloud-vue/pull/3539 is in\n.app-navigation::v-deep .app-navigation-entry-icon {\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n}\n\n.app-navigation::v-deep .app-navigation-entry.active .button-vue.icon-collapse:not(:hover) {\n\tcolor: var(--color-primary-element-text);\n}\n\n.app-navigation > ul.app-navigation__list {\n\t// Use flex gap value for more elegant spacing\n\tpadding-bottom: var(--default-grid-baseline, 4px);\n}\n\n.app-navigation-entry__settings {\n\theight: auto !important;\n\toverflow: hidden !important;\n\tpadding-top: 0 !important;\n\t// Prevent shrinking or growing\n\tflex: 0 0 auto;\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { FilesStore, RootsStore, RootOptions, Service, FilesState, FileSource } from '../types'\nimport type { FileStat, ResponseDataDetailed } from 'webdav'\nimport type { Folder, Node } from '@nextcloud/files'\n\nimport { davGetDefaultPropfind, davResultToNode, davRootPath } from '@nextcloud/files'\nimport { defineStore } from 'pinia'\nimport { subscribe } from '@nextcloud/event-bus'\nimport logger from '../logger'\nimport Vue from 'vue'\n\nimport { client } from '../services/WebdavClient.ts'\n\nconst fetchNode = async (node: Node): Promise<Node> => {\n\tconst propfindPayload = davGetDefaultPropfind()\n\tconst result = await client.stat(`${davRootPath}${node.path}`, {\n\t\tdetails: true,\n\t\tdata: propfindPayload,\n\t}) as ResponseDataDetailed<FileStat>\n\treturn davResultToNode(result.data)\n}\n\nexport const useFilesStore = function(...args) {\n\tconst store = defineStore('files', {\n\t\tstate: (): FilesState => ({\n\t\t\tfiles: {} as FilesStore,\n\t\t\troots: {} as RootsStore,\n\t\t}),\n\n\t\tgetters: {\n\t\t\t/**\n\t\t\t * Get a file or folder by its source\n\t\t\t */\n\t\t\tgetNode: (state) => (source: FileSource): Node|undefined => state.files[source],\n\n\t\t\t/**\n\t\t\t * Get a list of files or folders by their IDs\n\t\t\t * Note: does not return undefined values\n\t\t\t */\n\t\t\tgetNodes: (state) => (sources: FileSource[]): Node[] => sources\n\t\t\t\t.map(source => state.files[source])\n\t\t\t\t.filter(Boolean),\n\n\t\t\t/**\n\t\t\t * Get files or folders by their file ID\n\t\t\t * Multiple nodes can have the same file ID but different sources\n\t\t\t * (e.g. in a shared context)\n\t\t\t */\n\t\t\tgetNodesById: (state) => (fileId: number): Node[] => Object.values(state.files).filter(node => node.fileid === fileId),\n\n\t\t\t/**\n\t\t\t * Get the root folder of a service\n\t\t\t */\n\t\t\tgetRoot: (state) => (service: Service): Folder|undefined => state.roots[service],\n\t\t},\n\n\t\tactions: {\n\t\t\tupdateNodes(nodes: Node[]) {\n\t\t\t\t// Update the store all at once\n\t\t\t\tconst files = nodes.reduce((acc, node) => {\n\t\t\t\t\tif (!node.fileid) {\n\t\t\t\t\t\tlogger.error('Trying to update/set a node without fileid', { node })\n\t\t\t\t\t\treturn acc\n\t\t\t\t\t}\n\n\t\t\t\t\tacc[node.source] = node\n\t\t\t\t\treturn acc\n\t\t\t\t}, {} as FilesStore)\n\n\t\t\t\tVue.set(this, 'files', { ...this.files, ...files })\n\t\t\t},\n\n\t\t\tdeleteNodes(nodes: Node[]) {\n\t\t\t\tnodes.forEach(node => {\n\t\t\t\t\tif (node.source) {\n\t\t\t\t\t\tVue.delete(this.files, node.source)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\n\t\t\tsetRoot({ service, root }: RootOptions) {\n\t\t\t\tVue.set(this.roots, service, root)\n\t\t\t},\n\n\t\t\tonDeletedNode(node: Node) {\n\t\t\t\tthis.deleteNodes([node])\n\t\t\t},\n\n\t\t\tonCreatedNode(node: Node) {\n\t\t\t\tthis.updateNodes([node])\n\t\t\t},\n\n\t\t\tasync onUpdatedNode(node: Node) {\n\t\t\t\tif (!node.fileid) {\n\t\t\t\t\tlogger.error('Trying to update/set a node without fileid', { node })\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// If we have multiple nodes with the same file ID, we need to update all of them\n\t\t\t\tconst nodes = this.getNodesById(node.fileid)\n\t\t\t\tif (nodes.length > 1) {\n\t\t\t\t\tawait Promise.all(nodes.map(fetchNode)).then(this.updateNodes)\n\t\t\t\t\tlogger.debug(nodes.length + ' nodes updated in store', { fileid: node.fileid })\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// If we have only one node with the file ID, we can update it directly\n\t\t\t\tif (node.source === nodes[0].source) {\n\t\t\t\t\tthis.updateNodes([node])\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, it means we receive an event for a node that is not in the store\n\t\t\t\tfetchNode(node).then(n => this.updateNodes([n]))\n\t\t\t},\n\t\t},\n\t})\n\n\tconst fileStore = store(...args)\n\t// Make sure we only register the listeners once\n\tif (!fileStore._initialized) {\n\t\tsubscribe('files:node:created', fileStore.onCreatedNode)\n\t\tsubscribe('files:node:deleted', fileStore.onDeletedNode)\n\t\tsubscribe('files:node:updated', fileStore.onUpdatedNode)\n\n\t\tfileStore._initialized = true\n\t}\n\n\treturn fileStore\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { FileSource, PathsStore, PathOptions, ServicesState } from '../types'\nimport { defineStore } from 'pinia'\nimport { FileType, Folder, Node, getNavigation } from '@nextcloud/files'\nimport { subscribe } from '@nextcloud/event-bus'\nimport Vue from 'vue'\nimport logger from '../logger'\n\nimport { useFilesStore } from './files'\n\nexport const usePathsStore = function(...args) {\n\tconst files = useFilesStore(...args)\n\n\tconst store = defineStore('paths', {\n\t\tstate: () => ({\n\t\t\tpaths: {} as ServicesState,\n\t\t} as PathsStore),\n\n\t\tgetters: {\n\t\t\tgetPath: (state) => {\n\t\t\t\treturn (service: string, path: string): FileSource|undefined => {\n\t\t\t\t\tif (!state.paths[service]) {\n\t\t\t\t\t\treturn undefined\n\t\t\t\t\t}\n\t\t\t\t\treturn state.paths[service][path]\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\n\t\tactions: {\n\t\t\taddPath(payload: PathOptions) {\n\t\t\t\t// If it doesn't exists, init the service state\n\t\t\t\tif (!this.paths[payload.service]) {\n\t\t\t\t\tVue.set(this.paths, payload.service, {})\n\t\t\t\t}\n\n\t\t\t\t// Now we can set the provided path\n\t\t\t\tVue.set(this.paths[payload.service], payload.path, payload.source)\n\t\t\t},\n\n\t\t\tonCreatedNode(node: Node) {\n\t\t\t\tconst service = getNavigation()?.active?.id || 'files'\n\t\t\t\tif (!node.fileid) {\n\t\t\t\t\tlogger.error('Node has no fileid', { node })\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Only add path if it's a folder\n\t\t\t\tif (node.type === FileType.Folder) {\n\t\t\t\t\tthis.addPath({\n\t\t\t\t\t\tservice,\n\t\t\t\t\t\tpath: node.path,\n\t\t\t\t\t\tsource: node.source,\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t// Update parent folder children if exists\n\t\t\t\t// If the folder is the root, get it and update it\n\t\t\t\tif (node.dirname === '/') {\n\t\t\t\t\tconst root = files.getRoot(service)\n\t\t\t\t\tif (!root._children) {\n\t\t\t\t\t\tVue.set(root, '_children', [])\n\t\t\t\t\t}\n\t\t\t\t\troot._children.push(node.source)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// If the folder doesn't exists yet, it will be\n\t\t\t\t// fetched later and its children updated anyway.\n\t\t\t\tif (this.paths[service][node.dirname]) {\n\t\t\t\t\tconst parentSource = this.paths[service][node.dirname]\n\t\t\t\t\tconst parentFolder = files.getNode(parentSource) as Folder\n\t\t\t\t\tlogger.debug('Path already exists, updating children', { parentFolder, node })\n\n\t\t\t\t\tif (!parentFolder) {\n\t\t\t\t\t\tlogger.error('Parent folder not found', { parentSource })\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!parentFolder._children) {\n\t\t\t\t\t\tVue.set(parentFolder, '_children', [])\n\t\t\t\t\t}\n\t\t\t\t\tparentFolder._children.push(node.source)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('Parent path does not exists, skipping children update', { node })\n\t\t\t},\n\t\t},\n\t})\n\n\tconst pathsStore = store(...args)\n\t// Make sure we only register the listeners once\n\tif (!pathsStore._initialized) {\n\t\t// TODO: watch folders to update paths?\n\t\tsubscribe('files:node:created', pathsStore.onCreatedNode)\n\t\t// subscribe('files:node:deleted', pathsStore.onDeletedNode)\n\t\t// subscribe('files:node:moved', pathsStore.onMovedNode)\n\n\t\tpathsStore._initialized = true\n\t}\n\n\treturn pathsStore\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { FileSource, SelectionStore } from '../types'\nimport { defineStore } from 'pinia'\nimport Vue from 'vue'\n\nexport const useSelectionStore = defineStore('selection', {\n\tstate: () => ({\n\t\tselected: [],\n\t\tlastSelection: [],\n\t\tlastSelectedIndex: null,\n\t} as SelectionStore),\n\n\tactions: {\n\t\t/**\n\t\t * Set the selection of fileIds\n\t\t */\n\t\tset(selection = [] as FileSource[]) {\n\t\t\tVue.set(this, 'selected', [...new Set(selection)])\n\t\t},\n\n\t\t/**\n\t\t * Set the last selected index\n\t\t */\n\t\tsetLastIndex(lastSelectedIndex = null as number | null) {\n\t\t\t// Update the last selection if we provided a new selection starting point\n\t\t\tVue.set(this, 'lastSelection', lastSelectedIndex ? this.selected : [])\n\t\t\tVue.set(this, 'lastSelectedIndex', lastSelectedIndex)\n\t\t},\n\n\t\t/**\n\t\t * Reset the selection\n\t\t */\n\t\treset() {\n\t\t\tVue.set(this, 'selected', [])\n\t\t\tVue.set(this, 'lastSelection', [])\n\t\t\tVue.set(this, 'lastSelectedIndex', null)\n\t\t},\n\t},\n})\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { Uploader } from '@nextcloud/upload'\nimport type { UploaderStore } from '../types'\n\nimport { defineStore } from 'pinia'\nimport { getUploader } from '@nextcloud/upload'\n\nlet uploader: Uploader\n\nexport const useUploaderStore = function(...args) {\n\t// Only init on runtime\n\tuploader = getUploader()\n\n\tconst store = defineStore('uploader', {\n\t\tstate: () => ({\n\t\t\tqueue: uploader.queue,\n\t\t} as UploaderStore),\n\t})\n\n\treturn store(...args)\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { getCanonicalLocale, getLanguage } from '@nextcloud/l10n'\n\ntype IdentifierFn<T> = (v: T) => unknown\ntype SortingOrder = 'asc'|'desc'\n\n/**\n * Helper to create string representation\n * @param value Value to stringify\n */\nfunction stringify(value: unknown) {\n\t// The default representation of Date is not sortable because of the weekday names in front of it\n\tif (value instanceof Date) {\n\t\treturn value.toISOString()\n\t}\n\treturn String(value)\n}\n\n/**\n * Natural order a collection\n * You can define identifiers as callback functions, that get the element and return the value to sort.\n *\n * @param collection The collection to order\n * @param identifiers An array of identifiers to use, by default the identity of the element is used\n * @param orders Array of orders, by default all identifiers are sorted ascening\n */\nexport function orderBy<T>(collection: readonly T[], identifiers?: IdentifierFn<T>[], orders?: SortingOrder[]): T[] {\n\t// If not identifiers are set we use the identity of the value\n\tidentifiers = identifiers ?? [(value) => value]\n\t// By default sort the collection ascending\n\torders = orders ?? []\n\tconst sorting = identifiers.map((_, index) => (orders[index] ?? 'asc') === 'asc' ? 1 : -1)\n\n\tconst collator = Intl.Collator(\n\t\t[getLanguage(), getCanonicalLocale()],\n\t\t{\n\t\t\t// handle 10 as ten and not as one-zero\n\t\t\tnumeric: true,\n\t\t\tusage: 'sort',\n\t\t},\n\t)\n\n\treturn [...collection].sort((a, b) => {\n\t\tfor (const [index, identifier] of identifiers.entries()) {\n\t\t\t// Get the local compare of stringified value a and b\n\t\t\tconst value = collator.compare(stringify(identifier(a)), stringify(identifier(b)))\n\t\t\t// If they do not match return the order\n\t\t\tif (value !== 0) {\n\t\t\t\treturn value * sorting[index]\n\t\t\t}\n\t\t\t// If they match we need to continue with the next identifier\n\t\t}\n\t\t// If all are equal we need to return equality\n\t\treturn 0\n\t})\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { FileStat, ResponseDataDetailed } from 'webdav'\n\nimport { emit } from '@nextcloud/event-bus'\nimport { Folder, Node, davGetClient, davGetDefaultPropfind, davResultToNode } from '@nextcloud/files'\nimport { openConflictPicker } from '@nextcloud/upload'\nimport { showError, showInfo } from '@nextcloud/dialogs'\nimport { translate as t } from '@nextcloud/l10n'\n\nimport logger from '../logger.js'\n\n/**\n * This represents a Directory in the file tree\n * We extend the File class to better handling uploading\n * and stay as close as possible as the Filesystem API.\n * This also allow us to hijack the size or lastModified\n * properties to compute them dynamically.\n */\nexport class Directory extends File {\n\n\t/* eslint-disable no-use-before-define */\n\t_contents: (Directory|File)[]\n\n\tconstructor(name, contents: (Directory|File)[] = []) {\n\t\tsuper([], name, { type: 'httpd/unix-directory' })\n\t\tthis._contents = contents\n\t}\n\n\tset contents(contents: (Directory|File)[]) {\n\t\tthis._contents = contents\n\t}\n\n\tget contents(): (Directory|File)[] {\n\t\treturn this._contents\n\t}\n\n\tget size() {\n\t\treturn this._computeDirectorySize(this)\n\t}\n\n\tget lastModified() {\n\t\tif (this._contents.length === 0) {\n\t\t\treturn Date.now()\n\t\t}\n\t\treturn this._computeDirectoryMtime(this)\n\t}\n\n\t/**\n\t * Get the last modification time of a file tree\n\t * This is not perfect, but will get us a pretty good approximation\n\t * @param directory the directory to traverse\n\t */\n\t_computeDirectoryMtime(directory: Directory): number {\n\t\treturn directory.contents.reduce((acc, file) => {\n\t\t\treturn file.lastModified > acc\n\t\t\t\t// If the file is a directory, the lastModified will\n\t\t\t\t// also return the results of its _computeDirectoryMtime method\n\t\t\t\t// Fancy recursion, huh?\n\t\t\t\t? file.lastModified\n\t\t\t\t: acc\n\t\t}, 0)\n\t}\n\n\t/**\n\t * Get the size of a file tree\n\t * @param directory the directory to traverse\n\t */\n\t_computeDirectorySize(directory: Directory): number {\n\t\treturn directory.contents.reduce((acc: number, entry: Directory|File) => {\n\t\t\t// If the file is a directory, the size will\n\t\t\t// also return the results of its _computeDirectorySize method\n\t\t\t// Fancy recursion, huh?\n\t\t\treturn acc + entry.size\n\t\t}, 0)\n\t}\n\n}\n\nexport type RootDirectory = Directory & {\n\tname: 'root'\n}\n\n/**\n * Traverse a file tree using the Filesystem API\n * @param entry the entry to traverse\n */\nexport const traverseTree = async (entry: FileSystemEntry): Promise<Directory|File> => {\n\t// Handle file\n\tif (entry.isFile) {\n\t\treturn new Promise<File>((resolve, reject) => {\n\t\t\t(entry as FileSystemFileEntry).file(resolve, reject)\n\t\t})\n\t}\n\n\t// Handle directory\n\tlogger.debug('Handling recursive file tree', { entry: entry.name })\n\tconst directory = entry as FileSystemDirectoryEntry\n\tconst entries = await readDirectory(directory)\n\tconst contents = (await Promise.all(entries.map(traverseTree))).flat()\n\treturn new Directory(directory.name, contents)\n}\n\n/**\n * Read a directory using Filesystem API\n * @param directory the directory to read\n */\nconst readDirectory = (directory: FileSystemDirectoryEntry): Promise<FileSystemEntry[]> => {\n\tconst dirReader = directory.createReader()\n\n\treturn new Promise<FileSystemEntry[]>((resolve, reject) => {\n\t\tconst entries = [] as FileSystemEntry[]\n\t\tconst getEntries = () => {\n\t\t\tdirReader.readEntries((results) => {\n\t\t\t\tif (results.length) {\n\t\t\t\t\tentries.push(...results)\n\t\t\t\t\tgetEntries()\n\t\t\t\t} else {\n\t\t\t\t\tresolve(entries)\n\t\t\t\t}\n\t\t\t}, (error) => {\n\t\t\t\treject(error)\n\t\t\t})\n\t\t}\n\n\t\tgetEntries()\n\t})\n}\n\nexport const createDirectoryIfNotExists = async (absolutePath: string) => {\n\tconst davClient = davGetClient()\n\tconst dirExists = await davClient.exists(absolutePath)\n\tif (!dirExists) {\n\t\tlogger.debug('Directory does not exist, creating it', { absolutePath })\n\t\tawait davClient.createDirectory(absolutePath, { recursive: true })\n\t\tconst stat = await davClient.stat(absolutePath, { details: true, data: davGetDefaultPropfind() }) as ResponseDataDetailed<FileStat>\n\t\temit('files:node:created', davResultToNode(stat.data))\n\t}\n}\n\nexport const resolveConflict = async <T extends ((Directory|File)|Node)>(files: Array<T>, destination: Folder, contents: Node[]): Promise<T[]> => {\n\ttry {\n\t\t// List all conflicting files\n\t\tconst conflicts = files.filter((file: File|Node) => {\n\t\t\treturn contents.find((node: Node) => node.basename === (file instanceof File ? file.name : file.basename))\n\t\t}).filter(Boolean) as (File|Node)[]\n\n\t\t// List of incoming files that are NOT in conflict\n\t\tconst uploads = files.filter((file: File|Node) => {\n\t\t\treturn !conflicts.includes(file)\n\t\t})\n\n\t\t// Let the user choose what to do with the conflicting files\n\t\tconst { selected, renamed } = await openConflictPicker(destination.path, conflicts, contents)\n\n\t\tlogger.debug('Conflict resolution', { uploads, selected, renamed })\n\n\t\t// If the user selected nothing, we cancel the upload\n\t\tif (selected.length === 0 && renamed.length === 0) {\n\t\t\t// User skipped\n\t\t\tshowInfo(t('files', 'Conflicts resolution skipped'))\n\t\t\tlogger.info('User skipped the conflict resolution')\n\t\t\treturn []\n\t\t}\n\n\t\t// Update the list of files to upload\n\t\treturn [...uploads, ...selected, ...renamed] as (typeof files)\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\t// User cancelled\n\t\tshowError(t('files', 'Upload cancelled'))\n\t\tlogger.error('User cancelled the upload')\n\t}\n\n\treturn []\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { Upload } from '@nextcloud/upload'\nimport type { RootDirectory } from './DropServiceUtils'\n\nimport { Folder, Node, NodeStatus, davRootPath } from '@nextcloud/files'\nimport { getUploader, hasConflict } from '@nextcloud/upload'\nimport { join } from 'path'\nimport { joinPaths } from '@nextcloud/paths'\nimport { showError, showInfo, showSuccess, showWarning } from '@nextcloud/dialogs'\nimport { translate as t } from '@nextcloud/l10n'\nimport Vue from 'vue'\n\nimport { Directory, traverseTree, resolveConflict, createDirectoryIfNotExists } from './DropServiceUtils'\nimport { handleCopyMoveNodeTo } from '../actions/moveOrCopyAction'\nimport { MoveCopyAction } from '../actions/moveOrCopyActionUtils'\nimport logger from '../logger.js'\n\n/**\n * This function converts a list of DataTransferItems to a file tree.\n * It uses the Filesystem API if available, otherwise it falls back to the File API.\n * The File API will NOT be available if the browser is not in a secure context (e.g. HTTP).\n * ⚠️ When using this method, you need to use it as fast as possible, as the DataTransferItems\n * will be cleared after the first access to the props of one of the entries.\n *\n * @param items the list of DataTransferItems\n */\nexport const dataTransferToFileTree = async (items: DataTransferItem[]): Promise<RootDirectory> => {\n\t// Check if the browser supports the Filesystem API\n\t// We need to cache the entries to prevent Blink engine bug that clears\n\t// the list (`data.items`) after first access props of one of the entries\n\tconst entries = items\n\t\t.filter((item) => {\n\t\t\tif (item.kind !== 'file') {\n\t\t\t\tlogger.debug('Skipping dropped item', { kind: item.kind, type: item.type })\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}).map((item) => {\n\t\t\t// MDN recommends to try both, as it might be renamed in the future\n\t\t\treturn (item as unknown as { getAsEntry?: () => FileSystemEntry|undefined })?.getAsEntry?.()\n\t\t\t\t?? item?.webkitGetAsEntry?.()\n\t\t\t\t?? item\n\t\t}) as (FileSystemEntry | DataTransferItem)[]\n\n\tlet warned = false\n\tconst fileTree = new Directory('root') as RootDirectory\n\n\t// Traverse the file tree\n\tfor (const entry of entries) {\n\t\t// Handle browser issues if Filesystem API is not available. Fallback to File API\n\t\tif (entry instanceof DataTransferItem) {\n\t\t\tlogger.warn('Could not get FilesystemEntry of item, falling back to file')\n\n\t\t\tconst file = entry.getAsFile()\n\t\t\tif (file === null) {\n\t\t\t\tlogger.warn('Could not process DataTransferItem', { type: entry.type, kind: entry.kind })\n\t\t\t\tshowError(t('files', 'One of the dropped files could not be processed'))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Warn the user that the browser does not support the Filesystem API\n\t\t\t// we therefore cannot upload directories recursively.\n\t\t\tif (file.type === 'httpd/unix-directory' || !file.type) {\n\t\t\t\tif (!warned) {\n\t\t\t\t\tlogger.warn('Browser does not support Filesystem API. Directories will not be uploaded')\n\t\t\t\t\tshowWarning(t('files', 'Your browser does not support the Filesystem API. Directories will not be uploaded'))\n\t\t\t\t\twarned = true\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfileTree.contents.push(file)\n\t\t\tcontinue\n\t\t}\n\n\t\t// Use Filesystem API\n\t\ttry {\n\t\t\tfileTree.contents.push(await traverseTree(entry))\n\t\t} catch (error) {\n\t\t\t// Do not throw, as we want to continue with the other files\n\t\t\tlogger.error('Error while traversing file tree', { error })\n\t\t}\n\t}\n\n\treturn fileTree\n}\n\nexport const onDropExternalFiles = async (root: RootDirectory, destination: Folder, contents: Node[]): Promise<Upload[]> => {\n\tconst uploader = getUploader()\n\n\t// Check for conflicts on root elements\n\tif (await hasConflict(root.contents, contents)) {\n\t\troot.contents = await resolveConflict(root.contents, destination, contents)\n\t}\n\n\tif (root.contents.length === 0) {\n\t\tlogger.info('No files to upload', { root })\n\t\tshowInfo(t('files', 'No files to upload'))\n\t\treturn []\n\t}\n\n\t// Let's process the files\n\tlogger.debug(`Uploading files to ${destination.path}`, { root, contents: root.contents })\n\tconst queue = [] as Promise<Upload>[]\n\n\tconst uploadDirectoryContents = async (directory: Directory, path: string) => {\n\t\tfor (const file of directory.contents) {\n\t\t\t// This is the relative path to the resource\n\t\t\t// from the current uploader destination\n\t\t\tconst relativePath = join(path, file.name)\n\n\t\t\t// If the file is a directory, we need to create it first\n\t\t\t// then browse its tree and upload its contents.\n\t\t\tif (file instanceof Directory) {\n\t\t\t\tconst absolutePath = joinPaths(davRootPath, destination.path, relativePath)\n\t\t\t\ttry {\n\t\t\t\t\tconsole.debug('Processing directory', { relativePath })\n\t\t\t\t\tawait createDirectoryIfNotExists(absolutePath)\n\t\t\t\t\tawait uploadDirectoryContents(file, relativePath)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tshowError(t('files', 'Unable to create the directory {directory}', { directory: file.name }))\n\t\t\t\t\tlogger.error('', { error, absolutePath, directory: file })\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// If we've reached a file, we can upload it\n\t\t\tlogger.debug('Uploading file to ' + join(destination.path, relativePath), { file })\n\n\t\t\t// Overriding the root to avoid changing the current uploader context\n\t\t\tqueue.push(uploader.upload(relativePath, file, destination.source))\n\t\t}\n\t}\n\n\t// Pause the uploader to prevent it from starting\n\t// while we compute the queue\n\tuploader.pause()\n\n\t// Upload the files. Using '/' as the starting point\n\t// as we already adjusted the uploader destination\n\tawait uploadDirectoryContents(root, '/')\n\tuploader.start()\n\n\t// Wait for all promises to settle\n\tconst results = await Promise.allSettled(queue)\n\n\t// Check for errors\n\tconst errors = results.filter(result => result.status === 'rejected')\n\tif (errors.length > 0) {\n\t\tlogger.error('Error while uploading files', { errors })\n\t\tshowError(t('files', 'Some files could not be uploaded'))\n\t\treturn []\n\t}\n\n\tlogger.debug('Files uploaded successfully')\n\tshowSuccess(t('files', 'Files uploaded successfully'))\n\n\treturn Promise.all(queue)\n}\n\nexport const onDropInternalFiles = async (nodes: Node[], destination: Folder, contents: Node[], isCopy = false) => {\n\tconst queue = [] as Promise<void>[]\n\n\t// Check for conflicts on root elements\n\tif (await hasConflict(nodes, contents)) {\n\t\tnodes = await resolveConflict(nodes, destination, contents)\n\t}\n\n\tif (nodes.length === 0) {\n\t\tlogger.info('No files to process', { nodes })\n\t\tshowInfo(t('files', 'No files to process'))\n\t\treturn\n\t}\n\n\tfor (const node of nodes) {\n\t\tVue.set(node, 'status', NodeStatus.LOADING)\n\t\t// TODO: resolve potential conflicts prior and force overwrite\n\t\tqueue.push(handleCopyMoveNodeTo(node, destination, isCopy ? MoveCopyAction.COPY : MoveCopyAction.MOVE))\n\t}\n\n\t// Wait for all promises to settle\n\tconst results = await Promise.allSettled(queue)\n\tnodes.forEach(node => Vue.set(node, 'status', undefined))\n\n\t// Check for errors\n\tconst errors = results.filter(result => result.status === 'rejected')\n\tif (errors.length > 0) {\n\t\tlogger.error('Error while copying or moving files', { errors })\n\t\tshowError(isCopy ? t('files', 'Some files could not be copied') : t('files', 'Some files could not be moved'))\n\t\treturn\n\t}\n\n\tlogger.debug('Files copy/move successful')\n\tshowSuccess(isCopy ? t('files', 'Files copied successfully') : t('files', 'Files moved successfully'))\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { defineStore } from 'pinia'\nimport Vue from 'vue'\nimport type { DragAndDropStore, FileSource } from '../types'\n\nexport const useDragAndDropStore = defineStore('dragging', {\n\tstate: () => ({\n\t\tdragging: [],\n\t} as DragAndDropStore),\n\n\tactions: {\n\t\t/**\n\t\t * Set the selection of fileIds\n\t\t */\n\t\tset(selection = [] as FileSource[]) {\n\t\t\tVue.set(this, 'dragging', selection)\n\t\t},\n\n\t\t/**\n\t\t * Reset the selection\n\t\t */\n\t\treset() {\n\t\t\tVue.set(this, 'dragging', [])\n\t\t},\n\t},\n})\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n\tdata() {\n\t\treturn {\n\t\t\tfilesListWidth: 0,\n\t\t}\n\t},\n\n\tmounted() {\n\t\tconst fileListEl = document.querySelector('#app-content-vue')\n\t\tthis.filesListWidth = fileListEl?.clientWidth ?? 0\n\n\t\t// @ts-expect-error The resize observer is just now attached to the object\n\t\tthis.$resizeObserver = new ResizeObserver((entries) => {\n\t\t\tif (entries.length > 0 && entries[0].target === fileListEl) {\n\t\t\t\tthis.filesListWidth = entries[0].contentRect.width\n\t\t\t}\n\t\t})\n\t\t// @ts-expect-error The resize observer was attached right before to the this object\n\t\tthis.$resizeObserver.observe(fileListEl as Element)\n\t},\n\n\tbeforeDestroy() {\n\t\t// @ts-expect-error mounted must have been called before the destroy, so the resize\n\t\tthis.$resizeObserver.disconnect()\n\t},\n})\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<NcBreadcrumbs data-cy-files-content-breadcrumbs\n\t\t:aria-label=\"t('files', 'Current directory path')\"\n\t\tclass=\"files-list__breadcrumbs\"\n\t\t:class=\"{ 'files-list__breadcrumbs--with-progress': wrapUploadProgressBar }\">\n\t\t<!-- Current path sections -->\n\t\t<NcBreadcrumb v-for=\"(section, index) in sections\"\n\t\t\t:key=\"section.dir\"\n\t\t\tv-bind=\"section\"\n\t\t\tdir=\"auto\"\n\t\t\t:to=\"section.to\"\n\t\t\t:force-icon-text=\"index === 0 && filesListWidth >= 486\"\n\t\t\t:title=\"titleForSection(index, section)\"\n\t\t\t:aria-description=\"ariaForSection(section)\"\n\t\t\t@click.native=\"onClick(section.to)\"\n\t\t\t@dragover.native=\"onDragOver($event, section.dir)\"\n\t\t\t@drop=\"onDrop($event, section.dir)\">\n\t\t\t<template v-if=\"index === 0\" #icon>\n\t\t\t\t<NcIconSvgWrapper :size=\"20\"\n\t\t\t\t\t:svg=\"viewIcon\" />\n\t\t\t</template>\n\t\t</NcBreadcrumb>\n\n\t\t<!-- Forward the actions slot -->\n\t\t<template #actions>\n\t\t\t<slot name=\"actions\" />\n\t\t</template>\n\t</NcBreadcrumbs>\n</template>\n\n<script lang=\"ts\">\nimport type { Node } from '@nextcloud/files'\n\nimport { basename } from 'path'\nimport { defineComponent } from 'vue'\nimport { Permission } from '@nextcloud/files'\nimport { translate as t } from '@nextcloud/l10n'\nimport HomeSvg from '@mdi/svg/svg/home.svg?raw'\nimport NcBreadcrumb from '@nextcloud/vue/dist/Components/NcBreadcrumb.js'\nimport NcBreadcrumbs from '@nextcloud/vue/dist/Components/NcBreadcrumbs.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\n\nimport { onDropInternalFiles, dataTransferToFileTree, onDropExternalFiles } from '../services/DropService'\nimport { showError } from '@nextcloud/dialogs'\nimport { useDragAndDropStore } from '../store/dragging.ts'\nimport { useFilesStore } from '../store/files.ts'\nimport { usePathsStore } from '../store/paths.ts'\nimport { useSelectionStore } from '../store/selection.ts'\nimport { useUploaderStore } from '../store/uploader.ts'\nimport filesListWidthMixin from '../mixins/filesListWidth.ts'\nimport logger from '../logger'\nimport type { FileSource } from '../types.ts'\n\nexport default defineComponent({\n\tname: 'BreadCrumbs',\n\n\tcomponents: {\n\t\tNcBreadcrumbs,\n\t\tNcBreadcrumb,\n\t\tNcIconSvgWrapper,\n\t},\n\n\tmixins: [\n\t\tfilesListWidthMixin,\n\t],\n\n\tprops: {\n\t\tpath: {\n\t\t\ttype: String,\n\t\t\tdefault: '/',\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst draggingStore = useDragAndDropStore()\n\t\tconst filesStore = useFilesStore()\n\t\tconst pathsStore = usePathsStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\tconst uploaderStore = useUploaderStore()\n\n\t\treturn {\n\t\t\tdraggingStore,\n\t\t\tfilesStore,\n\t\t\tpathsStore,\n\t\t\tselectionStore,\n\t\t\tuploaderStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentView() {\n\t\t\treturn this.$navigation.active\n\t\t},\n\n\t\tdirs(): string[] {\n\t\t\tconst cumulativePath = (acc: string) => (value: string) => (acc += `${value}/`)\n\t\t\t// Generate a cumulative path for each path segment: ['/', '/foo', '/foo/bar', ...] etc\n\t\t\tconst paths: string[] = this.path.split('/').filter(Boolean).map(cumulativePath('/'))\n\t\t\t// Strip away trailing slash\n\t\t\treturn ['/', ...paths.map((path: string) => path.replace(/^(.+)\\/$/, '$1'))]\n\t\t},\n\n\t\tsections() {\n\t\t\treturn this.dirs.map((dir: string, index: number) => {\n\t\t\t\tconst source = this.getFileSourceFromPath(dir)\n\t\t\t\tconst node: Node | undefined = source ? this.getNodeFromSource(source) : undefined\n\t\t\t\tconst to = { ...this.$route, params: { node: node?.fileid }, query: { dir } }\n\t\t\t\treturn {\n\t\t\t\t\tdir,\n\t\t\t\t\texact: true,\n\t\t\t\t\tname: this.getDirDisplayName(dir),\n\t\t\t\t\tto,\n\t\t\t\t\t// disable drop on current directory\n\t\t\t\t\tdisableDrop: index === this.dirs.length - 1,\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\n\t\tisUploadInProgress(): boolean {\n\t\t\treturn this.uploaderStore.queue.length !== 0\n\t\t},\n\n\t\t// Hide breadcrumbs if an upload is ongoing\n\t\twrapUploadProgressBar(): boolean {\n\t\t\t// if an upload is ongoing, and on small screens / mobile, then\n\t\t\t// show the progress bar for the upload below breadcrumbs\n\t\t\treturn this.isUploadInProgress && this.filesListWidth < 512\n\t\t},\n\n\t\t// used to show the views icon for the first breadcrumb\n\t\tviewIcon(): string {\n\t\t\treturn this.currentView?.icon ?? HomeSvg\n\t\t},\n\n\t\tselectedFiles() {\n\t\t\treturn this.selectionStore.selected as FileSource[]\n\t\t},\n\n\t\tdraggingFiles() {\n\t\t\treturn this.draggingStore.dragging as FileSource[]\n\t\t},\n\t},\n\n\tmethods: {\n\t\tgetNodeFromSource(source: FileSource): Node | undefined {\n\t\t\treturn this.filesStore.getNode(source)\n\t\t},\n\t\tgetFileSourceFromPath(path: string): FileSource | undefined {\n\t\t\treturn this.pathsStore.getPath(this.currentView?.id, path)\n\t\t},\n\t\tgetDirDisplayName(path: string): string {\n\t\t\tif (path === '/') {\n\t\t\t\treturn this.$navigation?.active?.name || t('files', 'Home')\n\t\t\t}\n\n\t\t\tconst source: FileSource | undefined = this.getFileSourceFromPath(path)\n\t\t\tconst node: Node | undefined = source ? this.getNodeFromSource(source) : undefined\n\t\t\treturn node?.attributes?.displayName || basename(path)\n\t\t},\n\n\t\tonClick(to) {\n\t\t\tif (to?.query?.dir === this.$route.query.dir) {\n\t\t\t\tthis.$emit('reload')\n\t\t\t}\n\t\t},\n\n\t\tonDragOver(event: DragEvent, path: string) {\n\t\t\t// Cannot drop on the current directory\n\t\t\tif (path === this.dirs[this.dirs.length - 1]) {\n\t\t\t\tevent.dataTransfer.dropEffect = 'none'\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Handle copy/move drag and drop\n\t\t\tif (event.ctrlKey) {\n\t\t\t\tevent.dataTransfer.dropEffect = 'copy'\n\t\t\t} else {\n\t\t\t\tevent.dataTransfer.dropEffect = 'move'\n\t\t\t}\n\t\t},\n\n\t\tasync onDrop(event: DragEvent, path: string) {\n\t\t\t// skip if native drop like text drag and drop from files names\n\t\t\tif (!this.draggingFiles && !event.dataTransfer?.items?.length) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Do not stop propagation, so the main content\n\t\t\t// drop event can be triggered too and clear the\n\t\t\t// dragover state on the DragAndDropNotice component.\n\t\t\tevent.preventDefault()\n\n\t\t\t// Caching the selection\n\t\t\tconst selection = this.draggingFiles\n\t\t\tconst items = [...event.dataTransfer?.items || []] as DataTransferItem[]\n\n\t\t\t// We need to process the dataTransfer ASAP before the\n\t\t\t// browser clears it. This is why we cache the items too.\n\t\t\tconst fileTree = await dataTransferToFileTree(items)\n\n\t\t\t// We might not have the target directory fetched yet\n\t\t\tconst contents = await this.currentView?.getContents(path)\n\t\t\tconst folder = contents?.folder\n\t\t\tif (!folder) {\n\t\t\t\tshowError(this.t('files', 'Target folder does not exist any more'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst canDrop = (folder.permissions & Permission.CREATE) !== 0\n\t\t\tconst isCopy = event.ctrlKey\n\n\t\t\t// If another button is pressed, cancel it. This\n\t\t\t// allows cancelling the drag with the right click.\n\t\t\tif (!canDrop || event.button !== 0) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlogger.debug('Dropped', { event, folder, selection, fileTree })\n\n\t\t\t// Check whether we're uploading files\n\t\t\tif (fileTree.contents.length > 0) {\n\t\t\t\tawait onDropExternalFiles(fileTree, folder, contents.contents)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Else we're moving/copying files\n\t\t\tconst nodes = selection.map(source => this.filesStore.getNode(source)) as Node[]\n\t\t\tawait onDropInternalFiles(nodes, folder, contents.contents, isCopy)\n\n\t\t\t// Reset selection after we dropped the files\n\t\t\t// if the dropped files are within the selection\n\t\t\tif (selection.some(source => this.selectedFiles.includes(source))) {\n\t\t\t\tlogger.debug('Dropped selection, resetting select store...')\n\t\t\t\tthis.selectionStore.reset()\n\t\t\t}\n\t\t},\n\n\t\ttitleForSection(index, section) {\n\t\t\tif (section?.to?.query?.dir === this.$route.query.dir) {\n\t\t\t\treturn t('files', 'Reload current directory')\n\t\t\t} else if (index === 0) {\n\t\t\t\treturn t('files', 'Go to the \"{dir}\" directory', section)\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\n\t\tariaForSection(section) {\n\t\t\tif (section?.to?.query?.dir === this.$route.query.dir) {\n\t\t\t\treturn t('files', 'Reload current directory')\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.files-list__breadcrumbs {\n\t// Take as much space as possible\n\tflex: 1 1 100% !important;\n\twidth: 100%;\n\theight: 100%;\n\tmargin-block: 0;\n\tmargin-inline: 10px;\n\n\t:deep() {\n\t\ta {\n\t\t\tcursor: pointer !important;\n\t\t}\n\t}\n\n\t&--with-progress {\n\t\tflex-direction: column !important;\n\t\talign-items: flex-start !important;\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { defineStore } from 'pinia'\nimport type { ActionsMenuStore } from '../types'\n\nexport const useActionsMenuStore = defineStore('actionsmenu', {\n\tstate: () => ({\n\t\topened: null,\n\t} as ActionsMenuStore),\n})\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { defineStore } from 'pinia'\nimport { subscribe } from '@nextcloud/event-bus'\nimport type { Node } from '@nextcloud/files'\nimport type { RenamingStore } from '../types'\n\nexport const useRenamingStore = function(...args) {\n\tconst store = defineStore('renaming', {\n\t\tstate: () => ({\n\t\t\trenamingNode: undefined,\n\t\t\tnewName: '',\n\t\t} as RenamingStore),\n\t})\n\n\tconst renamingStore = store(...args)\n\n\t// Make sure we only register the listeners once\n\tif (!renamingStore._initialized) {\n\t\tsubscribe('files:node:rename', function(node: Node) {\n\t\t\trenamingStore.renamingNode = node\n\t\t\trenamingStore.newName = node.basename\n\t\t})\n\t\trenamingStore._initialized = true\n\t}\n\n\treturn renamingStore\n}\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div class=\"files-list-drag-image\">\n\t\t<span class=\"files-list-drag-image__icon\">\n\t\t\t<span ref=\"previewImg\" />\n\t\t\t<FolderIcon v-if=\"isSingleFolder\" />\n\t\t\t<FileMultipleIcon v-else />\n\t\t</span>\n\t\t<span class=\"files-list-drag-image__name\">{{ name }}</span>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport { FileType, Node, formatFileSize } from '@nextcloud/files'\nimport Vue from 'vue'\n\nimport FileMultipleIcon from 'vue-material-design-icons/FileMultiple.vue'\nimport FolderIcon from 'vue-material-design-icons/Folder.vue'\n\nimport { getSummaryFor } from '../utils/fileUtils.ts'\n\nexport default Vue.extend({\n\tname: 'DragAndDropPreview',\n\n\tcomponents: {\n\t\tFileMultipleIcon,\n\t\tFolderIcon,\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tnodes: [] as Node[],\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tisSingleNode() {\n\t\t\treturn this.nodes.length === 1\n\t\t},\n\t\tisSingleFolder() {\n\t\t\treturn this.isSingleNode\n\t\t\t\t&& this.nodes[0].type === FileType.Folder\n\t\t},\n\n\t\tname() {\n\t\t\tif (!this.size) {\n\t\t\t\treturn this.summary\n\t\t\t}\n\t\t\treturn `${this.summary} – ${this.size}`\n\t\t},\n\t\tsize() {\n\t\t\tconst totalSize = this.nodes.reduce((total, node) => total + node.size || 0, 0)\n\t\t\tconst size = parseInt(totalSize, 10) || 0\n\t\t\tif (typeof size !== 'number' || size < 0) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\treturn formatFileSize(size, true)\n\t\t},\n\t\tsummary(): string {\n\t\t\tif (this.isSingleNode) {\n\t\t\t\tconst node = this.nodes[0]\n\t\t\t\treturn node.attributes?.displayName || node.basename\n\t\t\t}\n\n\t\t\treturn getSummaryFor(this.nodes)\n\t\t},\n\t},\n\n\tmethods: {\n\t\tupdate(nodes: Node[]) {\n\t\t\tthis.nodes = nodes\n\t\t\tthis.$refs.previewImg.replaceChildren()\n\n\t\t\t// Clone icon node from the list\n\t\t\tnodes.slice(0, 3).forEach(node => {\n\t\t\t\tconst preview = document.querySelector(`[data-cy-files-list-row-fileid=\"${node.fileid}\"] .files-list__row-icon img`)\n\t\t\t\tif (preview) {\n\t\t\t\t\tconst previewElmt = this.$refs.previewImg as HTMLElement\n\t\t\t\t\tpreviewElmt.appendChild(preview.parentNode.cloneNode(true))\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tthis.$emit('loaded', this.$el)\n\t\t\t})\n\t\t},\n\t},\n})\n</script>\n\n<style lang=\"scss\">\n$size: 32px;\n$stack-shift: 6px;\n\n.files-list-drag-image {\n\tposition: absolute;\n\ttop: -9999px;\n\tleft: -9999px;\n\tdisplay: flex;\n\toverflow: hidden;\n\talign-items: center;\n\theight: 44px;\n\tpadding: 6px 12px;\n\tbackground: var(--color-main-background);\n\n\t&__icon,\n\t.files-list__row-icon {\n\t\tdisplay: flex;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\twidth: 32px;\n\t\theight: 32px;\n\t\tborder-radius: var(--border-radius);\n\t}\n\n\t&__icon {\n\t\toverflow: visible;\n\t\tmargin-right: 12px;\n\n\t\timg {\n\t\t\tmax-width: 100%;\n\t\t\tmax-height: 100%;\n\t\t}\n\n\t\t.material-design-icon {\n\t\t\tcolor: var(--color-text-maxcontrast);\n\t\t\t&.folder-icon {\n\t\t\t\tcolor: var(--color-primary-element);\n\t\t\t}\n\t\t}\n\n\t\t// Previews container\n\t\t> span {\n\t\t\tdisplay: flex;\n\n\t\t\t// Stack effect if more than one element\n\t\t\t.files-list__row-icon + .files-list__row-icon {\n\t\t\t\tmargin-top: $stack-shift;\n\t\t\t\tmargin-left: $stack-shift - $size;\n\t\t\t\t& + .files-list__row-icon {\n\t\t\t\t\tmargin-top: $stack-shift * 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we have manually clone the preview,\n\t\t\t// let's hide any fallback icons\n\t\t\t&:not(:empty) + * {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n\n\t&__name {\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t}\n}\n\n</style>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { Node } from '@nextcloud/files'\nimport DragAndDropPreview from '../components/DragAndDropPreview.vue'\nimport Vue from 'vue'\n\nconst Preview = Vue.extend(DragAndDropPreview)\nlet preview: Vue\n\nexport const getDragAndDropPreview = async (nodes: Node[]): Promise<Element> => {\n\treturn new Promise((resolve) => {\n\t\tif (!preview) {\n\t\t\tpreview = new Preview().$mount()\n\t\t\tdocument.body.appendChild(preview.$el)\n\t\t}\n\n\t\tpreview.update(nodes)\n\t\tpreview.$on('loaded', () => {\n\t\t\tresolve(preview.$el)\n\t\t\tpreview.$off('loaded')\n\t\t})\n\t})\n}\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<span />\n</template>\n\n<script lang=\"ts\">\n/**\n * This component is used to render custom\n * elements provided by an API. Vue doesn't allow\n * to directly render an HTMLElement, so we can do\n * this magic here.\n */\nexport default {\n\tname: 'CustomElementRender',\n\tprops: {\n\t\tsource: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tcurrentView: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\trender: {\n\t\t\ttype: Function,\n\t\t\trequired: true,\n\t\t},\n\t},\n\twatch: {\n\t\tsource() {\n\t\t\tthis.updateRootElement()\n\t\t},\n\t\tcurrentView() {\n\t\t\tthis.updateRootElement()\n\t\t},\n\t},\n\tmounted() {\n\t\tthis.updateRootElement()\n\t},\n\tmethods: {\n\t\tasync updateRootElement() {\n\t\t\tconst element = await this.render(this.source, this.currentView)\n\t\t\tif (element) {\n\t\t\t\tthis.$el.replaceChildren(element)\n\t\t\t} else {\n\t\t\t\tthis.$el.replaceChildren()\n\t\t\t}\n\t\t},\n\t},\n}\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<td class=\"files-list__row-actions\"\n\t\tdata-cy-files-list-row-actions>\n\t\t<!-- Render actions -->\n\t\t<CustomElementRender v-for=\"action in enabledRenderActions\"\n\t\t\t:key=\"action.id\"\n\t\t\t:class=\"'files-list__row-action-' + action.id\"\n\t\t\t:current-view=\"currentView\"\n\t\t\t:render=\"action.renderInline\"\n\t\t\t:source=\"source\"\n\t\t\tclass=\"files-list__row-action--inline\" />\n\n\t\t<!-- Menu actions -->\n\t\t<NcActions ref=\"actionsMenu\"\n\t\t\t:boundaries-element=\"getBoundariesElement\"\n\t\t\t:container=\"getBoundariesElement\"\n\t\t\t:force-name=\"true\"\n\t\t\ttype=\"tertiary\"\n\t\t\t:force-menu=\"enabledInlineActions.length === 0 /* forceMenu only if no inline actions */\"\n\t\t\t:inline=\"enabledInlineActions.length\"\n\t\t\t:open.sync=\"openedMenu\"\n\t\t\t@close=\"openedSubmenu = null\">\n\t\t\t<!-- Default actions list-->\n\t\t\t<NcActionButton v-for=\"action in enabledMenuActions\"\n\t\t\t\t:key=\"action.id\"\n\t\t\t\t:ref=\"`action-${action.id}`\"\n\t\t\t\t:class=\"{\n\t\t\t\t\t[`files-list__row-action-${action.id}`]: true,\n\t\t\t\t\t[`files-list__row-action--menu`]: isMenu(action.id)\n\t\t\t\t}\"\n\t\t\t\t:close-after-click=\"!isMenu(action.id)\"\n\t\t\t\t:data-cy-files-list-row-action=\"action.id\"\n\t\t\t\t:is-menu=\"isMenu(action.id)\"\n\t\t\t\t:title=\"action.title?.([source], currentView)\"\n\t\t\t\t@click=\"onActionClick(action)\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<NcLoadingIcon v-if=\"loading === action.id\" :size=\"18\" />\n\t\t\t\t\t<NcIconSvgWrapper v-else :svg=\"action.iconSvgInline([source], currentView)\" />\n\t\t\t\t</template>\n\t\t\t\t{{ mountType === 'shared' && action.id === 'sharing-status' ? '' : actionDisplayName(action) }}\n\t\t\t</NcActionButton>\n\n\t\t\t<!-- Submenu actions list-->\n\t\t\t<template v-if=\"openedSubmenu && enabledSubmenuActions[openedSubmenu?.id]\">\n\t\t\t\t<!-- Back to top-level button -->\n\t\t\t\t<NcActionButton class=\"files-list__row-action-back\" @click=\"onBackToMenuClick(openedSubmenu)\">\n\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t<ArrowLeftIcon />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ actionDisplayName(openedSubmenu) }}\n\t\t\t\t</NcActionButton>\n\t\t\t\t<NcActionSeparator />\n\n\t\t\t\t<!-- Submenu actions -->\n\t\t\t\t<NcActionButton v-for=\"action in enabledSubmenuActions[openedSubmenu?.id]\"\n\t\t\t\t\t:key=\"action.id\"\n\t\t\t\t\t:class=\"`files-list__row-action-${action.id}`\"\n\t\t\t\t\tclass=\"files-list__row-action--submenu\"\n\t\t\t\t\tclose-after-click\n\t\t\t\t\t:data-cy-files-list-row-action=\"action.id\"\n\t\t\t\t\t:title=\"action.title?.([source], currentView)\"\n\t\t\t\t\t@click=\"onActionClick(action)\">\n\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t<NcLoadingIcon v-if=\"loading === action.id\" :size=\"18\" />\n\t\t\t\t\t\t<NcIconSvgWrapper v-else :svg=\"action.iconSvgInline([source], currentView)\" />\n\t\t\t\t\t</template>\n\t\t\t\t\t{{ actionDisplayName(action) }}\n\t\t\t\t</NcActionButton>\n\t\t\t</template>\n\t\t</NcActions>\n\t</td>\n</template>\n\n<script lang=\"ts\">\nimport type { PropType } from 'vue'\n\nimport { DefaultType, FileAction, Node, NodeStatus, View, getFileActions } from '@nextcloud/files'\nimport { showError, showSuccess } from '@nextcloud/dialogs'\nimport { translate as t } from '@nextcloud/l10n'\n\nimport NcActionButton from '@nextcloud/vue/dist/Components/NcActionButton.js'\nimport NcActions from '@nextcloud/vue/dist/Components/NcActions.js'\nimport NcActionSeparator from '@nextcloud/vue/dist/Components/NcActionSeparator.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\nimport NcLoadingIcon from '@nextcloud/vue/dist/Components/NcLoadingIcon.js'\nimport ArrowLeftIcon from 'vue-material-design-icons/ArrowLeft.vue'\nimport Vue, { defineComponent } from 'vue'\n\nimport CustomElementRender from '../CustomElementRender.vue'\nimport logger from '../../logger.js'\n\n// The registered actions list\nconst actions = getFileActions()\n\nexport default defineComponent({\n\tname: 'FileEntryActions',\n\n\tcomponents: {\n\t\tArrowLeftIcon,\n\t\tCustomElementRender,\n\t\tNcActionButton,\n\t\tNcActions,\n\t\tNcActionSeparator,\n\t\tNcIconSvgWrapper,\n\t\tNcLoadingIcon,\n\t},\n\n\tprops: {\n\t\tfilesListWidth: {\n\t\t\ttype: Number,\n\t\t\trequired: true,\n\t\t},\n\t\tloading: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\topened: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tsource: {\n\t\t\ttype: Object as PropType<Node>,\n\t\t\trequired: true,\n\t\t},\n\t\tgridMode: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\topenedSubmenu: null as FileAction | null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentDir() {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir?.toString() || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\t\tcurrentView(): View {\n\t\t\treturn this.$navigation.active as View\n\t\t},\n\t\tisLoading() {\n\t\t\treturn this.source.status === NodeStatus.LOADING\n\t\t},\n\n\t\t// Sorted actions that are enabled for this node\n\t\tenabledActions() {\n\t\t\tif (this.source.attributes.failed) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\treturn actions\n\t\t\t\t.filter(action => !action.enabled || action.enabled([this.source], this.currentView))\n\t\t\t\t.sort((a, b) => (a.order || 0) - (b.order || 0))\n\t\t},\n\n\t\t// Enabled action that are displayed inline\n\t\tenabledInlineActions() {\n\t\t\tif (this.filesListWidth < 768 || this.gridMode) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.enabledActions.filter(action => action?.inline?.(this.source, this.currentView))\n\t\t},\n\n\t\t// Enabled action that are displayed inline with a custom render function\n\t\tenabledRenderActions() {\n\t\t\tif (this.gridMode) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.enabledActions.filter(action => typeof action.renderInline === 'function')\n\t\t},\n\n\t\t// Default actions\n\t\tenabledDefaultActions() {\n\t\t\treturn this.enabledActions.filter(action => !!action?.default)\n\t\t},\n\n\t\t// Actions shown in the menu\n\t\tenabledMenuActions() {\n\t\t\t// If we're in a submenu, only render the inline\n\t\t\t// actions before the filtered submenu\n\t\t\tif (this.openedSubmenu) {\n\t\t\t\treturn this.enabledInlineActions\n\t\t\t}\n\n\t\t\tconst actions = [\n\t\t\t\t// Showing inline first for the NcActions inline prop\n\t\t\t\t...this.enabledInlineActions,\n\t\t\t\t// Then the rest\n\t\t\t\t...this.enabledActions.filter(action => action.default !== DefaultType.HIDDEN && typeof action.renderInline !== 'function'),\n\t\t\t].filter((value, index, self) => {\n\t\t\t\t// Then we filter duplicates to prevent inline actions to be shown twice\n\t\t\t\treturn index === self.findIndex(action => action.id === value.id)\n\t\t\t})\n\n\t\t\t// Generate list of all top-level actions ids\n\t\t\tconst topActionsIds = actions.filter(action => !action.parent).map(action => action.id) as string[]\n\n\t\t\t// Filter actions that are not top-level AND have a valid parent\n\t\t\treturn actions.filter(action => !(action.parent && topActionsIds.includes(action.parent)))\n\t\t},\n\n\t\tenabledSubmenuActions() {\n\t\t\treturn this.enabledActions\n\t\t\t\t.filter(action => action.parent)\n\t\t\t\t.reduce((arr, action) => {\n\t\t\t\t\tif (!arr[action.parent!]) {\n\t\t\t\t\t\tarr[action.parent!] = []\n\t\t\t\t\t}\n\t\t\t\t\tarr[action.parent!].push(action)\n\t\t\t\t\treturn arr\n\t\t\t\t}, {} as Record<string, FileAction[]>)\n\t\t},\n\n\t\topenedMenu: {\n\t\t\tget() {\n\t\t\t\treturn this.opened\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tthis.$emit('update:opened', value)\n\t\t\t},\n\t\t},\n\n\t\t/**\n\t\t * Making this a function in case the files-list\n\t\t * reference changes in the future. That way we're\n\t\t * sure there is one at the time we call it.\n\t\t */\n\t\tgetBoundariesElement() {\n\t\t\treturn document.querySelector('.app-content > .files-list')\n\t\t},\n\n\t\tmountType() {\n\t\t\treturn this.source.attributes['mount-type']\n\t\t},\n\t},\n\n\tmethods: {\n\t\tactionDisplayName(action: FileAction) {\n\t\t\tif ((this.gridMode || (this.filesListWidth < 768 && action.inline)) && typeof action.title === 'function') {\n\t\t\t\t// if an inline action is rendered in the menu for\n\t\t\t\t// lack of space we use the title first if defined\n\t\t\t\tconst title = action.title([this.source], this.currentView)\n\t\t\t\tif (title) return title\n\t\t\t}\n\t\t\treturn action.displayName([this.source], this.currentView)\n\t\t},\n\n\t\tasync onActionClick(action, isSubmenu = false) {\n\t\t\t// Skip click on loading\n\t\t\tif (this.isLoading || this.loading !== '') {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If the action is a submenu, we open it\n\t\t\tif (this.enabledSubmenuActions[action.id]) {\n\t\t\t\tthis.openedSubmenu = action\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst displayName = action.displayName([this.source], this.currentView)\n\t\t\ttry {\n\t\t\t\t// Set the loading marker\n\t\t\t\tthis.$emit('update:loading', action.id)\n\t\t\t\tVue.set(this.source, 'status', NodeStatus.LOADING)\n\n\t\t\t\tconst success = await action.exec(this.source, this.currentView, this.currentDir)\n\n\t\t\t\t// If the action returns null, we stay silent\n\t\t\t\tif (success === null || success === undefined) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif (success) {\n\t\t\t\t\tshowSuccess(t('files', '\"{displayName}\" action executed successfully', { displayName }))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tshowError(t('files', '\"{displayName}\" action failed', { displayName }))\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error('Error while executing action', { action, e })\n\t\t\t\tshowError(t('files', '\"{displayName}\" action failed', { displayName }))\n\t\t\t} finally {\n\t\t\t\t// Reset the loading marker\n\t\t\t\tthis.$emit('update:loading', '')\n\t\t\t\tVue.set(this.source, 'status', undefined)\n\n\t\t\t\t// If that was a submenu, we just go back after the action\n\t\t\t\tif (isSubmenu) {\n\t\t\t\t\tthis.openedSubmenu = null\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\texecDefaultAction(event) {\n\t\t\tif (this.enabledDefaultActions.length > 0) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tevent.stopPropagation()\n\t\t\t\t// Execute the first default action if any\n\t\t\t\tthis.enabledDefaultActions[0].exec(this.source, this.currentView, this.currentDir)\n\t\t\t}\n\t\t},\n\n\t\tisMenu(id: string) {\n\t\t\treturn this.enabledSubmenuActions[id]?.length > 0\n\t\t},\n\n\t\tasync onBackToMenuClick(action: FileAction) {\n\t\t\tthis.openedSubmenu = null\n\t\t\t// Wait for first render\n\t\t\tawait this.$nextTick()\n\n\t\t\t// Focus the previous menu action button\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t// Focus the action button\n\t\t\t\tconst menuAction = this.$refs[`action-${action.id}`]?.[0]\n\t\t\t\tif (menuAction) {\n\t\t\t\t\tmenuAction.$el.querySelector('button')?.focus()\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style lang=\"scss\">\n// Allow right click to define the position of the menu\n// only if defined\nmain.app-content[style*=\"mouse-pos-x\"] .v-popper__popper {\n\ttransform: translate3d(var(--mouse-pos-x), var(--mouse-pos-y), 0px) !important;\n\n\t// If the menu is too close to the bottom, we move it up\n\t&[data-popper-placement=\"top\"] {\n\t\t// 34px added to align with the top of the cursor\n\t\ttransform: translate3d(var(--mouse-pos-x), calc(var(--mouse-pos-y) - 50vh + 34px), 0px) !important;\n\t}\n\t// Hide arrow if floating\n\t.v-popper__arrow-container {\n\t\tdisplay: none;\n\t}\n}\n</style>\n\n<style lang=\"scss\" scoped>\n:deep(.button-vue--icon-and-text, .files-list__row-action-sharing-status) {\n\t.button-vue__text {\n\t\tcolor: var(--color-primary-element);\n\t}\n\t.button-vue__icon {\n\t\tcolor: var(--color-primary-element);\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { ComponentPublicInstance, PropType } from 'vue'\nimport type { FileSource } from '../types.ts'\n\nimport { showError } from '@nextcloud/dialogs'\nimport { FileType, Permission, Folder, File as NcFile, NodeStatus, Node, View } from '@nextcloud/files'\nimport { translate as t } from '@nextcloud/l10n'\nimport { generateUrl } from '@nextcloud/router'\nimport { vOnClickOutside } from '@vueuse/components'\nimport { extname } from 'path'\nimport Vue, { defineComponent } from 'vue'\n\nimport { action as sidebarAction } from '../actions/sidebarAction.ts'\nimport { getDragAndDropPreview } from '../utils/dragUtils.ts'\nimport { hashCode } from '../utils/hashUtils.ts'\nimport { dataTransferToFileTree, onDropExternalFiles, onDropInternalFiles } from '../services/DropService.ts'\nimport logger from '../logger.js'\nimport FileEntryActions from '../components/FileEntry/FileEntryActions.vue'\n\nVue.directive('onClickOutside', vOnClickOutside)\n\nexport default defineComponent({\n\tprops: {\n\t\tsource: {\n\t\t\ttype: [Folder, NcFile, Node] as PropType<Node>,\n\t\t\trequired: true,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<Node[]>,\n\t\t\trequired: true,\n\t\t},\n\t\tfilesListWidth: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tloading: '',\n\t\t\tdragover: false,\n\t\t\tgridMode: false,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentView(): View {\n\t\t\treturn this.$navigation.active as View\n\t\t},\n\n\t\tcurrentDir() {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir?.toString() || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\t\tcurrentFileId() {\n\t\t\treturn this.$route.params?.fileid || this.$route.query?.fileid || null\n\t\t},\n\n\t\tfileid() {\n\t\t\treturn this.source?.fileid\n\t\t},\n\t\tuniqueId() {\n\t\t\treturn hashCode(this.source.source)\n\t\t},\n\t\tisLoading() {\n\t\t\treturn this.source.status === NodeStatus.LOADING\n\t\t},\n\n\t\textension() {\n\t\t\tif (this.source.attributes?.displayName) {\n\t\t\t\treturn extname(this.source.attributes.displayName)\n\t\t\t}\n\t\t\treturn this.source.extension || ''\n\t\t},\n\t\tdisplayName() {\n\t\t\tconst ext = this.extension\n\t\t\tconst name = String(this.source.attributes.displayName\n\t\t\t\t|| this.source.basename)\n\n\t\t\t// Strip extension from name if defined\n\t\t\treturn !ext ? name : name.slice(0, 0 - ext.length)\n\t\t},\n\n\t\tdraggingFiles() {\n\t\t\treturn this.draggingStore.dragging as FileSource[]\n\t\t},\n\t\tselectedFiles() {\n\t\t\treturn this.selectionStore.selected as FileSource[]\n\t\t},\n\t\tisSelected() {\n\t\t\treturn this.selectedFiles.includes(this.source.source)\n\t\t},\n\n\t\tisRenaming() {\n\t\t\treturn this.renamingStore.renamingNode === this.source\n\t\t},\n\t\tisRenamingSmallScreen() {\n\t\t\treturn this.isRenaming && this.filesListWidth < 512\n\t\t},\n\n\t\tisActive() {\n\t\t\treturn String(this.fileid) === String(this.currentFileId)\n\t\t},\n\n\t\tcanDrag() {\n\t\t\tif (this.isRenaming) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst canDrag = (node: Node): boolean => {\n\t\t\t\treturn (node?.permissions & Permission.UPDATE) !== 0\n\t\t\t}\n\n\t\t\t// If we're dragging a selection, we need to check all files\n\t\t\tif (this.selectedFiles.length > 0) {\n\t\t\t\tconst nodes = this.selectedFiles.map(source => this.filesStore.getNode(source)) as Node[]\n\t\t\t\treturn nodes.every(canDrag)\n\t\t\t}\n\t\t\treturn canDrag(this.source)\n\t\t},\n\n\t\tcanDrop() {\n\t\t\tif (this.source.type !== FileType.Folder) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// If the current folder is also being dragged, we can't drop it on itself\n\t\t\tif (this.draggingFiles.includes(this.source.source)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\treturn (this.source.permissions & Permission.CREATE) !== 0\n\t\t},\n\n\t\topenedMenu: {\n\t\t\tget() {\n\t\t\t\treturn this.actionsMenuStore.opened === this.uniqueId.toString()\n\t\t\t},\n\t\t\tset(opened) {\n\t\t\t\tthis.actionsMenuStore.opened = opened ? this.uniqueId.toString() : null\n\t\t\t},\n\t\t},\n\t},\n\n\twatch: {\n\t\t/**\n\t\t * When the source changes, reset the preview\n\t\t * and fetch the new one.\n\t\t */\n\t\tsource(a: Node, b: Node) {\n\t\t\tif (a.source !== b.source) {\n\t\t\t\tthis.resetState()\n\t\t\t}\n\t\t},\n\t},\n\n\tbeforeDestroy() {\n\t\tthis.resetState()\n\t},\n\n\tmethods: {\n\t\tresetState() {\n\t\t\t// Reset loading state\n\t\t\tthis.loading = ''\n\n\t\t\t// Reset the preview state\n\t\t\tthis.$refs?.preview?.reset?.()\n\n\t\t\t// Close menu\n\t\t\tthis.openedMenu = false\n\t\t},\n\n\t\t// Open the actions menu on right click\n\t\tonRightClick(event) {\n\t\t\t// If already opened, fallback to default browser\n\t\t\tif (this.openedMenu) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// The grid mode is compact enough to not care about\n\t\t\t// the actions menu mouse position\n\t\t\tif (!this.gridMode) {\n\t\t\t\t// Actions menu is contained within the app content\n\t\t\t\tconst root = this.$el?.closest('main.app-content') as HTMLElement\n\t\t\t\tconst contentRect = root.getBoundingClientRect()\n\t\t\t\t// Using Math.min/max to prevent the menu from going out of the AppContent\n\t\t\t\t// 200 = max width of the menu\n\t\t\t\troot.style.setProperty('--mouse-pos-x', Math.max(0, event.clientX - contentRect.left - 200) + 'px')\n\t\t\t\troot.style.setProperty('--mouse-pos-y', Math.max(0, event.clientY - contentRect.top) + 'px')\n\t\t\t} else {\n\t\t\t\t// Reset any right menu position potentially set\n\t\t\t\tconst root = this.$el?.closest('main.app-content') as HTMLElement\n\t\t\t\troot.style.removeProperty('--mouse-pos-x')\n\t\t\t\troot.style.removeProperty('--mouse-pos-y')\n\t\t\t}\n\n\t\t\t// If the clicked row is in the selection, open global menu\n\t\t\tconst isMoreThanOneSelected = this.selectedFiles.length > 1\n\t\t\tthis.actionsMenuStore.opened = this.isSelected && isMoreThanOneSelected ? 'global' : this.uniqueId.toString()\n\n\t\t\t// Prevent any browser defaults\n\t\t\tevent.preventDefault()\n\t\t\tevent.stopPropagation()\n\t\t},\n\n\t\texecDefaultAction(event) {\n\t\t\t// Ignore right click.\n\t\t\tif (event.button > 1) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// if ctrl+click or middle mouse button, open in new tab\n\t\t\tif (event.ctrlKey || event.metaKey || event.button === 1) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\twindow.open(generateUrl('/f/{fileId}', { fileId: this.fileid }))\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst actions = this.$refs.actions as ComponentPublicInstance<typeof FileEntryActions>\n\t\t\tactions.execDefaultAction(event)\n\t\t},\n\n\t\topenDetailsIfAvailable(event) {\n\t\t\tevent.preventDefault()\n\t\t\tevent.stopPropagation()\n\t\t\tif (sidebarAction?.enabled?.([this.source], this.currentView)) {\n\t\t\t\tsidebarAction.exec(this.source, this.currentView, this.currentDir)\n\t\t\t}\n\t\t},\n\n\t\tonDragOver(event: DragEvent) {\n\t\t\tthis.dragover = this.canDrop\n\t\t\tif (!this.canDrop) {\n\t\t\t\tevent.dataTransfer.dropEffect = 'none'\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Handle copy/move drag and drop\n\t\t\tif (event.ctrlKey) {\n\t\t\t\tevent.dataTransfer.dropEffect = 'copy'\n\t\t\t} else {\n\t\t\t\tevent.dataTransfer.dropEffect = 'move'\n\t\t\t}\n\t\t},\n\t\tonDragLeave(event: DragEvent) {\n\t\t\t// Counter bubbling, make sure we're ending the drag\n\t\t\t// only when we're leaving the current element\n\t\t\tconst currentTarget = event.currentTarget as HTMLElement\n\t\t\tif (currentTarget?.contains(event.relatedTarget as HTMLElement)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.dragover = false\n\t\t},\n\n\t\tasync onDragStart(event: DragEvent) {\n\t\t\tevent.stopPropagation()\n\t\t\tif (!this.canDrag || !this.fileid) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tevent.stopPropagation()\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlogger.debug('Drag started', { event })\n\n\t\t\t// Make sure that we're not dragging a file like the preview\n\t\t\tevent.dataTransfer?.clearData?.()\n\n\t\t\t// Reset any renaming\n\t\t\tthis.renamingStore.$reset()\n\n\t\t\t// Dragging set of files, if we're dragging a file\n\t\t\t// that is already selected, we use the entire selection\n\t\t\tif (this.selectedFiles.includes(this.source.source)) {\n\t\t\t\tthis.draggingStore.set(this.selectedFiles)\n\t\t\t} else {\n\t\t\t\tthis.draggingStore.set([this.source.source])\n\t\t\t}\n\n\t\t\tconst nodes = this.draggingStore.dragging\n\t\t\t\t.map(source => this.filesStore.getNode(source)) as Node[]\n\n\t\t\tconst image = await getDragAndDropPreview(nodes)\n\t\t\tevent.dataTransfer?.setDragImage(image, -10, -10)\n\t\t},\n\t\tonDragEnd() {\n\t\t\tthis.draggingStore.reset()\n\t\t\tthis.dragover = false\n\t\t\tlogger.debug('Drag ended')\n\t\t},\n\n\t\tasync onDrop(event: DragEvent) {\n\t\t\t// skip if native drop like text drag and drop from files names\n\t\t\tif (!this.draggingFiles && !event.dataTransfer?.items?.length) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tevent.preventDefault()\n\t\t\tevent.stopPropagation()\n\n\t\t\t// Caching the selection\n\t\t\tconst selection = this.draggingFiles\n\t\t\tconst items = [...event.dataTransfer?.items || []] as DataTransferItem[]\n\n\t\t\t// We need to process the dataTransfer ASAP before the\n\t\t\t// browser clears it. This is why we cache the items too.\n\t\t\tconst fileTree = await dataTransferToFileTree(items)\n\n\t\t\t// We might not have the target directory fetched yet\n\t\t\tconst contents = await this.currentView?.getContents(this.source.path)\n\t\t\tconst folder = contents?.folder\n\t\t\tif (!folder) {\n\t\t\t\tshowError(this.t('files', 'Target folder does not exist any more'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If another button is pressed, cancel it. This\n\t\t\t// allows cancelling the drag with the right click.\n\t\t\tif (!this.canDrop || event.button) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst isCopy = event.ctrlKey\n\t\t\tthis.dragover = false\n\n\t\t\tlogger.debug('Dropped', { event, folder, selection, fileTree })\n\n\t\t\t// Check whether we're uploading files\n\t\t\tif (fileTree.contents.length > 0) {\n\t\t\t\tawait onDropExternalFiles(fileTree, folder, contents.contents)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Else we're moving/copying files\n\t\t\tconst nodes = selection.map(source => this.filesStore.getNode(source)) as Node[]\n\t\t\tawait onDropInternalFiles(nodes, folder, contents.contents, isCopy)\n\n\t\t\t// Reset selection after we dropped the files\n\t\t\t// if the dropped files are within the selection\n\t\t\tif (selection.some(source => this.selectedFiles.includes(source))) {\n\t\t\t\tlogger.debug('Dropped selection, resetting select store...')\n\t\t\t\tthis.selectionStore.reset()\n\t\t\t}\n\t\t},\n\n\t\tt,\n\t},\n})\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { defineStore } from 'pinia'\nimport Vue from 'vue'\n\n/**\n * Observe various events and save the current\n * special keys states. Useful for checking the\n * current status of a key when executing a method.\n */\nexport const useKeyboardStore = function(...args) {\n\tconst store = defineStore('keyboard', {\n\t\tstate: () => ({\n\t\t\taltKey: false,\n\t\t\tctrlKey: false,\n\t\t\tmetaKey: false,\n\t\t\tshiftKey: false,\n\t\t}),\n\n\t\tactions: {\n\t\t\tonEvent(event: MouseEvent | KeyboardEvent) {\n\t\t\t\tif (!event) {\n\t\t\t\t\tevent = window.event as MouseEvent | KeyboardEvent\n\t\t\t\t}\n\t\t\t\tVue.set(this, 'altKey', !!event.altKey)\n\t\t\t\tVue.set(this, 'ctrlKey', !!event.ctrlKey)\n\t\t\t\tVue.set(this, 'metaKey', !!event.metaKey)\n\t\t\t\tVue.set(this, 'shiftKey', !!event.shiftKey)\n\t\t\t},\n\t\t},\n\t})\n\n\tconst keyboardStore = store(...args)\n\t// Make sure we only register the listeners once\n\tif (!keyboardStore._initialized) {\n\t\twindow.addEventListener('keydown', keyboardStore.onEvent)\n\t\twindow.addEventListener('keyup', keyboardStore.onEvent)\n\t\twindow.addEventListener('mousemove', keyboardStore.onEvent)\n\n\t\tkeyboardStore._initialized = true\n\t}\n\n\treturn keyboardStore\n}\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<td class=\"files-list__row-checkbox\"\n\t\t@keyup.esc.exact=\"resetSelection\">\n\t\t<NcLoadingIcon v-if=\"isLoading\" />\n\t\t<NcCheckboxRadioSwitch v-else\n\t\t\t:aria-label=\"ariaLabel\"\n\t\t\t:checked=\"isSelected\"\n\t\t\t@update:checked=\"onSelectionChange\" />\n\t</td>\n</template>\n\n<script lang=\"ts\">\nimport { Node, FileType } from '@nextcloud/files'\nimport { translate as t } from '@nextcloud/l10n'\nimport { type PropType, defineComponent } from 'vue'\n\nimport NcCheckboxRadioSwitch from '@nextcloud/vue/dist/Components/NcCheckboxRadioSwitch.js'\nimport NcLoadingIcon from '@nextcloud/vue/dist/Components/NcLoadingIcon.js'\n\nimport { useKeyboardStore } from '../../store/keyboard.ts'\nimport { useSelectionStore } from '../../store/selection.ts'\nimport logger from '../../logger.js'\nimport type { FileSource } from '../../types.ts'\n\nexport default defineComponent({\n\tname: 'FileEntryCheckbox',\n\n\tcomponents: {\n\t\tNcCheckboxRadioSwitch,\n\t\tNcLoadingIcon,\n\t},\n\n\tprops: {\n\t\tfileid: {\n\t\t\ttype: Number,\n\t\t\trequired: true,\n\t\t},\n\t\tisLoading: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<Node[]>,\n\t\t\trequired: true,\n\t\t},\n\t\tsource: {\n\t\t\ttype: Object as PropType<Node>,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst selectionStore = useSelectionStore()\n\t\tconst keyboardStore = useKeyboardStore()\n\t\treturn {\n\t\t\tkeyboardStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tselectedFiles() {\n\t\t\treturn this.selectionStore.selected\n\t\t},\n\t\tisSelected() {\n\t\t\treturn this.selectedFiles.includes(this.source.source)\n\t\t},\n\t\tindex() {\n\t\t\treturn this.nodes.findIndex((node: Node) => node.source === this.source.source)\n\t\t},\n\t\tisFile() {\n\t\t\treturn this.source.type === FileType.File\n\t\t},\n\t\tariaLabel() {\n\t\t\treturn this.isFile\n\t\t\t\t? t('files', 'Toggle selection for file \"{displayName}\"', { displayName: this.source.basename })\n\t\t\t\t: t('files', 'Toggle selection for folder \"{displayName}\"', { displayName: this.source.basename })\n\t\t},\n\t},\n\n\tmethods: {\n\t\tonSelectionChange(selected: boolean) {\n\t\t\tconst newSelectedIndex = this.index\n\t\t\tconst lastSelectedIndex = this.selectionStore.lastSelectedIndex\n\n\t\t\t// Get the last selected and select all files in between\n\t\t\tif (this.keyboardStore?.shiftKey && lastSelectedIndex !== null) {\n\t\t\t\tconst isAlreadySelected = this.selectedFiles.includes(this.source.source)\n\n\t\t\t\tconst start = Math.min(newSelectedIndex, lastSelectedIndex)\n\t\t\t\tconst end = Math.max(lastSelectedIndex, newSelectedIndex)\n\n\t\t\t\tconst lastSelection = this.selectionStore.lastSelection\n\t\t\t\tconst filesToSelect = this.nodes\n\t\t\t\t\t.map(file => file.source)\n\t\t\t\t\t.slice(start, end + 1)\n\t\t\t\t\t.filter(Boolean) as FileSource[]\n\n\t\t\t\t// If already selected, update the new selection _without_ the current file\n\t\t\t\tconst selection = [...lastSelection, ...filesToSelect]\n\t\t\t\t\t.filter(source => !isAlreadySelected || source !== this.source.source)\n\n\t\t\t\tlogger.debug('Shift key pressed, selecting all files in between', { start, end, filesToSelect, isAlreadySelected })\n\t\t\t\t// Keep previous lastSelectedIndex to be use for further shift selections\n\t\t\t\tthis.selectionStore.set(selection)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst selection = selected\n\t\t\t\t? [...this.selectedFiles, this.source.source]\n\t\t\t\t: this.selectedFiles.filter(source => source !== this.source.source)\n\n\t\t\tlogger.debug('Updating selection', { selection })\n\t\t\tthis.selectionStore.set(selection)\n\t\t\tthis.selectionStore.setLastIndex(newSelectedIndex)\n\t\t},\n\n\t\tresetSelection() {\n\t\t\tthis.selectionStore.reset()\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<!-- Rename input -->\n\t<form v-if=\"isRenaming\"\n\t\tv-on-click-outside=\"onRename\"\n\t\t:aria-label=\"t('files', 'Rename file')\"\n\t\tclass=\"files-list__row-rename\"\n\t\t@submit.prevent.stop=\"onRename\">\n\t\t<NcTextField ref=\"renameInput\"\n\t\t\t:label=\"renameLabel\"\n\t\t\t:autofocus=\"true\"\n\t\t\t:minlength=\"1\"\n\t\t\t:required=\"true\"\n\t\t\t:value.sync=\"newName\"\n\t\t\tenterkeyhint=\"done\"\n\t\t\t@keyup=\"checkInputValidity\"\n\t\t\t@keyup.esc=\"stopRenaming\" />\n\t</form>\n\n\t<component :is=\"linkTo.is\"\n\t\tv-else\n\t\tref=\"basename\"\n\t\t:aria-hidden=\"isRenaming\"\n\t\tclass=\"files-list__row-name-link\"\n\t\tdata-cy-files-list-row-name-link\n\t\tv-bind=\"linkTo.params\">\n\t\t<!-- File name -->\n\t\t<span class=\"files-list__row-name-text\">\n\t\t\t<!-- Keep the displayName stuck to the extension to avoid whitespace rendering issues-->\n\t\t\t<span class=\"files-list__row-name-\" v-text=\"displayName\" />\n\t\t\t<span class=\"files-list__row-name-ext\" v-text=\"extension\" />\n\t\t</span>\n\t</component>\n</template>\n\n<script lang=\"ts\">\nimport type { Node, View } from '@nextcloud/files'\nimport type { PropType } from 'vue'\n\nimport { showError, showSuccess } from '@nextcloud/dialogs'\nimport { emit } from '@nextcloud/event-bus'\nimport { FileType, NodeStatus, Permission } from '@nextcloud/files'\nimport { loadState } from '@nextcloud/initial-state'\nimport { translate as t } from '@nextcloud/l10n'\nimport axios from '@nextcloud/axios'\nimport { isAxiosError } from 'axios'\nimport Vue, { defineComponent } from 'vue'\n\nimport NcTextField from '@nextcloud/vue/dist/Components/NcTextField.js'\n\nimport { useRenamingStore } from '../../store/renaming.ts'\nimport logger from '../../logger.js'\n\nconst forbiddenCharacters = loadState<string[]>('files', 'forbiddenCharacters', [])\n\nexport default defineComponent({\n\tname: 'FileEntryName',\n\n\tcomponents: {\n\t\tNcTextField,\n\t},\n\n\tprops: {\n\t\tdisplayName: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\textension: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tfilesListWidth: {\n\t\t\ttype: Number,\n\t\t\trequired: true,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<Node[]>,\n\t\t\trequired: true,\n\t\t},\n\t\tsource: {\n\t\t\ttype: Object as PropType<Node>,\n\t\t\trequired: true,\n\t\t},\n\t\tgridMode: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst renamingStore = useRenamingStore()\n\t\treturn {\n\t\t\trenamingStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentView(): View {\n\t\t\treturn this.$navigation.active as View\n\t\t},\n\n\t\tisRenaming() {\n\t\t\treturn this.renamingStore.renamingNode === this.source\n\t\t},\n\t\tisRenamingSmallScreen() {\n\t\t\treturn this.isRenaming && this.filesListWidth < 512\n\t\t},\n\t\tnewName: {\n\t\t\tget() {\n\t\t\t\treturn this.renamingStore.newName\n\t\t\t},\n\t\t\tset(newName) {\n\t\t\t\tthis.renamingStore.newName = newName\n\t\t\t},\n\t\t},\n\n\t\trenameLabel() {\n\t\t\tconst matchLabel: Record<FileType, string> = {\n\t\t\t\t[FileType.File]: t('files', 'File name'),\n\t\t\t\t[FileType.Folder]: t('files', 'Folder name'),\n\t\t\t}\n\t\t\treturn matchLabel[this.source.type]\n\t\t},\n\n\t\tlinkTo() {\n\t\t\tif (this.source.attributes.failed) {\n\t\t\t\treturn {\n\t\t\t\t\tis: 'span',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttitle: t('files', 'This node is unavailable'),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst enabledDefaultActions = this.$parent?.$refs?.actions?.enabledDefaultActions\n\t\t\tif (enabledDefaultActions?.length > 0) {\n\t\t\t\tconst action = enabledDefaultActions[0]\n\t\t\t\tconst displayName = action.displayName([this.source], this.currentView)\n\t\t\t\treturn {\n\t\t\t\t\tis: 'a',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttitle: displayName,\n\t\t\t\t\t\trole: 'button',\n\t\t\t\t\t\ttabindex: '0',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.source?.permissions & Permission.READ) {\n\t\t\t\treturn {\n\t\t\t\t\tis: 'a',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tdownload: this.source.basename,\n\t\t\t\t\t\thref: this.source.source,\n\t\t\t\t\t\ttitle: t('files', 'Download file {name}', { name: this.displayName }),\n\t\t\t\t\t\ttabindex: '0',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tis: 'span',\n\t\t\t}\n\t\t},\n\t},\n\n\twatch: {\n\t\t/**\n\t\t * If renaming starts, select the file name\n\t\t * in the input, without the extension.\n\t\t * @param renaming\n\t\t */\n\t\tisRenaming: {\n\t\t\timmediate: true,\n\t\t\thandler(renaming: boolean) {\n\t\t\t\tif (renaming) {\n\t\t\t\t\tthis.startRenaming()\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Check if the file name is valid and update the\n\t\t * input validity using browser's native validation.\n\t\t * @param event the keyup event\n\t\t */\n\t\tcheckInputValidity(event: KeyboardEvent) {\n\t\t\tconst input = event.target as HTMLInputElement\n\t\t\tconst newName = this.newName.trim?.() || ''\n\t\t\tlogger.debug('Checking input validity', { newName })\n\t\t\ttry {\n\t\t\t\tthis.isFileNameValid(newName)\n\t\t\t\tinput.setCustomValidity('')\n\t\t\t\tinput.title = ''\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tinput.setCustomValidity(e.message)\n\t\t\t\t\tinput.title = e.message\n\t\t\t\t} else {\n\t\t\t\t\tinput.setCustomValidity(t('files', 'Invalid file name'))\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tinput.reportValidity()\n\t\t\t}\n\t\t},\n\n\t\tisFileNameValid(name: string) {\n\t\t\tconst trimmedName = name.trim()\n\t\t\tif (trimmedName === '.' || trimmedName === '..') {\n\t\t\t\tthrow new Error(t('files', '\"{name}\" is an invalid file name.', { name }))\n\t\t\t} else if (trimmedName.length === 0) {\n\t\t\t\tthrow new Error(t('files', 'File name cannot be empty.'))\n\t\t\t} else if (trimmedName.indexOf('/') !== -1) {\n\t\t\t\tthrow new Error(t('files', '\"/\" is not allowed inside a file name.'))\n\t\t\t} else if (trimmedName.match(window.OC.config.blacklist_files_regex)) {\n\t\t\t\tthrow new Error(t('files', '\"{name}\" is not an allowed filetype.', { name }))\n\t\t\t} else if (this.checkIfNodeExists(name)) {\n\t\t\t\tthrow new Error(t('files', '{newName} already exists.', { newName: name }))\n\t\t\t}\n\n\t\t\tconst char = forbiddenCharacters.find((char) => trimmedName.includes(char))\n\t\t\tif (char) {\n\t\t\t\tthrow new Error(t('files', '\"{char}\" is not allowed inside a file name.', { char }))\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\n\t\tcheckIfNodeExists(name: string) {\n\t\t\treturn this.nodes.find(node => node.basename === name && node !== this.source)\n\t\t},\n\n\t\tstartRenaming() {\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t// Using split to get the true string length\n\t\t\t\tconst extLength = (this.source.extension || '').split('').length\n\t\t\t\tconst length = this.source.basename.split('').length - extLength\n\t\t\t\tconst input = this.$refs.renameInput?.$refs?.inputField?.$refs?.input\n\t\t\t\tif (!input) {\n\t\t\t\t\tlogger.error('Could not find the rename input')\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinput.setSelectionRange(0, length)\n\t\t\t\tinput.focus()\n\n\t\t\t\t// Trigger a keyup event to update the input validity\n\t\t\t\tinput.dispatchEvent(new Event('keyup'))\n\t\t\t})\n\t\t},\n\t\tstopRenaming() {\n\t\t\tif (!this.isRenaming) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Reset the renaming store\n\t\t\tthis.renamingStore.$reset()\n\t\t},\n\n\t\t// Rename and move the file\n\t\tasync onRename() {\n\t\t\tconst oldName = this.source.basename\n\t\t\tconst oldEncodedSource = this.source.encodedSource\n\t\t\tconst newName = this.newName.trim?.() || ''\n\t\t\tif (newName === '') {\n\t\t\t\tshowError(t('files', 'Name cannot be empty'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (oldName === newName) {\n\t\t\t\tthis.stopRenaming()\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Checking if already exists\n\t\t\tif (this.checkIfNodeExists(newName)) {\n\t\t\t\tshowError(t('files', 'Another entry with the same name already exists'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Set loading state\n\t\t\tVue.set(this.source, 'status', NodeStatus.LOADING)\n\n\t\t\t// Update node\n\t\t\tthis.source.rename(newName)\n\n\t\t\tlogger.debug('Moving file to', { destination: this.source.encodedSource, oldEncodedSource })\n\t\t\ttry {\n\t\t\t\tawait axios({\n\t\t\t\t\tmethod: 'MOVE',\n\t\t\t\t\turl: oldEncodedSource,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tDestination: this.source.encodedSource,\n\t\t\t\t\t\tOverwrite: 'F',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// Success 🎉\n\t\t\t\temit('files:node:updated', this.source)\n\t\t\t\temit('files:node:renamed', this.source)\n\t\t\t\tshowSuccess(t('files', 'Renamed \"{oldName}\" to \"{newName}\"', { oldName, newName }))\n\n\t\t\t\t// Reset the renaming store\n\t\t\t\tthis.stopRenaming()\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.$refs.basename?.focus()\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Error while renaming file', { error })\n\t\t\t\tthis.source.rename(oldName)\n\t\t\t\tthis.$refs.renameInput?.focus()\n\n\t\t\t\tif (isAxiosError(error)) {\n\t\t\t\t\t// TODO: 409 means current folder does not exist, redirect ?\n\t\t\t\t\tif (error?.response?.status === 404) {\n\t\t\t\t\t\tshowError(t('files', 'Could not rename \"{oldName}\", it does not exist any more', { oldName }))\n\t\t\t\t\t\treturn\n\t\t\t\t\t} else if (error?.response?.status === 412) {\n\t\t\t\t\t\tshowError(t('files', 'The name \"{newName}\" is already used in the folder \"{dir}\". Please choose a different name.', { newName, dir: this.currentDir }))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Unknown error\n\t\t\t\tshowError(t('files', 'Could not rename \"{oldName}\"', { oldName }))\n\t\t\t} finally {\n\t\t\t\tVue.set(this.source, 'status', undefined)\n\t\t\t}\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n","<!--\n - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n -->\n<template>\n\t<span :aria-hidden=\"!title\"\n\t\t:aria-label=\"title\"\n\t\tclass=\"material-design-icon collectives-icon\"\n\t\trole=\"img\"\n\t\tv-bind=\"$attrs\"\n\t\t@click=\"$emit('click', $event)\">\n\t\t<svg :fill=\"fillColor\"\n\t\t\tclass=\"material-design-icon__svg\"\n\t\t\t:width=\"size\"\n\t\t\t:height=\"size\"\n\t\t\tviewBox=\"0 0 16 16\">\n\t\t\t<path d=\"M2.9,8.8c0-1.2,0.4-2.4,1.2-3.3L0.3,6c-0.2,0-0.3,0.3-0.1,0.4l2.7,2.6C2.9,9,2.9,8.9,2.9,8.8z\" />\n\t\t\t<path d=\"M8,3.7c0.7,0,1.3,0.1,1.9,0.4L8.2,0.6c-0.1-0.2-0.3-0.2-0.4,0L6.1,4C6.7,3.8,7.3,3.7,8,3.7z\" />\n\t\t\t<path d=\"M3.7,11.5L3,15.2c0,0.2,0.2,0.4,0.4,0.3l3.3-1.7C5.4,13.4,4.4,12.6,3.7,11.5z\" />\n\t\t\t<path d=\"M15.7,6l-3.7-0.5c0.7,0.9,1.2,2,1.2,3.3c0,0.1,0,0.2,0,0.3l2.7-2.6C15.9,6.3,15.9,6.1,15.7,6z\" />\n\t\t\t<path d=\"M12.3,11.5c-0.7,1.1-1.8,1.9-3,2.2l3.3,1.7c0.2,0.1,0.4-0.1,0.4-0.3L12.3,11.5z\" />\n\t\t\t<path d=\"M9.6,10.1c-0.4,0.5-1,0.8-1.6,0.8c-1.1,0-2-0.9-2.1-2C5.9,7.7,6.8,6.7,8,6.7c0.6,0,1.1,0.3,1.5,0.7 c0.1,0.1,0.1,0.1,0.2,0.1h1.4c0.2,0,0.4-0.2,0.3-0.5c-0.7-1.3-2.1-2.2-3.8-2.1C5.8,5,4.3,6.6,4.1,8.5C4,10.8,5.8,12.7,8,12.7 c1.6,0,2.9-0.9,3.5-2.3c0.1-0.2-0.1-0.4-0.3-0.4H9.9C9.8,10,9.7,10,9.6,10.1z\" />\n\t\t</svg>\n\t</span>\n</template>\n\n<script>\nexport default {\n\tname: 'CollectivesIcon',\n\tprops: {\n\t\ttitle: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t\tfillColor: {\n\t\t\ttype: String,\n\t\t\tdefault: 'currentColor',\n\t\t},\n\t\tsize: {\n\t\t\ttype: Number,\n\t\t\tdefault: 24,\n\t\t},\n\t},\n}\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcIconSvgWrapper class=\"favorite-marker-icon\" :name=\"t('files', 'Favorite')\" :svg=\"StarSvg\" />\n</template>\n\n<script lang=\"ts\">\nimport { translate as t } from '@nextcloud/l10n'\nimport { defineComponent } from 'vue'\n\nimport StarSvg from '@mdi/svg/svg/star.svg?raw'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\n\n/**\n * A favorite icon to be used for overlaying favorite entries like the file preview / icon\n * It has a stroke around the star icon to ensure enough contrast for accessibility.\n *\n * If the background has a hover state you might want to also apply it to the stroke like this:\n * ```scss\n * .parent:hover :deep(.favorite-marker-icon svg path) {\n *      stroke: var(--color-background-hover);\n * }\n * ```\n */\nexport default defineComponent({\n\tname: 'FavoriteIcon',\n\tcomponents: {\n\t\tNcIconSvgWrapper,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tStarSvg,\n\t\t}\n\t},\n\tasync mounted() {\n\t\tawait this.$nextTick()\n\t\t// MDI default viewBox is \"0 0 24 24\" but we add a stroke of 10px so we must adjust it\n\t\tconst el = this.$el.querySelector('svg')\n\t\tel?.setAttribute?.('viewBox', '-4 -4 30 30')\n\t},\n\tmethods: {\n\t\tt,\n\t},\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.favorite-marker-icon {\n\tcolor: var(--color-favorite);\n\t// Override NcIconSvgWrapper defaults (clickable area)\n\tmin-width: unset !important;\n    min-height: unset !important;\n\n\t:deep() {\n\t\tsvg {\n\t\t\t// We added a stroke for a11y so we must increase the size to include the stroke\n\t\t\twidth: 26px !important;\n\t\t\theight: 26px !important;\n\n\t\t\t// Override NcIconSvgWrapper defaults of 20px\n\t\t\tmax-width: unset !important;\n\t\t\tmax-height: unset !important;\n\n\t\t\t// Sow a border around the icon for better contrast\n\t\t\tpath {\n\t\t\t\tstroke: var(--color-main-background);\n\t\t\t\tstroke-width: 8px;\n\t\t\t\tstroke-linejoin: round;\n\t\t\t\tpaint-order: stroke;\n\t\t\t}\n\t\t}\n\t}\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<span class=\"files-list__row-icon\">\n\t\t<template v-if=\"source.type === 'folder'\">\n\t\t\t<FolderOpenIcon v-if=\"dragover\" v-once />\n\t\t\t<template v-else>\n\t\t\t\t<FolderIcon v-once />\n\t\t\t\t<OverlayIcon :is=\"folderOverlay\"\n\t\t\t\t\tv-if=\"folderOverlay\"\n\t\t\t\t\tclass=\"files-list__row-icon-overlay\" />\n\t\t\t</template>\n\t\t</template>\n\n\t\t<!-- Decorative image, should not be aria documented -->\n\t\t<img v-else-if=\"previewUrl && backgroundFailed !== true\"\n\t\t\tref=\"previewImg\"\n\t\t\talt=\"\"\n\t\t\tclass=\"files-list__row-icon-preview\"\n\t\t\t:class=\"{'files-list__row-icon-preview--loaded': backgroundFailed === false}\"\n\t\t\tloading=\"lazy\"\n\t\t\t:src=\"previewUrl\"\n\t\t\t@error=\"onBackgroundError\"\n\t\t\t@load=\"backgroundFailed = false\">\n\n\t\t<FileIcon v-else v-once />\n\n\t\t<!-- Favorite icon -->\n\t\t<span v-if=\"isFavorite\" class=\"files-list__row-icon-favorite\">\n\t\t\t<FavoriteIcon v-once />\n\t\t</span>\n\n\t\t<OverlayIcon :is=\"fileOverlay\"\n\t\t\tv-if=\"fileOverlay\"\n\t\t\tclass=\"files-list__row-icon-overlay files-list__row-icon-overlay--file\" />\n\t</span>\n</template>\n\n<script lang=\"ts\">\nimport type { PropType } from 'vue'\nimport type { UserConfig } from '../../types.ts'\n\nimport { Node, FileType } from '@nextcloud/files'\nimport { generateUrl } from '@nextcloud/router'\nimport { translate as t } from '@nextcloud/l10n'\nimport { Type as ShareType } from '@nextcloud/sharing'\n\nimport Vue from 'vue'\nimport AccountGroupIcon from 'vue-material-design-icons/AccountGroup.vue'\nimport AccountPlusIcon from 'vue-material-design-icons/AccountPlus.vue'\nimport FileIcon from 'vue-material-design-icons/File.vue'\nimport FolderIcon from 'vue-material-design-icons/Folder.vue'\nimport FolderOpenIcon from 'vue-material-design-icons/FolderOpen.vue'\nimport KeyIcon from 'vue-material-design-icons/Key.vue'\nimport LinkIcon from 'vue-material-design-icons/Link.vue'\nimport NetworkIcon from 'vue-material-design-icons/Network.vue'\nimport TagIcon from 'vue-material-design-icons/Tag.vue'\nimport PlayCircleIcon from 'vue-material-design-icons/PlayCircle.vue'\n\nimport CollectivesIcon from './CollectivesIcon.vue'\nimport FavoriteIcon from './FavoriteIcon.vue'\n\nimport { isLivePhoto } from '../../services/LivePhotos'\nimport { useUserConfigStore } from '../../store/userconfig.ts'\n\nexport default Vue.extend({\n\tname: 'FileEntryPreview',\n\n\tcomponents: {\n\t\tAccountGroupIcon,\n\t\tAccountPlusIcon,\n\t\tCollectivesIcon,\n\t\tFavoriteIcon,\n\t\tFileIcon,\n\t\tFolderIcon,\n\t\tFolderOpenIcon,\n\t\tKeyIcon,\n\t\tLinkIcon,\n\t\tNetworkIcon,\n\t\tTagIcon,\n\t},\n\n\tprops: {\n\t\tsource: {\n\t\t\ttype: Object as PropType<Node>,\n\t\t\trequired: true,\n\t\t},\n\t\tdragover: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tgridMode: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst userConfigStore = useUserConfigStore()\n\t\treturn {\n\t\t\tuserConfigStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tbackgroundFailed: undefined as boolean | undefined,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tfileid() {\n\t\t\treturn this.source?.fileid?.toString?.()\n\t\t},\n\t\tisFavorite(): boolean {\n\t\t\treturn this.source.attributes.favorite === 1\n\t\t},\n\n\t\tuserConfig(): UserConfig {\n\t\t\treturn this.userConfigStore.userConfig\n\t\t},\n\t\tcropPreviews(): boolean {\n\t\t\treturn this.userConfig.crop_image_previews === true\n\t\t},\n\n\t\tpreviewUrl() {\n\t\t\tif (this.source.type === FileType.Folder) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\tif (this.backgroundFailed === true) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst previewUrl = this.source.attributes.previewUrl\n\t\t\t\t\t|| generateUrl('/core/preview?fileId={fileid}', {\n\t\t\t\t\t\tfileid: this.fileid,\n\t\t\t\t\t})\n\t\t\t\tconst url = new URL(window.location.origin + previewUrl)\n\n\t\t\t\t// Request tiny previews\n\t\t\t\turl.searchParams.set('x', this.gridMode ? '128' : '32')\n\t\t\t\turl.searchParams.set('y', this.gridMode ? '128' : '32')\n\t\t\t\turl.searchParams.set('mimeFallback', 'true')\n\n\t\t\t\t// Etag to force refresh preview on change\n\t\t\t\tconst etag = this.source?.attributes?.etag || ''\n\t\t\t\turl.searchParams.set('v', etag.slice(0, 6))\n\n\t\t\t\t// Handle cropping\n\t\t\t\turl.searchParams.set('a', this.cropPreviews === true ? '0' : '1')\n\t\t\t\treturn url.href\n\t\t\t} catch (e) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\n\t\tfileOverlay() {\n\t\t\tif (isLivePhoto(this.source)) {\n\t\t\t\treturn PlayCircleIcon\n\t\t\t}\n\n\t\t\treturn null\n\t\t},\n\n\t\tfolderOverlay() {\n\t\t\tif (this.source.type !== FileType.Folder) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\t// Encrypted folders\n\t\t\tif (this.source?.attributes?.['is-encrypted'] === 1) {\n\t\t\t\treturn KeyIcon\n\t\t\t}\n\n\t\t\t// System tags\n\t\t\tif (this.source?.attributes?.['is-tag']) {\n\t\t\t\treturn TagIcon\n\t\t\t}\n\n\t\t\t// Link and mail shared folders\n\t\t\tconst shareTypes = Object.values(this.source?.attributes?.['share-types'] || {}).flat() as number[]\n\t\t\tif (shareTypes.some(type => type === ShareType.SHARE_TYPE_LINK || type === ShareType.SHARE_TYPE_EMAIL)) {\n\t\t\t\treturn LinkIcon\n\t\t\t}\n\n\t\t\t// Shared folders\n\t\t\tif (shareTypes.length > 0) {\n\t\t\t\treturn AccountPlusIcon\n\t\t\t}\n\n\t\t\tswitch (this.source?.attributes?.['mount-type']) {\n\t\t\tcase 'external':\n\t\t\tcase 'external-session':\n\t\t\t\treturn NetworkIcon\n\t\t\tcase 'group':\n\t\t\t\treturn AccountGroupIcon\n\t\t\tcase 'collective':\n\t\t\t\treturn CollectivesIcon\n\t\t\t}\n\n\t\t\treturn null\n\t\t},\n\t},\n\n\tmethods: {\n\t\t// Called from FileEntry\n\t\treset() {\n\t\t\t// Reset background state to cancel any ongoing requests\n\t\t\tthis.backgroundFailed = undefined\n\t\t\tif (this.$refs.previewImg) {\n\t\t\t\tthis.$refs.previewImg.src = ''\n\t\t\t}\n\t\t},\n\n\t\tonBackgroundError(event) {\n\t\t\t// Do not fail if we just reset the background\n\t\t\tif (event.target?.src === '') {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.backgroundFailed = true\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<tr :class=\"{\n\t\t\t'files-list__row--dragover': dragover,\n\t\t\t'files-list__row--loading': isLoading,\n\t\t\t'files-list__row--active': isActive,\n\t\t}\"\n\t\tdata-cy-files-list-row\n\t\t:data-cy-files-list-row-fileid=\"fileid\"\n\t\t:data-cy-files-list-row-name=\"source.basename\"\n\t\t:draggable=\"canDrag\"\n\t\tclass=\"files-list__row\"\n\t\tv-on=\"rowListeners\">\n\t\t<!-- Failed indicator -->\n\t\t<span v-if=\"source.attributes.failed\" class=\"files-list__row--failed\" />\n\n\t\t<!-- Checkbox -->\n\t\t<FileEntryCheckbox :fileid=\"fileid\"\n\t\t\t:is-loading=\"isLoading\"\n\t\t\t:nodes=\"nodes\"\n\t\t\t:source=\"source\" />\n\n\t\t<!-- Link to file -->\n\t\t<td class=\"files-list__row-name\" data-cy-files-list-row-name>\n\t\t\t<!-- Icon or preview -->\n\t\t\t<FileEntryPreview ref=\"preview\"\n\t\t\t\t:source=\"source\"\n\t\t\t\t:dragover=\"dragover\"\n\t\t\t\t@auxclick.native=\"execDefaultAction\"\n\t\t\t\t@click.native=\"execDefaultAction\" />\n\n\t\t\t<FileEntryName ref=\"name\"\n\t\t\t\t:display-name=\"displayName\"\n\t\t\t\t:extension=\"extension\"\n\t\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t\t:nodes=\"nodes\"\n\t\t\t\t:source=\"source\"\n\t\t\t\t@auxclick.native=\"execDefaultAction\"\n\t\t\t\t@click.native=\"execDefaultAction\" />\n\t\t</td>\n\n\t\t<!-- Actions -->\n\t\t<FileEntryActions v-show=\"!isRenamingSmallScreen\"\n\t\t\tref=\"actions\"\n\t\t\t:class=\"`files-list__row-actions-${uniqueId}`\"\n\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t:loading.sync=\"loading\"\n\t\t\t:opened.sync=\"openedMenu\"\n\t\t\t:source=\"source\" />\n\n\t\t<!-- Size -->\n\t\t<td v-if=\"!compact && isSizeAvailable\"\n\t\t\t:style=\"sizeOpacity\"\n\t\t\tclass=\"files-list__row-size\"\n\t\t\tdata-cy-files-list-row-size\n\t\t\t@click=\"openDetailsIfAvailable\">\n\t\t\t<span>{{ size }}</span>\n\t\t</td>\n\n\t\t<!-- Mtime -->\n\t\t<td v-if=\"!compact && isMtimeAvailable\"\n\t\t\t:style=\"mtimeOpacity\"\n\t\t\tclass=\"files-list__row-mtime\"\n\t\t\tdata-cy-files-list-row-mtime\n\t\t\t@click=\"openDetailsIfAvailable\">\n\t\t\t<NcDateTime v-if=\"source.mtime\" :timestamp=\"source.mtime\" :ignore-seconds=\"true\" />\n\t\t</td>\n\n\t\t<!-- View columns -->\n\t\t<td v-for=\"column in columns\"\n\t\t\t:key=\"column.id\"\n\t\t\t:class=\"`files-list__row-${currentView?.id}-${column.id}`\"\n\t\t\tclass=\"files-list__row-column-custom\"\n\t\t\t:data-cy-files-list-row-column-custom=\"column.id\"\n\t\t\t@click=\"openDetailsIfAvailable\">\n\t\t\t<CustomElementRender :current-view=\"currentView\"\n\t\t\t\t:render=\"column.render\"\n\t\t\t\t:source=\"source\" />\n\t\t</td>\n\t</tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { Permission, formatFileSize } from '@nextcloud/files'\nimport moment from '@nextcloud/moment'\n\nimport { useActionsMenuStore } from '../store/actionsmenu.ts'\nimport { useDragAndDropStore } from '../store/dragging.ts'\nimport { useFilesStore } from '../store/files.ts'\nimport { useRenamingStore } from '../store/renaming.ts'\nimport { useSelectionStore } from '../store/selection.ts'\n\nimport FileEntryMixin from './FileEntryMixin.ts'\nimport NcDateTime from '@nextcloud/vue/dist/Components/NcDateTime.js'\nimport CustomElementRender from './CustomElementRender.vue'\nimport FileEntryActions from './FileEntry/FileEntryActions.vue'\nimport FileEntryCheckbox from './FileEntry/FileEntryCheckbox.vue'\nimport FileEntryName from './FileEntry/FileEntryName.vue'\nimport FileEntryPreview from './FileEntry/FileEntryPreview.vue'\n\nexport default defineComponent({\n\tname: 'FileEntry',\n\n\tcomponents: {\n\t\tCustomElementRender,\n\t\tFileEntryActions,\n\t\tFileEntryCheckbox,\n\t\tFileEntryName,\n\t\tFileEntryPreview,\n\t\tNcDateTime,\n\t},\n\n\tmixins: [\n\t\tFileEntryMixin,\n\t],\n\n\tprops: {\n\t\tisMtimeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tisSizeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tcompact: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst actionsMenuStore = useActionsMenuStore()\n\t\tconst draggingStore = useDragAndDropStore()\n\t\tconst filesStore = useFilesStore()\n\t\tconst renamingStore = useRenamingStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\treturn {\n\t\t\tactionsMenuStore,\n\t\t\tdraggingStore,\n\t\t\tfilesStore,\n\t\t\trenamingStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/**\n\t\t * Conditionally add drag and drop listeners\n\t\t * Do not add drag start and over listeners on renaming to allow to drag and drop text\n\t\t */\n\t\trowListeners() {\n\t\t\tconst conditionals = this.isRenaming\n\t\t\t\t? {}\n\t\t\t\t: {\n\t\t\t\t\tdragstart: this.onDragStart,\n\t\t\t\t\tdragover: this.onDragOver,\n\t\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...conditionals,\n\t\t\t\tcontextmenu: this.onRightClick,\n\t\t\t\tdragleave: this.onDragLeave,\n\t\t\t\tdragend: this.onDragEnd,\n\t\t\t\tdrop: this.onDrop,\n\t\t\t}\n\t\t},\n\t\tcolumns() {\n\t\t\t// Hide columns if the list is too small\n\t\t\tif (this.filesListWidth < 512 || this.compact) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.currentView?.columns || []\n\t\t},\n\n\t\tsize() {\n\t\t\tconst size = parseInt(this.source.size, 10)\n\t\t\tif (typeof size !== 'number' || isNaN(size) || size < 0) {\n\t\t\t\treturn this.t('files', 'Pending')\n\t\t\t}\n\t\t\treturn formatFileSize(size, true)\n\t\t},\n\t\tsizeOpacity() {\n\t\t\tconst maxOpacitySize = 10 * 1024 * 1024\n\n\t\t\tconst size = parseInt(this.source.size, 10)\n\t\t\tif (!size || isNaN(size) || size < 0) {\n\t\t\t\treturn {}\n\t\t\t}\n\n\t\t\tconst ratio = Math.round(Math.min(100, 100 * Math.pow((this.source.size / maxOpacitySize), 2)))\n\t\t\treturn {\n\t\t\t\tcolor: `color-mix(in srgb, var(--color-main-text) ${ratio}%, var(--color-text-maxcontrast))`,\n\t\t\t}\n\t\t},\n\t\tmtimeOpacity() {\n\t\t\tconst maxOpacityTime = 31 * 24 * 60 * 60 * 1000 // 31 days\n\n\t\t\tconst mtime = this.source.mtime?.getTime?.()\n\t\t\tif (!mtime) {\n\t\t\t\treturn {}\n\t\t\t}\n\n\t\t\t// 1 = today, 0 = 31 days ago\n\t\t\tconst ratio = Math.round(Math.min(100, 100 * (maxOpacityTime - (Date.now() - mtime)) / maxOpacityTime))\n\t\t\tif (ratio < 0) {\n\t\t\t\treturn {}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tcolor: `color-mix(in srgb, var(--color-main-text) ${ratio}%, var(--color-text-maxcontrast))`,\n\t\t\t}\n\t\t},\n\t\tmtimeTitle() {\n\t\t\tif (this.source.mtime) {\n\t\t\t\treturn moment(this.source.mtime).format('LLL')\n\t\t\t}\n\t\t\treturn ''\n\t\t},\n\t},\n\n\tmethods: {\n\t\tformatFileSize,\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<tr :class=\"{'files-list__row--active': isActive, 'files-list__row--dragover': dragover, 'files-list__row--loading': isLoading}\"\n\t\tdata-cy-files-list-row\n\t\t:data-cy-files-list-row-fileid=\"fileid\"\n\t\t:data-cy-files-list-row-name=\"source.basename\"\n\t\t:draggable=\"canDrag\"\n\t\tclass=\"files-list__row\"\n\t\t@contextmenu=\"onRightClick\"\n\t\t@dragover=\"onDragOver\"\n\t\t@dragleave=\"onDragLeave\"\n\t\t@dragstart=\"onDragStart\"\n\t\t@dragend=\"onDragEnd\"\n\t\t@drop=\"onDrop\">\n\t\t<!-- Failed indicator -->\n\t\t<span v-if=\"source.attributes.failed\" class=\"files-list__row--failed\" />\n\n\t\t<!-- Checkbox -->\n\t\t<FileEntryCheckbox :fileid=\"fileid\"\n\t\t\t:is-loading=\"isLoading\"\n\t\t\t:nodes=\"nodes\"\n\t\t\t:source=\"source\" />\n\n\t\t<!-- Link to file -->\n\t\t<td class=\"files-list__row-name\" data-cy-files-list-row-name>\n\t\t\t<!-- Icon or preview -->\n\t\t\t<FileEntryPreview ref=\"preview\"\n\t\t\t\t:dragover=\"dragover\"\n\t\t\t\t:grid-mode=\"true\"\n\t\t\t\t:source=\"source\"\n\t\t\t\t@auxclick.native=\"execDefaultAction\"\n\t\t\t\t@click.native=\"execDefaultAction\" />\n\n\t\t\t<FileEntryName ref=\"name\"\n\t\t\t\t:display-name=\"displayName\"\n\t\t\t\t:extension=\"extension\"\n\t\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t\t:grid-mode=\"true\"\n\t\t\t\t:nodes=\"nodes\"\n\t\t\t\t:source=\"source\"\n\t\t\t\t@auxclick.native=\"execDefaultAction\"\n\t\t\t\t@click.native=\"execDefaultAction\" />\n\t\t</td>\n\n\t\t<!-- Actions -->\n\t\t<FileEntryActions ref=\"actions\"\n\t\t\t:class=\"`files-list__row-actions-${uniqueId}`\"\n\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t:grid-mode=\"true\"\n\t\t\t:loading.sync=\"loading\"\n\t\t\t:opened.sync=\"openedMenu\"\n\t\t\t:source=\"source\" />\n\t</tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport { useActionsMenuStore } from '../store/actionsmenu.ts'\nimport { useDragAndDropStore } from '../store/dragging.ts'\nimport { useFilesStore } from '../store/files.ts'\nimport { useRenamingStore } from '../store/renaming.ts'\nimport { useSelectionStore } from '../store/selection.ts'\nimport FileEntryMixin from './FileEntryMixin.ts'\nimport FileEntryActions from './FileEntry/FileEntryActions.vue'\nimport FileEntryCheckbox from './FileEntry/FileEntryCheckbox.vue'\nimport FileEntryName from './FileEntry/FileEntryName.vue'\nimport FileEntryPreview from './FileEntry/FileEntryPreview.vue'\n\nexport default defineComponent({\n\tname: 'FileEntryGrid',\n\n\tcomponents: {\n\t\tFileEntryActions,\n\t\tFileEntryCheckbox,\n\t\tFileEntryName,\n\t\tFileEntryPreview,\n\t},\n\n\tmixins: [\n\t\tFileEntryMixin,\n\t],\n\n\tinheritAttrs: false,\n\n\tsetup() {\n\t\tconst actionsMenuStore = useActionsMenuStore()\n\t\tconst draggingStore = useDragAndDropStore()\n\t\tconst filesStore = useFilesStore()\n\t\tconst renamingStore = useRenamingStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\treturn {\n\t\t\tactionsMenuStore,\n\t\t\tdraggingStore,\n\t\t\tfilesStore,\n\t\t\trenamingStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tgridMode: true,\n\t\t}\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div v-show=\"enabled\" :class=\"`files-list__header-${header.id}`\">\n\t\t<span ref=\"mount\" />\n\t</div>\n</template>\n\n<script lang=\"ts\">\n/**\n * This component is used to render custom\n * elements provided by an API. Vue doesn't allow\n * to directly render an HTMLElement, so we can do\n * this magic here.\n */\nexport default {\n\tname: 'FilesListHeader',\n\tprops: {\n\t\theader: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tcurrentFolder: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\tcurrentView: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t},\n\tcomputed: {\n\t\tenabled() {\n\t\t\treturn this.header.enabled(this.currentFolder, this.currentView)\n\t\t},\n\t},\n\twatch: {\n\t\tenabled(enabled) {\n\t\t\tif (!enabled) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.header.updated(this.currentFolder, this.currentView)\n\t\t},\n\t\tcurrentFolder() {\n\t\t\tthis.header.updated(this.currentFolder, this.currentView)\n\t\t},\n\t},\n\tmounted() {\n\t\tconsole.debug('Mounted', this.header.id)\n\t\tthis.header.render(this.$refs.mount, this.currentFolder, this.currentView)\n\t},\n}\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<tr>\n\t\t<th class=\"files-list__row-checkbox\">\n\t\t\t<!-- TRANSLATORS Label for a table footer which summarizes the columns of the table -->\n\t\t\t<span class=\"hidden-visually\">{{ t('files', 'Total rows summary') }}</span>\n\t\t</th>\n\n\t\t<!-- Link to file -->\n\t\t<td class=\"files-list__row-name\">\n\t\t\t<!-- Icon or preview -->\n\t\t\t<span class=\"files-list__row-icon\" />\n\n\t\t\t<!-- Summary -->\n\t\t\t<span>{{ summary }}</span>\n\t\t</td>\n\n\t\t<!-- Actions -->\n\t\t<td class=\"files-list__row-actions\" />\n\n\t\t<!-- Size -->\n\t\t<td v-if=\"isSizeAvailable\"\n\t\t\tclass=\"files-list__column files-list__row-size\">\n\t\t\t<span>{{ totalSize }}</span>\n\t\t</td>\n\n\t\t<!-- Mtime -->\n\t\t<td v-if=\"isMtimeAvailable\"\n\t\t\tclass=\"files-list__column files-list__row-mtime\" />\n\n\t\t<!-- Custom views columns -->\n\t\t<th v-for=\"column in columns\"\n\t\t\t:key=\"column.id\"\n\t\t\t:class=\"classForColumn(column)\">\n\t\t\t<span>{{ column.summary?.(nodes, currentView) }}</span>\n\t\t</th>\n\t</tr>\n</template>\n\n<script lang=\"ts\">\nimport type { Node } from '@nextcloud/files'\nimport type { PropType } from 'vue'\n\nimport { View, formatFileSize } from '@nextcloud/files'\nimport { translate } from '@nextcloud/l10n'\nimport { defineComponent } from 'vue'\n\nimport { useFilesStore } from '../store/files.ts'\nimport { usePathsStore } from '../store/paths.ts'\n\nexport default defineComponent({\n\tname: 'FilesListTableFooter',\n\n\tprops: {\n\t\tcurrentView: {\n\t\t\ttype: View,\n\t\t\trequired: true,\n\t\t},\n\t\tisMtimeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tisSizeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<Node[]>,\n\t\t\trequired: true,\n\t\t},\n\t\tsummary: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t\tfilesListWidth: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst pathsStore = usePathsStore()\n\t\tconst filesStore = useFilesStore()\n\t\treturn {\n\t\t\tfilesStore,\n\t\t\tpathsStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tdir() {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\n\t\tcurrentFolder() {\n\t\t\tif (!this.currentView?.id) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (this.dir === '/') {\n\t\t\t\treturn this.filesStore.getRoot(this.currentView.id)\n\t\t\t}\n\t\t\tconst fileId = this.pathsStore.getPath(this.currentView.id, this.dir)!\n\t\t\treturn this.filesStore.getNode(fileId)\n\t\t},\n\n\t\tcolumns() {\n\t\t\t// Hide columns if the list is too small\n\t\t\tif (this.filesListWidth < 512) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.currentView?.columns || []\n\t\t},\n\n\t\ttotalSize() {\n\t\t\t// If we have the size already, let's use it\n\t\t\tif (this.currentFolder?.size) {\n\t\t\t\treturn formatFileSize(this.currentFolder.size, true)\n\t\t\t}\n\n\t\t\t// Otherwise let's compute it\n\t\t\treturn formatFileSize(this.nodes.reduce((total, node) => total + (node.size ?? 0), 0), true)\n\t\t},\n\t},\n\n\tmethods: {\n\t\tclassForColumn(column) {\n\t\t\treturn {\n\t\t\t\t'files-list__row-column-custom': true,\n\t\t\t\t[`files-list__row-${this.currentView.id}-${column.id}`]: true,\n\t\t\t}\n\t\t},\n\n\t\tt: translate,\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n// Scoped row\ntr {\n\tmargin-bottom: 300px;\n\tborder-top: 1px solid var(--color-border);\n\t// Prevent hover effect on the whole row\n\tbackground-color: transparent !important;\n\tborder-bottom: none !important;\n\n\ttd {\n\t\tuser-select: none;\n\t\t// Make sure the cell colors don't apply to column headers\n\t\tcolor: var(--color-text-maxcontrast) !important;\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport Vue from 'vue'\n\nimport { mapState } from 'pinia'\nimport { useViewConfigStore } from '../store/viewConfig'\nimport { Navigation, View } from '@nextcloud/files'\n\nexport default Vue.extend({\n\tcomputed: {\n\t\t...mapState(useViewConfigStore, ['getConfig', 'setSortingBy', 'toggleSortingDirection']),\n\n\t\tcurrentView(): View {\n\t\t\treturn (this.$navigation as Navigation).active as View\n\t\t},\n\n\t\t/**\n\t\t * Get the sorting mode for the current view\n\t\t */\n\t\tsortingMode(): string {\n\t\t\treturn this.getConfig(this.currentView.id)?.sorting_mode as string\n\t\t\t\t|| this.currentView?.defaultSortKey\n\t\t\t\t|| 'basename'\n\t\t},\n\n\t\t/**\n\t\t * Get the sorting direction for the current view\n\t\t */\n\t\tisAscSorting(): boolean {\n\t\t\tconst sortingDirection = this.getConfig(this.currentView.id)?.sorting_direction\n\t\t\treturn sortingDirection !== 'desc'\n\t\t},\n\t},\n\n\tmethods: {\n\t\ttoggleSortBy(key: string) {\n\t\t\t// If we're already sorting by this key, flip the direction\n\t\t\tif (this.sortingMode === key) {\n\t\t\t\tthis.toggleSortingDirection(this.currentView.id)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// else sort ASC by this new key\n\t\t\tthis.setSortingBy(key, this.currentView.id)\n\t\t},\n\t},\n})\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcButton :class=\"['files-list__column-sort-button', {\n\t\t\t'files-list__column-sort-button--active': sortingMode === mode,\n\t\t\t'files-list__column-sort-button--size': sortingMode === 'size',\n\t\t}]\"\n\t\t:alignment=\"mode === 'size' ? 'end' : 'start-reverse'\"\n\t\ttype=\"tertiary\"\n\t\t@click=\"toggleSortBy(mode)\">\n\t\t<template #icon>\n\t\t\t<MenuUp v-if=\"sortingMode !== mode || isAscSorting\" class=\"files-list__column-sort-button-icon\" />\n\t\t\t<MenuDown v-else class=\"files-list__column-sort-button-icon\" />\n\t\t</template>\n\t\t<span class=\"files-list__column-sort-button-text\">{{ name }}</span>\n\t</NcButton>\n</template>\n\n<script lang=\"ts\">\nimport { translate } from '@nextcloud/l10n'\nimport { defineComponent } from 'vue'\n\nimport MenuDown from 'vue-material-design-icons/MenuDown.vue'\nimport MenuUp from 'vue-material-design-icons/MenuUp.vue'\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\n\nimport filesSortingMixin from '../mixins/filesSorting.ts'\n\nexport default defineComponent({\n\tname: 'FilesListTableHeaderButton',\n\n\tcomponents: {\n\t\tMenuDown,\n\t\tMenuUp,\n\t\tNcButton,\n\t},\n\n\tmixins: [\n\t\tfilesSortingMixin,\n\t],\n\n\tprops: {\n\t\tname: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tmode: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tmethods: {\n\t\tt: translate,\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.files-list__column-sort-button {\n\t// Compensate for cells margin\n\tmargin: 0 calc(var(--cell-margin) * -1);\n\tmin-width: calc(100% - 3 * var(--cell-margin))!important;\n\n\t&-text {\n\t\tcolor: var(--color-text-maxcontrast);\n\t\tfont-weight: normal;\n\t}\n\n\t&-icon {\n\t\tcolor: var(--color-text-maxcontrast);\n\t\topacity: 0;\n\t\ttransition: opacity var(--animation-quick);\n\t\tinset-inline-start: -10px;\n\t}\n\n\t&--size &-icon {\n\t\tinset-inline-start: 10px;\n\t}\n\n\t&--active &-icon,\n\t&:hover &-icon,\n\t&:focus &-icon,\n\t&:active &-icon {\n\t\topacity: 1;\n\t}\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<tr class=\"files-list__row-head\">\n\t\t<th class=\"files-list__column files-list__row-checkbox\"\n\t\t\t@keyup.esc.exact=\"resetSelection\">\n\t\t\t<NcCheckboxRadioSwitch v-bind=\"selectAllBind\" @update:checked=\"onToggleAll\" />\n\t\t</th>\n\n\t\t<!-- Columns display -->\n\n\t\t<!-- Link to file -->\n\t\t<th class=\"files-list__column files-list__row-name files-list__column--sortable\"\n\t\t\t:aria-sort=\"ariaSortForMode('basename')\">\n\t\t\t<!-- Icon or preview -->\n\t\t\t<span class=\"files-list__row-icon\" />\n\n\t\t\t<!-- Name -->\n\t\t\t<FilesListTableHeaderButton :name=\"t('files', 'Name')\" mode=\"basename\" />\n\t\t</th>\n\n\t\t<!-- Actions -->\n\t\t<th class=\"files-list__row-actions\" />\n\n\t\t<!-- Size -->\n\t\t<th v-if=\"isSizeAvailable\"\n\t\t\tclass=\"files-list__column files-list__row-size\"\n\t\t\t:class=\"{ 'files-list__column--sortable': isSizeAvailable }\"\n\t\t\t:aria-sort=\"ariaSortForMode('size')\">\n\t\t\t<FilesListTableHeaderButton :name=\"t('files', 'Size')\" mode=\"size\" />\n\t\t</th>\n\n\t\t<!-- Mtime -->\n\t\t<th v-if=\"isMtimeAvailable\"\n\t\t\tclass=\"files-list__column files-list__row-mtime\"\n\t\t\t:class=\"{ 'files-list__column--sortable': isMtimeAvailable }\"\n\t\t\t:aria-sort=\"ariaSortForMode('mtime')\">\n\t\t\t<FilesListTableHeaderButton :name=\"t('files', 'Modified')\" mode=\"mtime\" />\n\t\t</th>\n\n\t\t<!-- Custom views columns -->\n\t\t<th v-for=\"column in columns\"\n\t\t\t:key=\"column.id\"\n\t\t\t:class=\"classForColumn(column)\"\n\t\t\t:aria-sort=\"ariaSortForMode(column.id)\">\n\t\t\t<FilesListTableHeaderButton v-if=\"!!column.sort\" :name=\"column.title\" :mode=\"column.id\" />\n\t\t\t<span v-else>\n\t\t\t\t{{ column.title }}\n\t\t\t</span>\n\t\t</th>\n\t</tr>\n</template>\n\n<script lang=\"ts\">\nimport { translate as t } from '@nextcloud/l10n'\nimport NcCheckboxRadioSwitch from '@nextcloud/vue/dist/Components/NcCheckboxRadioSwitch.js'\nimport { defineComponent, type PropType } from 'vue'\n\nimport { useFilesStore } from '../store/files.ts'\nimport { useSelectionStore } from '../store/selection.ts'\nimport FilesListTableHeaderButton from './FilesListTableHeaderButton.vue'\nimport filesSortingMixin from '../mixins/filesSorting.ts'\nimport logger from '../logger.js'\nimport type { Node } from '@nextcloud/files'\nimport type { FileSource } from '../types.ts'\n\nexport default defineComponent({\n\tname: 'FilesListTableHeader',\n\n\tcomponents: {\n\t\tFilesListTableHeaderButton,\n\t\tNcCheckboxRadioSwitch,\n\t},\n\n\tmixins: [\n\t\tfilesSortingMixin,\n\t],\n\n\tprops: {\n\t\tisMtimeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tisSizeAvailable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<Node[]>,\n\t\t\trequired: true,\n\t\t},\n\t\tfilesListWidth: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst filesStore = useFilesStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\treturn {\n\t\t\tfilesStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentView() {\n\t\t\treturn this.$navigation.active\n\t\t},\n\n\t\tcolumns() {\n\t\t\t// Hide columns if the list is too small\n\t\t\tif (this.filesListWidth < 512) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.currentView?.columns || []\n\t\t},\n\n\t\tdir() {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\n\t\tselectAllBind() {\n\t\t\tconst label = t('files', 'Toggle selection for all files and folders')\n\t\t\treturn {\n\t\t\t\t'aria-label': label,\n\t\t\t\tchecked: this.isAllSelected,\n\t\t\t\tindeterminate: this.isSomeSelected,\n\t\t\t\ttitle: label,\n\t\t\t}\n\t\t},\n\n\t\tselectedNodes() {\n\t\t\treturn this.selectionStore.selected\n\t\t},\n\n\t\tisAllSelected() {\n\t\t\treturn this.selectedNodes.length === this.nodes.length\n\t\t},\n\n\t\tisNoneSelected() {\n\t\t\treturn this.selectedNodes.length === 0\n\t\t},\n\n\t\tisSomeSelected() {\n\t\t\treturn !this.isAllSelected && !this.isNoneSelected\n\t\t},\n\t},\n\n\tmethods: {\n\t\tariaSortForMode(mode: string): ARIAMixin['ariaSort'] {\n\t\t\tif (this.sortingMode === mode) {\n\t\t\t\treturn this.isAscSorting ? 'ascending' : 'descending'\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\n\t\tclassForColumn(column) {\n\t\t\treturn {\n\t\t\t\t'files-list__column': true,\n\t\t\t\t'files-list__column--sortable': !!column.sort,\n\t\t\t\t'files-list__row-column-custom': true,\n\t\t\t\t[`files-list__row-${this.currentView?.id}-${column.id}`]: true,\n\t\t\t}\n\t\t},\n\n\t\tonToggleAll(selected) {\n\t\t\tif (selected) {\n\t\t\t\tconst selection = this.nodes.map(node => node.source).filter(Boolean) as FileSource[]\n\t\t\t\tlogger.debug('Added all nodes to selection', { selection })\n\t\t\t\tthis.selectionStore.setLastIndex(null)\n\t\t\t\tthis.selectionStore.set(selection)\n\t\t\t} else {\n\t\t\t\tlogger.debug('Cleared selection')\n\t\t\t\tthis.selectionStore.reset()\n\t\t\t}\n\t\t},\n\n\t\tresetSelection() {\n\t\t\tthis.selectionStore.reset()\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.files-list__column {\n\tuser-select: none;\n\t// Make sure the cell colors don't apply to column headers\n\tcolor: var(--color-text-maxcontrast) !important;\n\n\t&--sortable {\n\t\tcursor: pointer;\n\t}\n}\n\n</style>\n","<!--\n - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n -->\n<template>\n\t<div class=\"files-list\" data-cy-files-list>\n\t\t<!-- Header -->\n\t\t<div ref=\"before\" class=\"files-list__before\">\n\t\t\t<slot name=\"before\" />\n\t\t</div>\n\n\t\t<div v-if=\"!!$scopedSlots['header-overlay']\" class=\"files-list__thead-overlay\">\n\t\t\t<slot name=\"header-overlay\" />\n\t\t</div>\n\n\t\t<table class=\"files-list__table\" :class=\"{ 'files-list__table--with-thead-overlay': !!$scopedSlots['header-overlay'] }\">\n\t\t\t<!-- Accessibility table caption for screen readers -->\n\t\t\t<caption v-if=\"caption\" class=\"hidden-visually\">\n\t\t\t\t{{ caption }}\n\t\t\t</caption>\n\n\t\t\t<!-- Header -->\n\t\t\t<thead ref=\"thead\" class=\"files-list__thead\" data-cy-files-list-thead>\n\t\t\t\t<slot name=\"header\" />\n\t\t\t</thead>\n\n\t\t\t<!-- Body -->\n\t\t\t<tbody :style=\"tbodyStyle\"\n\t\t\t\tclass=\"files-list__tbody\"\n\t\t\t\t:class=\"gridMode ? 'files-list__tbody--grid' : 'files-list__tbody--list'\"\n\t\t\t\tdata-cy-files-list-tbody>\n\t\t\t\t<component :is=\"dataComponent\"\n\t\t\t\t\tv-for=\"({key, item}, i) in renderedItems\"\n\t\t\t\t\t:key=\"key\"\n\t\t\t\t\t:source=\"item\"\n\t\t\t\t\t:index=\"i\"\n\t\t\t\t\tv-bind=\"extraProps\" />\n\t\t\t</tbody>\n\n\t\t\t<!-- Footer -->\n\t\t\t<tfoot v-show=\"isReady\"\n\t\t\t\tclass=\"files-list__tfoot\"\n\t\t\t\tdata-cy-files-list-tfoot>\n\t\t\t\t<slot name=\"footer\" />\n\t\t\t</tfoot>\n\t\t</table>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport type { File, Folder, Node } from '@nextcloud/files'\nimport type { PropType } from 'vue'\n\nimport { debounce } from 'debounce'\nimport Vue from 'vue'\n\nimport filesListWidthMixin from '../mixins/filesListWidth.ts'\nimport logger from '../logger.js'\n\ninterface RecycledPoolItem {\n\tkey: string,\n\titem: Node,\n}\n\nexport default Vue.extend({\n\tname: 'VirtualList',\n\n\tmixins: [filesListWidthMixin],\n\n\tprops: {\n\t\tdataComponent: {\n\t\t\ttype: [Object, Function],\n\t\t\trequired: true,\n\t\t},\n\t\tdataKey: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tdataSources: {\n\t\t\ttype: Array as PropType<(File | Folder)[]>,\n\t\t\trequired: true,\n\t\t},\n\t\textraProps: {\n\t\t\ttype: Object as PropType<Record<string, unknown>>,\n\t\t\tdefault: () => ({}),\n\t\t},\n\t\tscrollToIndex: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t\tgridMode: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t/**\n\t\t * Visually hidden caption for the table accesibility\n\t\t */\n\t\tcaption: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tindex: this.scrollToIndex,\n\t\t\tbeforeHeight: 0,\n\t\t\theaderHeight: 0,\n\t\t\ttableHeight: 0,\n\t\t\tresizeObserver: null as ResizeObserver | null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t// Wait for measurements to be done before rendering\n\t\tisReady() {\n\t\t\treturn this.tableHeight > 0\n\t\t},\n\n\t\t// Items to render before and after the visible area\n\t\tbufferItems() {\n\t\t\tif (this.gridMode) {\n\t\t\t\treturn this.columnCount\n\t\t\t}\n\t\t\treturn 3\n\t\t},\n\n\t\titemHeight() {\n\t\t\t// Align with css in FilesListVirtual\n\t\t\t// 138px + 44px (name) + 15px (grid gap)\n\t\t\treturn this.gridMode ? (138 + 44 + 15) : 55\n\t\t},\n\t\t// Grid mode only\n\t\titemWidth() {\n\t\t\t// 160px + 15px grid gap\n\t\t\treturn 160 + 15\n\t\t},\n\n\t\trowCount() {\n\t\t\treturn Math.ceil((this.tableHeight - this.headerHeight) / this.itemHeight) + (this.bufferItems / this.columnCount) * 2 + 1\n\t\t},\n\t\tcolumnCount() {\n\t\t\tif (!this.gridMode) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\treturn Math.floor(this.filesListWidth / this.itemWidth)\n\t\t},\n\n\t\t/**\n\t\t * Index of the first item to be rendered\n\t\t */\n\t\tstartIndex() {\n\t\t\treturn Math.max(0, this.index - this.bufferItems)\n\t\t},\n\n\t\t/**\n\t\t * Number of items to be rendered at the same time\n\t\t * For list view this is the same as `rowCount`, for grid view this is `rowCount` * `columnCount`\n\t\t */\n\t\tshownItems() {\n\t\t\t// If in grid mode, we need to multiply the number of rows by the number of columns\n\t\t\tif (this.gridMode) {\n\t\t\t\treturn this.rowCount * this.columnCount\n\t\t\t}\n\n\t\t\treturn this.rowCount\n\t\t},\n\n\t\trenderedItems(): RecycledPoolItem[] {\n\t\t\tif (!this.isReady) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst items = this.dataSources.slice(this.startIndex, this.startIndex + this.shownItems) as Node[]\n\n\t\t\tconst oldItems = items.filter(item => Object.values(this.$_recycledPool).includes(item[this.dataKey]))\n\t\t\tconst oldItemsKeys = oldItems.map(item => item[this.dataKey] as string)\n\t\t\tconst unusedKeys = Object.keys(this.$_recycledPool).filter(key => !oldItemsKeys.includes(this.$_recycledPool[key]))\n\n\t\t\treturn items.map(item => {\n\t\t\t\tconst index = Object.values(this.$_recycledPool).indexOf(item[this.dataKey])\n\t\t\t\t// If defined, let's keep the key\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: Object.keys(this.$_recycledPool)[index],\n\t\t\t\t\t\titem,\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Get and consume reusable key or generate a new one\n\t\t\t\tconst key = unusedKeys.pop() || Math.random().toString(36).substr(2)\n\t\t\t\tthis.$_recycledPool[key] = item[this.dataKey]\n\t\t\t\treturn { key, item }\n\t\t\t})\n\t\t},\n\n\t\t/**\n\t\t * The total number of rows that are available\n\t\t */\n\t\ttotalRowCount() {\n\t\t\treturn Math.floor(this.dataSources.length / this.columnCount)\n\t\t},\n\n\t\ttbodyStyle() {\n\t\t\tconst isOverScrolled = this.startIndex + this.rowCount > this.dataSources.length\n\t\t\tconst lastIndex = this.dataSources.length - this.startIndex - this.shownItems\n\t\t\tconst hiddenAfterItems = Math.floor(Math.min(this.dataSources.length - this.startIndex, lastIndex) / this.columnCount)\n\t\t\treturn {\n\t\t\t\tpaddingTop: `${Math.floor(this.startIndex / this.columnCount) * this.itemHeight}px`,\n\t\t\t\tpaddingBottom: isOverScrolled ? 0 : `${hiddenAfterItems * this.itemHeight}px`,\n\t\t\t\tminHeight: `${this.totalRowCount * this.itemHeight + this.beforeHeight}px`,\n\t\t\t}\n\t\t},\n\t},\n\twatch: {\n\t\tscrollToIndex(index) {\n\t\t\tthis.scrollTo(index)\n\t\t},\n\n\t\ttotalRowCount() {\n\t\t\tif (this.scrollToIndex) {\n\t\t\t\tthis.$nextTick(() => this.scrollTo(this.scrollToIndex))\n\t\t\t}\n\t\t},\n\n\t\tcolumnCount(columnCount, oldColumnCount) {\n\t\t\tif (oldColumnCount === 0) {\n\t\t\t\t// We're initializing, the scroll position\n\t\t\t\t// is handled on mounted\n\t\t\t\tconsole.debug('VirtualList: columnCount is 0, skipping scroll')\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// If the column count changes in grid view,\n\t\t\t// update the scroll position again\n\t\t\tthis.scrollTo(this.index)\n\t\t},\n\t},\n\n\tmounted() {\n\t\tconst before = this.$refs?.before as HTMLElement\n\t\tconst root = this.$el as HTMLElement\n\t\tconst thead = this.$refs?.thead as HTMLElement\n\n\t\tthis.resizeObserver = new ResizeObserver(debounce(() => {\n\t\t\tthis.beforeHeight = before?.clientHeight ?? 0\n\t\t\tthis.headerHeight = thead?.clientHeight ?? 0\n\t\t\tthis.tableHeight = root?.clientHeight ?? 0\n\t\t\tlogger.debug('VirtualList: resizeObserver updated')\n\t\t\tthis.onScroll()\n\t\t}, 100, false))\n\n\t\tthis.resizeObserver.observe(before)\n\t\tthis.resizeObserver.observe(root)\n\t\tthis.resizeObserver.observe(thead)\n\n\t\tif (this.scrollToIndex) {\n\t\t\tthis.scrollTo(this.scrollToIndex)\n\t\t}\n\n\t\t// Adding scroll listener AFTER the initial scroll to index\n\t\tthis.$el.addEventListener('scroll', this.onScroll, { passive: true })\n\n\t\tthis.$_recycledPool = {} as Record<string, any>\n\t},\n\n\tbeforeDestroy() {\n\t\tif (this.resizeObserver) {\n\t\t\tthis.resizeObserver.disconnect()\n\t\t}\n\t},\n\n\tmethods: {\n\t\tscrollTo(index: number) {\n\t\t\tconst targetRow = Math.ceil(this.dataSources.length / this.columnCount)\n\t\t\tif (targetRow < this.rowCount) {\n\t\t\t\tlogger.debug('VirtualList: Skip scrolling. nothing to scroll', { index, targetRow, rowCount: this.rowCount })\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.index = index\n\t\t\t// Scroll to one row and a half before the index\n\t\t\tconst scrollTop = (Math.floor(index / this.columnCount) - 0.5) * this.itemHeight + this.beforeHeight\n\t\t\tlogger.debug('VirtualList: scrolling to index ' + index, { scrollTop, columnCount: this.columnCount })\n\t\t\tthis.$el.scrollTop = scrollTop\n\t\t},\n\n\t\tonScroll() {\n\t\t\tthis._onScrollHandle ??= requestAnimationFrame(() => {\n\t\t\t\tthis._onScrollHandle = null\n\t\t\t\tconst topScroll = this.$el.scrollTop - this.beforeHeight\n\t\t\t\tconst index = Math.floor(topScroll / this.itemHeight) * this.columnCount\n\t\t\t\t// Max 0 to prevent negative index\n\t\t\t\tthis.index = Math.max(0, index)\n\t\t\t\tthis.$emit('scroll')\n\t\t\t})\n\t\t},\n\t},\n})\n</script>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div class=\"files-list__column files-list__row-actions-batch\">\n\t\t<NcActions ref=\"actionsMenu\"\n\t\t\t:disabled=\"!!loading || areSomeNodesLoading\"\n\t\t\t:force-name=\"true\"\n\t\t\t:inline=\"inlineActions\"\n\t\t\t:menu-name=\"inlineActions <= 1 ? t('files', 'Actions') : null\"\n\t\t\t:open.sync=\"openedMenu\">\n\t\t\t<NcActionButton v-for=\"action in enabledActions\"\n\t\t\t\t:key=\"action.id\"\n\t\t\t\t:class=\"'files-list__row-actions-batch-' + action.id\"\n\t\t\t\t@click=\"onActionClick(action)\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<NcLoadingIcon v-if=\"loading === action.id\" :size=\"18\" />\n\t\t\t\t\t<NcIconSvgWrapper v-else :svg=\"action.iconSvgInline(nodes, currentView)\" />\n\t\t\t\t</template>\n\t\t\t\t{{ action.displayName(nodes, currentView) }}\n\t\t\t</NcActionButton>\n\t\t</NcActions>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport { Node, NodeStatus, View, getFileActions } from '@nextcloud/files'\nimport { showError, showSuccess } from '@nextcloud/dialogs'\nimport { translate } from '@nextcloud/l10n'\nimport NcActionButton from '@nextcloud/vue/dist/Components/NcActionButton.js'\nimport NcActions from '@nextcloud/vue/dist/Components/NcActions.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\nimport NcLoadingIcon from '@nextcloud/vue/dist/Components/NcLoadingIcon.js'\nimport Vue, { defineComponent, type PropType } from 'vue'\n\nimport { useActionsMenuStore } from '../store/actionsmenu.ts'\nimport { useFilesStore } from '../store/files.ts'\nimport { useSelectionStore } from '../store/selection.ts'\nimport filesListWidthMixin from '../mixins/filesListWidth.ts'\nimport logger from '../logger.js'\nimport type { FileSource } from '../types'\n\n// The registered actions list\nconst actions = getFileActions()\n\nexport default defineComponent({\n\tname: 'FilesListTableHeaderActions',\n\n\tcomponents: {\n\t\tNcActions,\n\t\tNcActionButton,\n\t\tNcIconSvgWrapper,\n\t\tNcLoadingIcon,\n\t},\n\n\tmixins: [\n\t\tfilesListWidthMixin,\n\t],\n\n\tprops: {\n\t\tcurrentView: {\n\t\t\ttype: Object as PropType<View>,\n\t\t\trequired: true,\n\t\t},\n\t\tselectedNodes: {\n\t\t\ttype: Array as PropType<FileSource[]>,\n\t\t\tdefault: () => ([]),\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst actionsMenuStore = useActionsMenuStore()\n\t\tconst filesStore = useFilesStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\treturn {\n\t\t\tactionsMenuStore,\n\t\t\tfilesStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tloading: null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tdir() {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\t\tenabledActions() {\n\t\t\treturn actions\n\t\t\t\t.filter(action => action.execBatch)\n\t\t\t\t.filter(action => !action.enabled || action.enabled(this.nodes, this.currentView))\n\t\t\t\t.sort((a, b) => (a.order || 0) - (b.order || 0))\n\t\t},\n\n\t\tnodes() {\n\t\t\treturn this.selectedNodes\n\t\t\t\t.map(source => this.getNode(source))\n\t\t\t\t.filter(Boolean) as Node[]\n\t\t},\n\n\t\tareSomeNodesLoading() {\n\t\t\treturn this.nodes.some(node => node.status === NodeStatus.LOADING)\n\t\t},\n\n\t\topenedMenu: {\n\t\t\tget() {\n\t\t\t\treturn this.actionsMenuStore.opened === 'global'\n\t\t\t},\n\t\t\tset(opened) {\n\t\t\t\tthis.actionsMenuStore.opened = opened ? 'global' : null\n\t\t\t},\n\t\t},\n\n\t\tinlineActions() {\n\t\t\tif (this.filesListWidth < 512) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\tif (this.filesListWidth < 768) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\tif (this.filesListWidth < 1024) {\n\t\t\t\treturn 2\n\t\t\t}\n\t\t\treturn 3\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * Get a cached note from the store\n\t\t *\n\t\t * @param {number} fileId the file id to get\n\t\t * @return {Folder|File}\n\t\t */\n\t\tgetNode(fileId) {\n\t\t\treturn this.filesStore.getNode(fileId)\n\t\t},\n\n\t\tasync onActionClick(action) {\n\t\t\tconst displayName = action.displayName(this.nodes, this.currentView)\n\t\t\tconst selectionSources = this.selectedNodes\n\t\t\ttry {\n\t\t\t\t// Set loading markers\n\t\t\t\tthis.loading = action.id\n\t\t\t\tthis.nodes.forEach(node => {\n\t\t\t\t\tVue.set(node, 'status', NodeStatus.LOADING)\n\t\t\t\t})\n\n\t\t\t\t// Dispatch action execution\n\t\t\t\tconst results = await action.execBatch(this.nodes, this.currentView, this.dir)\n\n\t\t\t\t// Check if all actions returned null\n\t\t\t\tif (!results.some(result => result !== null)) {\n\t\t\t\t\t// If the actions returned null, we stay silent\n\t\t\t\t\tthis.selectionStore.reset()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Handle potential failures\n\t\t\t\tif (results.some(result => result === false)) {\n\t\t\t\t\t// Remove the failed ids from the selection\n\t\t\t\t\tconst failedSources = selectionSources\n\t\t\t\t\t\t.filter((source, index) => results[index] === false)\n\t\t\t\t\tthis.selectionStore.set(failedSources)\n\n\t\t\t\t\tif (results.some(result => result === null)) {\n\t\t\t\t\t\t// If some actions returned null, we assume that the dev\n\t\t\t\t\t\t// is handling the error messages and we stay silent\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tshowError(this.t('files', '\"{displayName}\" failed on some elements ', { displayName }))\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Show success message and clear selection\n\t\t\t\tshowSuccess(this.t('files', '\"{displayName}\" batch action executed successfully', { displayName }))\n\t\t\t\tthis.selectionStore.reset()\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error('Error while executing action', { action, e })\n\t\t\t\tshowError(this.t('files', '\"{displayName}\" action failed', { displayName }))\n\t\t\t} finally {\n\t\t\t\t// Remove loading markers\n\t\t\t\tthis.loading = null\n\t\t\t\tthis.nodes.forEach(node => {\n\t\t\t\t\tVue.set(node, 'status', undefined)\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\n\t\tt: translate,\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.files-list__row-actions-batch {\n\tflex: 1 1 100% !important;\n\tmax-width: 100%;\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<VirtualList ref=\"table\"\n\t\t:data-component=\"userConfig.grid_view ? FileEntryGrid : FileEntry\"\n\t\t:data-key=\"'source'\"\n\t\t:data-sources=\"nodes\"\n\t\t:grid-mode=\"userConfig.grid_view\"\n\t\t:extra-props=\"{\n\t\t\tisMtimeAvailable,\n\t\t\tisSizeAvailable,\n\t\t\tnodes,\n\t\t\tfilesListWidth,\n\t\t}\"\n\t\t:scroll-to-index=\"scrollToIndex\"\n\t\t:caption=\"caption\">\n\t\t<template v-if=\"!isNoneSelected\" #header-overlay>\n\t\t\t<span class=\"files-list__selected\">{{ t('files', '{count} selected', { count: selectedNodes.length }) }}</span>\n\t\t\t<FilesListTableHeaderActions :current-view=\"currentView\"\n\t\t\t\t:selected-nodes=\"selectedNodes\" />\n\t\t</template>\n\n\t\t<template #before>\n\t\t\t<!-- Headers -->\n\t\t\t<FilesListHeader v-for=\"header in sortedHeaders\"\n\t\t\t\t:key=\"header.id\"\n\t\t\t\t:current-folder=\"currentFolder\"\n\t\t\t\t:current-view=\"currentView\"\n\t\t\t\t:header=\"header\" />\n\t\t</template>\n\n\t\t<!-- Thead-->\n\t\t<template #header>\n\t\t\t<!-- Table header and sort buttons -->\n\t\t\t<FilesListTableHeader ref=\"thead\"\n\t\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t\t:is-mtime-available=\"isMtimeAvailable\"\n\t\t\t\t:is-size-available=\"isSizeAvailable\"\n\t\t\t\t:nodes=\"nodes\" />\n\t\t</template>\n\n\t\t<!-- Tfoot-->\n\t\t<template #footer>\n\t\t\t<FilesListTableFooter :current-view=\"currentView\"\n\t\t\t\t:files-list-width=\"filesListWidth\"\n\t\t\t\t:is-mtime-available=\"isMtimeAvailable\"\n\t\t\t\t:is-size-available=\"isSizeAvailable\"\n\t\t\t\t:nodes=\"nodes\"\n\t\t\t\t:summary=\"summary\" />\n\t\t</template>\n\t</VirtualList>\n</template>\n\n<script lang=\"ts\">\nimport type { Node as NcNode } from '@nextcloud/files'\nimport type { ComponentPublicInstance, PropType } from 'vue'\nimport type { UserConfig } from '../types'\n\nimport { getFileListHeaders, Folder, View, getFileActions, FileType } from '@nextcloud/files'\nimport { showError } from '@nextcloud/dialogs'\nimport { loadState } from '@nextcloud/initial-state'\nimport { translate as t } from '@nextcloud/l10n'\nimport { defineComponent } from 'vue'\n\nimport { action as sidebarAction } from '../actions/sidebarAction.ts'\nimport { getSummaryFor } from '../utils/fileUtils'\nimport { useSelectionStore } from '../store/selection.js'\nimport { useUserConfigStore } from '../store/userconfig.ts'\n\nimport FileEntry from './FileEntry.vue'\nimport FileEntryGrid from './FileEntryGrid.vue'\nimport FilesListHeader from './FilesListHeader.vue'\nimport FilesListTableFooter from './FilesListTableFooter.vue'\nimport FilesListTableHeader from './FilesListTableHeader.vue'\nimport filesListWidthMixin from '../mixins/filesListWidth.ts'\nimport VirtualList from './VirtualList.vue'\nimport logger from '../logger.js'\nimport FilesListTableHeaderActions from './FilesListTableHeaderActions.vue'\n\nexport default defineComponent({\n\tname: 'FilesListVirtual',\n\n\tcomponents: {\n\t\tFilesListHeader,\n\t\tFilesListTableFooter,\n\t\tFilesListTableHeader,\n\t\tVirtualList,\n\t\tFilesListTableHeaderActions,\n\t},\n\n\tmixins: [\n\t\tfilesListWidthMixin,\n\t],\n\n\tprops: {\n\t\tcurrentView: {\n\t\t\ttype: View,\n\t\t\trequired: true,\n\t\t},\n\t\tcurrentFolder: {\n\t\t\ttype: Folder,\n\t\t\trequired: true,\n\t\t},\n\t\tnodes: {\n\t\t\ttype: Array as PropType<NcNode[]>,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tsetup() {\n\t\tconst userConfigStore = useUserConfigStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\treturn {\n\t\t\tuserConfigStore,\n\t\t\tselectionStore,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tFileEntry,\n\t\t\tFileEntryGrid,\n\t\t\theaders: getFileListHeaders(),\n\t\t\tscrollToIndex: 0,\n\t\t\topenFileId: null as number|null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tuserConfig(): UserConfig {\n\t\t\treturn this.userConfigStore.userConfig\n\t\t},\n\n\t\tfileId() {\n\t\t\treturn parseInt(this.$route.params.fileid) || null\n\t\t},\n\n\t\t/**\n\t\t * If the current `fileId` should be opened\n\t\t * The state of the `openfile` query param\n\t\t */\n\t\topenFile() {\n\t\t\treturn !!this.$route.query.openfile\n\t\t},\n\n\t\tsummary() {\n\t\t\treturn getSummaryFor(this.nodes)\n\t\t},\n\n\t\tisMtimeAvailable() {\n\t\t\t// Hide mtime column on narrow screens\n\t\t\tif (this.filesListWidth < 768) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn this.nodes.some(node => node.mtime !== undefined)\n\t\t},\n\t\tisSizeAvailable() {\n\t\t\t// Hide size column on narrow screens\n\t\t\tif (this.filesListWidth < 768) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn this.nodes.some(node => node.size !== undefined)\n\t\t},\n\n\t\tsortedHeaders() {\n\t\t\tif (!this.currentFolder || !this.currentView) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\treturn [...this.headers].sort((a, b) => a.order - b.order)\n\t\t},\n\n\t\tcaption() {\n\t\t\tconst defaultCaption = t('files', 'List of files and folders.')\n\t\t\tconst viewCaption = this.currentView.caption || defaultCaption\n\t\t\tconst sortableCaption = t('files', 'Column headers with buttons are sortable.')\n\t\t\tconst virtualListNote = t('files', 'This list is not fully rendered for performance reasons. The files will be rendered as you navigate through the list.')\n\t\t\treturn `${viewCaption}\\n${sortableCaption}\\n${virtualListNote}`\n\t\t},\n\n\t\tselectedNodes() {\n\t\t\treturn this.selectionStore.selected\n\t\t},\n\n\t\tisNoneSelected() {\n\t\t\treturn this.selectedNodes.length === 0\n\t\t},\n\t},\n\n\twatch: {\n\t\tfileId(fileId) {\n\t\t\tthis.scrollToFile(fileId, false)\n\t\t},\n\n\t\topenFile(open: boolean) {\n\t\t\tif (open) {\n\t\t\t\tthis.$nextTick(() => this.handleOpenFile(this.fileId))\n\t\t\t}\n\t\t},\n\t},\n\n\tmounted() {\n\t\t// Add events on parent to cover both the table and DragAndDrop notice\n\t\tconst mainContent = window.document.querySelector('main.app-content') as HTMLElement\n\t\tmainContent.addEventListener('dragover', this.onDragOver)\n\n\t\t// handle initially opening a given file\n\t\tconst { id } = loadState<{ id?: number }>('files', 'openFileInfo', {})\n\t\tthis.scrollToFile(id ?? this.fileId)\n\t\tthis.openSidebarForFile(id ?? this.fileId)\n\t\tthis.handleOpenFile(id ?? null)\n\t},\n\n\tbeforeDestroy() {\n\t\tconst mainContent = window.document.querySelector('main.app-content') as HTMLElement\n\t\tmainContent.removeEventListener('dragover', this.onDragOver)\n\t},\n\n\tmethods: {\n\t\t// Open the file sidebar if we have the room for it\n\t\t// but don't open the sidebar for the current folder\n\t\topenSidebarForFile(fileId) {\n\t\t\tif (document.documentElement.clientWidth > 1024 && this.currentFolder.fileid !== fileId) {\n\t\t\t\t// Open the sidebar for the given URL fileid\n\t\t\t\t// iif we just loaded the app.\n\t\t\t\tconst node = this.nodes.find(n => n.fileid === fileId) as NcNode\n\t\t\t\tif (node && sidebarAction?.enabled?.([node], this.currentView)) {\n\t\t\t\t\tlogger.debug('Opening sidebar on file ' + node.path, { node })\n\t\t\t\t\tsidebarAction.exec(node, this.currentView, this.currentFolder.path)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tscrollToFile(fileId: number|null, warn = true) {\n\t\t\tif (fileId) {\n\t\t\t\tconst index = this.nodes.findIndex(node => node.fileid === fileId)\n\t\t\t\tif (warn && index === -1 && fileId !== this.currentFolder.fileid) {\n\t\t\t\t\tshowError(this.t('files', 'File not found'))\n\t\t\t\t}\n\t\t\t\tthis.scrollToIndex = Math.max(0, index)\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Handle opening a file (e.g. by ?openfile=true)\n\t\t * @param fileId File to open\n\t\t */\n\t\thandleOpenFile(fileId: number|null) {\n\t\t\tif (fileId === null || this.openFileId === fileId) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst node = this.nodes.find(n => n.fileid === fileId) as NcNode\n\t\t\tif (node === undefined || node.type === FileType.Folder) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlogger.debug('Opening file ' + node.path, { node })\n\t\t\tthis.openFileId = fileId\n\t\t\tconst defaultAction = getFileActions()\n\t\t\t\t// Get only default actions (visible and hidden)\n\t\t\t\t.filter(action => !!action?.default)\n\t\t\t\t// Find actions that are either always enabled or enabled for the current node\n\t\t\t\t.filter((action) => !action.enabled || action.enabled([node], this.currentView))\n\t\t\t\t// Sort enabled default actions by order\n\t\t\t\t.sort((a, b) => (a.order || 0) - (b.order || 0))\n\t\t\t\t// Get the first one\n\t\t\t\t.at(0)\n\t\t\t// Some file types do not have a default action (e.g. they can only be downloaded)\n\t\t\t// So if there is an enabled default action, so execute it\n\t\t\tdefaultAction?.exec(node, this.currentView, this.currentFolder.path)\n\t\t},\n\n\t\tonDragOver(event: DragEvent) {\n\t\t\t// Detect if we're only dragging existing files or not\n\t\t\tconst isForeignFile = event.dataTransfer?.types.includes('Files')\n\t\t\tif (isForeignFile) {\n\t\t\t\t// Only handle uploading of existing Nextcloud files\n\t\t\t\t// See DragAndDropNotice for handling of foreign files\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tevent.preventDefault()\n\t\t\tevent.stopPropagation()\n\n\t\t\tconst tableElement = (this.$refs.table as ComponentPublicInstance<typeof VirtualList>).$el\n\t\t\tconst tableTop = tableElement.getBoundingClientRect().top\n\t\t\tconst tableBottom = tableTop + tableElement.getBoundingClientRect().height\n\n\t\t\t// If reaching top, scroll up. Using 100 because of the floating header\n\t\t\tif (event.clientY < tableTop + 100) {\n\t\t\t\ttableElement.scrollTop = tableElement.scrollTop - 25\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If reaching bottom, scroll down\n\t\t\tif (event.clientY > tableBottom - 50) {\n\t\t\t\ttableElement.scrollTop = tableElement.scrollTop + 25\n\t\t\t}\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.files-list {\n\t--row-height: 55px;\n\t--cell-margin: 14px;\n\n\t--checkbox-padding: calc((var(--row-height) - var(--checkbox-size)) / 2);\n\t--checkbox-size: 24px;\n\t--clickable-area: 44px;\n\t--icon-preview-size: 32px;\n\n\toverflow: auto;\n\theight: 100%;\n\twill-change: scroll-position;\n\n\t& :deep() {\n\t\t// Table head, body and footer\n\t\ttbody {\n\t\t\twill-change: padding;\n\t\t\tcontain: layout paint style;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100%;\n\t\t\t// Necessary for virtual scrolling absolute\n\t\t\tposition: relative;\n\n\t\t\t/* Hover effect on tbody lines only */\n\t\t\ttr {\n\t\t\t\tcontain: strict;\n\t\t\t\t&:hover,\n\t\t\t\t&:focus {\n\t\t\t\t\tbackground-color: var(--color-background-dark);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Before table and thead\n\t\t.files-list__before {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\n\t\t.files-list__selected {\n\t\t\tpadding-right: 12px;\n\t\t\twhite-space: nowrap;\n\t\t}\n\n\t\t.files-list__table {\n\t\t\tdisplay: block;\n\n\t\t\t&.files-list__table--with-thead-overlay {\n\t\t\t\t// Hide the table header below the overlay\n\t\t\t\tmargin-top: calc(-1 * var(--row-height));\n\t\t\t}\n\t\t}\n\n\t\t.files-list__thead-overlay {\n\t\t\t// Pinned on top when scrolling\n\t\t\tposition: sticky;\n\t\t\ttop: 0;\n\t\t\t// Save space for a row checkbox\n\t\t\tmargin-left: var(--row-height);\n\t\t\t// More than .files-list__thead\n\t\t\tz-index: 20;\n\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\n\t\t\t// Reuse row styles\n\t\t\tbackground-color: var(--color-main-background);\n\t\t\tborder-bottom: 1px solid var(--color-border);\n\t\t\theight: var(--row-height);\n\t\t}\n\n\t\t.files-list__thead,\n\t\t.files-list__tfoot {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\twidth: 100%;\n\t\t\tbackground-color: var(--color-main-background);\n\n\t\t}\n\n\t\t// Table header\n\t\t.files-list__thead {\n\t\t\t// Pinned on top when scrolling\n\t\t\tposition: sticky;\n\t\t\tz-index: 10;\n\t\t\ttop: 0;\n\t\t}\n\n\t\t// Table footer\n\t\t.files-list__tfoot {\n\t\t\tmin-height: 300px;\n\t\t}\n\n\t\ttr {\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\twidth: 100%;\n\t\t\tuser-select: none;\n\t\t\tborder-bottom: 1px solid var(--color-border);\n\t\t\tbox-sizing: border-box;\n\t\t\tuser-select: none;\n\t\t\theight: var(--row-height);\n\t\t}\n\n\t\ttd, th {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tflex: 0 0 auto;\n\t\t\tjustify-content: left;\n\t\t\twidth: var(--row-height);\n\t\t\theight: var(--row-height);\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tcolor: var(--color-text-maxcontrast);\n\t\t\tborder: none;\n\n\t\t\t// Columns should try to add any text\n\t\t\t// node wrapped in a span. That should help\n\t\t\t// with the ellipsis on overflow.\n\t\t\tspan {\n\t\t\t\toverflow: hidden;\n\t\t\t\twhite-space: nowrap;\n\t\t\t\ttext-overflow: ellipsis;\n\t\t\t}\n\t\t}\n\n\t\t.files-list__row--failed {\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\topacity: .1;\n\t\t\tz-index: -1;\n\t\t\tbackground: var(--color-error);\n\t\t}\n\n\t\t.files-list__row-checkbox {\n\t\t\tjustify-content: center;\n\n\t\t\t.checkbox-radio-switch {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\n\t\t\t\t--icon-size: var(--checkbox-size);\n\n\t\t\t\tlabel.checkbox-radio-switch__label {\n\t\t\t\t\twidth: var(--clickable-area);\n\t\t\t\t\theight: var(--clickable-area);\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: calc((var(--clickable-area) - var(--checkbox-size)) / 2);\n\t\t\t\t}\n\n\t\t\t\t.checkbox-radio-switch__icon {\n\t\t\t\t\tmargin: 0 !important;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.files-list__row {\n\t\t\t&:hover, &:focus, &:active, &--active, &--dragover {\n\t\t\t\t// WCAG AA compliant\n\t\t\t\tbackground-color: var(--color-background-hover);\n\t\t\t\t// text-maxcontrast have been designed to pass WCAG AA over\n\t\t\t\t// a white background, we need to adjust then.\n\t\t\t\t--color-text-maxcontrast: var(--color-main-text);\n\t\t\t\t> * {\n\t\t\t\t\t--color-border: var(--color-border-dark);\n\t\t\t\t}\n\n\t\t\t\t// Hover state of the row should also change the favorite markers background\n\t\t\t\t.favorite-marker-icon svg path {\n\t\t\t\t\tstroke: var(--color-background-hover);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&--dragover * {\n\t\t\t\t// Prevent dropping on row children\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\t\t}\n\n\t\t// Entry preview or mime icon\n\t\t.files-list__row-icon {\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\toverflow: visible;\n\t\t\talign-items: center;\n\t\t\t// No shrinking or growing allowed\n\t\t\tflex: 0 0 var(--icon-preview-size);\n\t\t\tjustify-content: center;\n\t\t\twidth: var(--icon-preview-size);\n\t\t\theight: 100%;\n\t\t\t// Show same padding as the checkbox right padding for visual balance\n\t\t\tmargin-right: var(--checkbox-padding);\n\t\t\tcolor: var(--color-primary-element);\n\n\t\t\t// Icon is also clickable\n\t\t\t* {\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\n\t\t\t& > span {\n\t\t\t\tjustify-content: flex-start;\n\n\t\t\t\t&:not(.files-list__row-icon-favorite) svg {\n\t\t\t\t\twidth: var(--icon-preview-size);\n\t\t\t\t\theight: var(--icon-preview-size);\n\t\t\t\t}\n\n\t\t\t\t// Slightly increase the size of the folder icon\n\t\t\t\t&.folder-icon,\n\t\t\t\t&.folder-open-icon {\n\t\t\t\t\tmargin: -3px;\n\t\t\t\t\tsvg {\n\t\t\t\t\t\twidth: calc(var(--icon-preview-size) + 6px);\n\t\t\t\t\t\theight: calc(var(--icon-preview-size) + 6px);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-preview {\n\t\t\t\toverflow: hidden;\n\t\t\t\twidth: var(--icon-preview-size);\n\t\t\t\theight: var(--icon-preview-size);\n\t\t\t\tborder-radius: var(--border-radius);\n\t\t\t\t// Center and contain the preview\n\t\t\t\tobject-fit: contain;\n\t\t\t\tobject-position: center;\n\n\t\t\t\t/* Preview not loaded animation effect */\n\t\t\t\t&:not(.files-list__row-icon-preview--loaded) {\n\t\t\t\t\tbackground: var(--color-loading-dark);\n\t\t\t\t\t// animation: preview-gradient-fade 1.2s ease-in-out infinite;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-favorite {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0px;\n\t\t\t\tright: -10px;\n\t\t\t}\n\n\t\t\t// File and folder overlay\n\t\t\t&-overlay {\n\t\t\t\tposition: absolute;\n\t\t\t\tmax-height: calc(var(--icon-preview-size) * 0.5);\n\t\t\t\tmax-width: calc(var(--icon-preview-size) * 0.5);\n\t\t\t\tcolor: var(--color-primary-element-text);\n\t\t\t\t// better alignment with the folder icon\n\t\t\t\tmargin-top: 2px;\n\n\t\t\t\t// Improve icon contrast with a background for files\n\t\t\t\t&--file {\n\t\t\t\t\tcolor: var(--color-main-text);\n\t\t\t\t\tbackground: var(--color-main-background);\n\t\t\t\t\tborder-radius: 100%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Entry link\n\t\t.files-list__row-name {\n\t\t\t// Prevent link from overflowing\n\t\t\toverflow: hidden;\n\t\t\t// Take as much space as possible\n\t\t\tflex: 1 1 auto;\n\n\t\t\ta {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\t// Fill cell height and width\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\t// Necessary for flex grow to work\n\t\t\t\tmin-width: 0;\n\n\t\t\t\t// Already added to the inner text, see rule below\n\t\t\t\t&:focus-visible {\n\t\t\t\t\toutline: none;\n\t\t\t\t}\n\n\t\t\t\t// Keyboard indicator a11y\n\t\t\t\t&:focus .files-list__row-name-text {\n\t\t\t\t\toutline: 2px solid var(--color-main-text) !important;\n\t\t\t\t\tborder-radius: 20px;\n\t\t\t\t}\n\t\t\t\t&:focus:not(:focus-visible) .files-list__row-name-text {\n\t\t\t\t\toutline: none !important;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.files-list__row-name-text {\n\t\t\t\tcolor: var(--color-main-text);\n\t\t\t\t// Make some space for the outline\n\t\t\t\tpadding: 5px 10px;\n\t\t\t\tmargin-left: -10px;\n\t\t\t\t// Align two name and ext\n\t\t\t\tdisplay: inline-flex;\n\t\t\t}\n\n\t\t\t.files-list__row-name-ext {\n\t\t\t\tcolor: var(--color-text-maxcontrast);\n\t\t\t\t// always show the extension\n\t\t\t\toverflow: visible;\n\t\t\t}\n\t\t}\n\n\t\t// Rename form\n\t\t.files-list__row-rename {\n\t\t\twidth: 100%;\n\t\t\tmax-width: 600px;\n\t\t\tinput {\n\t\t\t\twidth: 100%;\n\t\t\t\t// Align with text, 0 - padding - border\n\t\t\t\tmargin-left: -8px;\n\t\t\t\tpadding: 2px 6px;\n\t\t\t\tborder-width: 2px;\n\n\t\t\t\t&:invalid {\n\t\t\t\t\t// Show red border on invalid input\n\t\t\t\t\tborder-color: var(--color-error);\n\t\t\t\t\tcolor: red;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.files-list__row-actions {\n\t\t\t// take as much space as necessary\n\t\t\twidth: auto;\n\n\t\t\t// Add margin to all cells after the actions\n\t\t\t& ~ td,\n\t\t\t& ~ th {\n\t\t\t\tmargin: 0 var(--cell-margin);\n\t\t\t}\n\n\t\t\tbutton {\n\t\t\t\t.button-vue__text {\n\t\t\t\t\t// Remove bold from default button styling\n\t\t\t\t\tfont-weight: normal;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.files-list__row-action--inline {\n\t\t\tmargin-right: 7px;\n\t\t}\n\n\t\t.files-list__row-mtime,\n\t\t.files-list__row-size {\n\t\t\tcolor: var(--color-text-maxcontrast);\n\t\t}\n\t\t.files-list__row-size {\n\t\t\twidth: calc(var(--row-height) * 1.5);\n\t\t\t// Right align content/text\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t.files-list__row-mtime {\n\t\t\twidth: calc(var(--row-height) * 2);\n\t\t}\n\n\t\t.files-list__row-column-custom {\n\t\t\twidth: calc(var(--row-height) * 2);\n\t\t}\n\t}\n}\n</style>\n\n<style lang=\"scss\">\n// Grid mode\ntbody.files-list__tbody.files-list__tbody--grid {\n\t--half-clickable-area: calc(var(--clickable-area) / 2);\n\t--row-width: 160px;\n\t// We use half of the clickable area as visual balance margin\n\t--row-height: calc(var(--row-width) - var(--half-clickable-area));\n\t--icon-preview-size: calc(var(--row-width) - var(--clickable-area));\n\t--checkbox-padding: 0px;\n\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fill, var(--row-width));\n\tgrid-gap: 15px;\n\trow-gap: 15px;\n\n\talign-content: center;\n\talign-items: center;\n\tjustify-content: space-around;\n\tjustify-items: center;\n\n\ttr {\n\t\twidth: var(--row-width);\n\t\theight: calc(var(--row-height) + var(--clickable-area));\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t}\n\n\t// Checkbox in the top left\n\t.files-list__row-checkbox {\n\t\tposition: absolute;\n\t\tz-index: 9;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: hidden;\n\t\twidth: var(--clickable-area);\n\t\theight: var(--clickable-area);\n\t\tborder-radius: var(--half-clickable-area);\n\t}\n\n\t// Star icon in the top right\n\t.files-list__row-icon-favorite {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\twidth: var(--clickable-area);\n\t\theight: var(--clickable-area);\n\t}\n\n\t.files-list__row-name {\n\t\tdisplay: grid;\n\t\tjustify-content: stretch;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tgrid-auto-rows: var(--row-height) var(--clickable-area);\n\n\t\tspan.files-list__row-icon {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\t// Visual balance, we use half of the clickable area\n\t\t\t// as a margin around the preview\n\t\t\tpadding-top: var(--half-clickable-area);\n\t\t}\n\n\t\ta.files-list__row-name-link {\n\t\t\t// Minus action menu\n\t\t\twidth: calc(100% - var(--clickable-area));\n\t\t\theight: var(--clickable-area);\n\t\t}\n\n\t\t.files-list__row-name-text {\n\t\t\tmargin: 0;\n\t\t\tpadding-right: 0;\n\t\t}\n\t}\n\n\t.files-list__row-actions {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\twidth: var(--clickable-area);\n\t\theight: var(--clickable-area);\n\t}\n}\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div v-show=\"dragover\"\n\t\tdata-cy-files-drag-drop-area\n\t\tclass=\"files-list__drag-drop-notice\"\n\t\t@drop=\"onDrop\">\n\t\t<div class=\"files-list__drag-drop-notice-wrapper\">\n\t\t\t<template v-if=\"canUpload && !isQuotaExceeded\">\n\t\t\t\t<TrayArrowDownIcon :size=\"48\" />\n\t\t\t\t<h3 class=\"files-list-drag-drop-notice__title\">\n\t\t\t\t\t{{ t('files', 'Drag and drop files here to upload') }}\n\t\t\t\t</h3>\n\t\t\t</template>\n\n\t\t\t<!-- Not permitted to drop files here -->\n\t\t\t<template v-else>\n\t\t\t\t<h3 class=\"files-list-drag-drop-notice__title\">\n\t\t\t\t\t{{ cantUploadLabel }}\n\t\t\t\t</h3>\n\t\t\t</template>\n\t\t</div>\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { Folder, Permission } from '@nextcloud/files'\nimport { showError } from '@nextcloud/dialogs'\nimport { translate as t } from '@nextcloud/l10n'\nimport { UploadStatus } from '@nextcloud/upload'\n\nimport TrayArrowDownIcon from 'vue-material-design-icons/TrayArrowDown.vue'\n\nimport logger from '../logger.js'\nimport { dataTransferToFileTree, onDropExternalFiles } from '../services/DropService'\n\nexport default defineComponent({\n\tname: 'DragAndDropNotice',\n\n\tcomponents: {\n\t\tTrayArrowDownIcon,\n\t},\n\n\tprops: {\n\t\tcurrentFolder: {\n\t\t\ttype: Folder,\n\t\t\trequired: true,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tdragover: false,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcurrentView() {\n\t\t\treturn this.$navigation.active\n\t\t},\n\n\t\t/**\n\t\t * Check if the current folder has create permissions\n\t\t */\n\t\tcanUpload() {\n\t\t\treturn this.currentFolder && (this.currentFolder.permissions & Permission.CREATE) !== 0\n\t\t},\n\t\tisQuotaExceeded() {\n\t\t\treturn this.currentFolder?.attributes?.['quota-available-bytes'] === 0\n\t\t},\n\n\t\tcantUploadLabel() {\n\t\t\tif (this.isQuotaExceeded) {\n\t\t\t\treturn this.t('files', 'Your have used your space quota and cannot upload files anymore')\n\t\t\t} else if (!this.canUpload) {\n\t\t\t\treturn this.t('files', 'You don’t have permission to upload or create files here')\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\t},\n\n\tmounted() {\n\t\t// Add events on parent to cover both the table and DragAndDrop notice\n\t\tconst mainContent = window.document.querySelector('main.app-content') as HTMLElement\n\t\tmainContent.addEventListener('dragover', this.onDragOver)\n\t\tmainContent.addEventListener('dragleave', this.onDragLeave)\n\t\tmainContent.addEventListener('drop', this.onContentDrop)\n\t},\n\n\tbeforeDestroy() {\n\t\tconst mainContent = window.document.querySelector('main.app-content') as HTMLElement\n\t\tmainContent.removeEventListener('dragover', this.onDragOver)\n\t\tmainContent.removeEventListener('dragleave', this.onDragLeave)\n\t\tmainContent.removeEventListener('drop', this.onContentDrop)\n\t},\n\n\tmethods: {\n\t\tonDragOver(event: DragEvent) {\n\t\t\t// Needed to keep the drag/drop events chain working\n\t\t\tevent.preventDefault()\n\n\t\t\tconst isForeignFile = event.dataTransfer?.types.includes('Files')\n\t\t\tif (isForeignFile) {\n\t\t\t\t// Only handle uploading of outside files (not Nextcloud files)\n\t\t\t\tthis.dragover = true\n\t\t\t}\n\t\t},\n\n\t\tonDragLeave(event: DragEvent) {\n\t\t\t// Counter bubbling, make sure we're ending the drag\n\t\t\t// only when we're leaving the current element\n\t\t\t// Avoid flickering\n\t\t\tconst currentTarget = event.currentTarget as HTMLElement\n\t\t\tif (currentTarget?.contains((event.relatedTarget ?? event.target) as HTMLElement)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (this.dragover) {\n\t\t\t\tthis.dragover = false\n\t\t\t}\n\t\t},\n\n\t\tonContentDrop(event: DragEvent) {\n\t\t\tlogger.debug('Drag and drop cancelled, dropped on empty space', { event })\n\t\t\tevent.preventDefault()\n\t\t\tif (this.dragover) {\n\t\t\t\tthis.dragover = false\n\t\t\t}\n\t\t},\n\n\t\tasync onDrop(event: DragEvent) {\n\t\t\t// cantUploadLabel is null if we can upload\n\t\t\tif (this.cantUploadLabel) {\n\t\t\t\tshowError(this.cantUploadLabel)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (this.$el.querySelector('tbody')?.contains(event.target as Node)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tevent.preventDefault()\n\t\t\tevent.stopPropagation()\n\n\t\t\t// Caching the selection\n\t\t\tconst items: DataTransferItem[] = [...event.dataTransfer?.items || []]\n\n\t\t\t// We need to process the dataTransfer ASAP before the\n\t\t\t// browser clears it. This is why we cache the items too.\n\t\t\tconst fileTree = await dataTransferToFileTree(items)\n\n\t\t\t// We might not have the target directory fetched yet\n\t\t\tconst contents = await this.currentView?.getContents(this.currentFolder.path)\n\t\t\tconst folder = contents?.folder\n\t\t\tif (!folder) {\n\t\t\t\tshowError(this.t('files', 'Target folder does not exist any more'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If another button is pressed, cancel it. This\n\t\t\t// allows cancelling the drag with the right click.\n\t\t\tif (event.button) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlogger.debug('Dropped', { event, folder, fileTree })\n\n\t\t\t// Check whether we're uploading files\n\t\t\tconst uploads = await onDropExternalFiles(fileTree, folder, contents.contents)\n\n\t\t\t// Scroll to last successful upload in current directory if terminated\n\t\t\tconst lastUpload = uploads.findLast((upload) => upload.status !== UploadStatus.FAILED\n\t\t\t\t&& !upload.file.webkitRelativePath.includes('/')\n\t\t\t\t&& upload.response?.headers?.['oc-fileid']\n\t\t\t\t// Only use the last ID if it's in the current folder\n\t\t\t\t&& upload.source.replace(folder.source, '').split('/').length === 2)\n\n\t\t\tif (lastUpload !== undefined) {\n\t\t\t\tlogger.debug('Scrolling to last upload in current folder', { lastUpload })\n\t\t\t\tthis.$router.push({\n\t\t\t\t\t...this.$route,\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tview: this.$route.params?.view ?? 'files',\n\t\t\t\t\t\tfileid: parseInt(lastUpload.response!.headers['oc-fileid']),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.dragover = false\n\t\t},\n\n\t\tt,\n\t},\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.files-list__drag-drop-notice {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\t// Breadcrumbs height + row thead height\n\tmin-height: calc(58px + 55px);\n\tmargin: 0;\n\tuser-select: none;\n\tcolor: var(--color-text-maxcontrast);\n\tbackground-color: var(--color-main-background);\n\tborder-color: black;\n\n\th3 {\n\t\tmargin-left: 16px;\n\t\tcolor: inherit;\n\t}\n\n\t&-wrapper {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\theight: 15vh;\n\t\tmax-height: 70%;\n\t\tpadding: 0 5vw;\n\t\tborder: 2px var(--color-border-dark) dashed;\n\t\tborder-radius: var(--border-radius-large);\n\t}\n}\n\n</style>\n","<!--\n  - SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcAppContent :page-heading=\"pageHeading\" data-cy-files-content>\n\t\t<div class=\"files-list__header\">\n\t\t\t<!-- Current folder breadcrumbs -->\n\t\t\t<BreadCrumbs :path=\"dir\" @reload=\"fetchContent\">\n\t\t\t\t<template #actions>\n\t\t\t\t\t<!-- Sharing button -->\n\t\t\t\t\t<NcButton v-if=\"canShare && filesListWidth >= 512\"\n\t\t\t\t\t\t:aria-label=\"shareButtonLabel\"\n\t\t\t\t\t\t:class=\"{ 'files-list__header-share-button--shared': shareButtonType }\"\n\t\t\t\t\t\t:title=\"shareButtonLabel\"\n\t\t\t\t\t\tclass=\"files-list__header-share-button\"\n\t\t\t\t\t\ttype=\"tertiary\"\n\t\t\t\t\t\t@click=\"openSharingSidebar\">\n\t\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t\t<LinkIcon v-if=\"shareButtonType === Type.SHARE_TYPE_LINK\" />\n\t\t\t\t\t\t\t<AccountPlusIcon v-else :size=\"20\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</NcButton>\n\n\t\t\t\t\t<!-- Disabled upload button -->\n\t\t\t\t\t<NcButton v-if=\"!canUpload || isQuotaExceeded\"\n\t\t\t\t\t\t:aria-label=\"cantUploadLabel\"\n\t\t\t\t\t\t:title=\"cantUploadLabel\"\n\t\t\t\t\t\tclass=\"files-list__header-upload-button--disabled\"\n\t\t\t\t\t\t:disabled=\"true\"\n\t\t\t\t\t\ttype=\"secondary\">\n\t\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t\t<PlusIcon :size=\"20\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t{{ t('files', 'New') }}\n\t\t\t\t\t</NcButton>\n\n\t\t\t\t\t<!-- Uploader -->\n\t\t\t\t\t<UploadPicker v-else-if=\"currentFolder\"\n\t\t\t\t\t\t:content=\"dirContents\"\n\t\t\t\t\t\t:destination=\"currentFolder\"\n\t\t\t\t\t\t:multiple=\"true\"\n\t\t\t\t\t\tclass=\"files-list__header-upload-button\"\n\t\t\t\t\t\t@failed=\"onUploadFail\"\n\t\t\t\t\t\t@uploaded=\"onUpload\" />\n\t\t\t\t</template>\n\t\t\t</BreadCrumbs>\n\n\t\t\t<NcButton v-if=\"filesListWidth >= 512 && enableGridView\"\n\t\t\t\t:aria-label=\"gridViewButtonLabel\"\n\t\t\t\t:title=\"gridViewButtonLabel\"\n\t\t\t\tclass=\"files-list__header-grid-button\"\n\t\t\t\ttype=\"tertiary\"\n\t\t\t\t@click=\"toggleGridView\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<ListViewIcon v-if=\"userConfig.grid_view\" />\n\t\t\t\t\t<ViewGridIcon v-else />\n\t\t\t\t</template>\n\t\t\t</NcButton>\n\n\t\t\t<!-- Secondary loading indicator -->\n\t\t\t<NcLoadingIcon v-if=\"isRefreshing\" class=\"files-list__refresh-icon\" />\n\t\t</div>\n\n\t\t<!-- Drag and drop notice -->\n\t\t<DragAndDropNotice v-if=\"!loading && canUpload\" :current-folder=\"currentFolder\" />\n\n\t\t<!-- Initial loading -->\n\t\t<NcLoadingIcon v-if=\"loading && !isRefreshing\"\n\t\t\tclass=\"files-list__loading-icon\"\n\t\t\t:size=\"38\"\n\t\t\t:name=\"t('files', 'Loading current folder')\" />\n\n\t\t<!-- Empty content placeholder -->\n\t\t<NcEmptyContent v-else-if=\"!loading && isEmptyDir\"\n\t\t\t:name=\"currentView?.emptyTitle || t('files', 'No files in here')\"\n\t\t\t:description=\"currentView?.emptyCaption || t('files', 'Upload some content or sync with your devices!')\"\n\t\t\tdata-cy-files-content-empty>\n\t\t\t<template v-if=\"dir !== '/'\" #action>\n\t\t\t\t<!-- Uploader -->\n\t\t\t\t<UploadPicker v-if=\"currentFolder && canUpload && !isQuotaExceeded\"\n\t\t\t\t\t:content=\"dirContents\"\n\t\t\t\t\t:destination=\"currentFolder\"\n\t\t\t\t\tclass=\"files-list__header-upload-button\"\n\t\t\t\t\tmultiple\n\t\t\t\t\t@failed=\"onUploadFail\"\n\t\t\t\t\t@uploaded=\"onUpload\" />\n\t\t\t\t<NcButton v-else\n\t\t\t\t\t:aria-label=\"t('files', 'Go to the previous folder')\"\n\t\t\t\t\t:to=\"toPreviousDir\"\n\t\t\t\t\ttype=\"primary\">\n\t\t\t\t\t{{ t('files', 'Go back') }}\n\t\t\t\t</NcButton>\n\t\t\t</template>\n\t\t\t<template #icon>\n\t\t\t\t<NcIconSvgWrapper :svg=\"currentView.icon\" />\n\t\t\t</template>\n\t\t</NcEmptyContent>\n\n\t\t<!-- File list -->\n\t\t<FilesListVirtual v-else\n\t\t\tref=\"filesListVirtual\"\n\t\t\t:current-folder=\"currentFolder\"\n\t\t\t:current-view=\"currentView\"\n\t\t\t:nodes=\"dirContentsSorted\" />\n\t</NcAppContent>\n</template>\n\n<script lang=\"ts\">\nimport type { View, ContentsWithRoot } from '@nextcloud/files'\nimport type { Upload } from '@nextcloud/upload'\nimport type { CancelablePromise } from 'cancelable-promise'\nimport type { ComponentPublicInstance } from 'vue'\nimport type { Route } from 'vue-router'\nimport type { UserConfig } from '../types.ts'\n\nimport { getCapabilities } from '@nextcloud/capabilities'\nimport { emit, subscribe, unsubscribe } from '@nextcloud/event-bus'\nimport { Folder, Node, Permission } from '@nextcloud/files'\nimport { translate as t } from '@nextcloud/l10n'\nimport { join, dirname } from 'path'\nimport { showError } from '@nextcloud/dialogs'\nimport { Type } from '@nextcloud/sharing'\nimport { UploadPicker } from '@nextcloud/upload'\nimport { loadState } from '@nextcloud/initial-state'\nimport { defineComponent } from 'vue'\n\nimport LinkIcon from 'vue-material-design-icons/Link.vue'\nimport ListViewIcon from 'vue-material-design-icons/FormatListBulletedSquare.vue'\nimport NcAppContent from '@nextcloud/vue/dist/Components/NcAppContent.js'\nimport NcButton from '@nextcloud/vue/dist/Components/NcButton.js'\nimport NcEmptyContent from '@nextcloud/vue/dist/Components/NcEmptyContent.js'\nimport NcIconSvgWrapper from '@nextcloud/vue/dist/Components/NcIconSvgWrapper.js'\nimport NcLoadingIcon from '@nextcloud/vue/dist/Components/NcLoadingIcon.js'\nimport PlusIcon from 'vue-material-design-icons/Plus.vue'\nimport AccountPlusIcon from 'vue-material-design-icons/AccountPlus.vue'\nimport ViewGridIcon from 'vue-material-design-icons/ViewGrid.vue'\n\nimport { action as sidebarAction } from '../actions/sidebarAction.ts'\nimport { useFilesStore } from '../store/files.ts'\nimport { usePathsStore } from '../store/paths.ts'\nimport { useSelectionStore } from '../store/selection.ts'\nimport { useUploaderStore } from '../store/uploader.ts'\nimport { useUserConfigStore } from '../store/userconfig.ts'\nimport { useViewConfigStore } from '../store/viewConfig.ts'\nimport { orderBy } from '../services/SortingService.ts'\nimport BreadCrumbs from '../components/BreadCrumbs.vue'\nimport FilesListVirtual from '../components/FilesListVirtual.vue'\nimport filesListWidthMixin from '../mixins/filesListWidth.ts'\nimport filesSortingMixin from '../mixins/filesSorting.ts'\nimport logger from '../logger.js'\nimport DragAndDropNotice from '../components/DragAndDropNotice.vue'\nimport debounce from 'debounce'\n\nconst isSharingEnabled = (getCapabilities() as { files_sharing?: boolean })?.files_sharing !== undefined\n\nexport default defineComponent({\n\tname: 'FilesList',\n\n\tcomponents: {\n\t\tBreadCrumbs,\n\t\tDragAndDropNotice,\n\t\tFilesListVirtual,\n\t\tLinkIcon,\n\t\tListViewIcon,\n\t\tNcAppContent,\n\t\tNcButton,\n\t\tNcEmptyContent,\n\t\tNcIconSvgWrapper,\n\t\tNcLoadingIcon,\n\t\tPlusIcon,\n\t\tAccountPlusIcon,\n\t\tUploadPicker,\n\t\tViewGridIcon,\n\t},\n\n\tmixins: [\n\t\tfilesListWidthMixin,\n\t\tfilesSortingMixin,\n\t],\n\n\tsetup() {\n\t\tconst filesStore = useFilesStore()\n\t\tconst pathsStore = usePathsStore()\n\t\tconst selectionStore = useSelectionStore()\n\t\tconst uploaderStore = useUploaderStore()\n\t\tconst userConfigStore = useUserConfigStore()\n\t\tconst viewConfigStore = useViewConfigStore()\n\n\t\tconst enableGridView = (loadState('core', 'config', [])['enable_non-accessible_features'] ?? true)\n\n\t\treturn {\n\t\t\tfilesStore,\n\t\t\tpathsStore,\n\t\t\tselectionStore,\n\t\t\tuploaderStore,\n\t\t\tuserConfigStore,\n\t\t\tviewConfigStore,\n\t\t\tenableGridView,\n\n\t\t\t// non reactive data\n\t\t\tType,\n\t\t}\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tfilterText: '',\n\t\t\tloading: true,\n\t\t\tpromise: null as CancelablePromise<ContentsWithRoot> | Promise<ContentsWithRoot> | null,\n\n\t\t\tunsubscribeStoreCallback: () => {},\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/**\n\t\t * Handle search event from unified search.\n\t\t */\n\t\tonSearch() {\n\t\t\treturn debounce((searchEvent: { query: string }) => {\n\t\t\t\tconsole.debug('Files app handling search event from unified search...', searchEvent)\n\t\t\t\tthis.filterText = searchEvent.query\n\t\t\t}, 500)\n\t\t},\n\n\t\tuserConfig(): UserConfig {\n\t\t\treturn this.userConfigStore.userConfig\n\t\t},\n\n\t\tcurrentView(): View {\n\t\t\treturn this.$navigation.active || this.$navigation.views.find((view) => view.id === (this.$route.params?.view ?? 'files'))!\n\t\t},\n\n\t\tpageHeading(): string {\n\t\t\treturn this.currentView?.name ?? t('files', 'Files')\n\t\t},\n\n\t\t/**\n\t\t * The current directory query.\n\t\t */\n\t\tdir(): string {\n\t\t\t// Remove any trailing slash but leave root slash\n\t\t\treturn (this.$route?.query?.dir?.toString() || '/').replace(/^(.+)\\/$/, '$1')\n\t\t},\n\n\t\t/**\n\t\t * The current file id\n\t\t */\n\t\tfileId(): number | null {\n\t\t\tconst number = Number.parseInt(this.$route?.params.fileid ?? '')\n\t\t\treturn Number.isNaN(number) ? null : number\n\t\t},\n\n\t\t/**\n\t\t * The current folder.\n\t\t */\n\t\tcurrentFolder(): Folder | undefined {\n\t\t\tif (!this.currentView?.id) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (this.dir === '/') {\n\t\t\t\treturn this.filesStore.getRoot(this.currentView.id)\n\t\t\t}\n\n\t\t\tconst source = this.pathsStore.getPath(this.currentView.id, this.dir)\n\t\t\tif (source === undefined) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\treturn this.filesStore.getNode(source) as Folder\n\t\t},\n\n\t\t/**\n\t\t * Directory content sorting parameters\n\t\t * Provided by an extra computed property for caching\n\t\t */\n\t\tsortingParameters() {\n\t\t\tconst identifiers = [\n\t\t\t\t// 1: Sort favorites first if enabled\n\t\t\t\t...(this.userConfig.sort_favorites_first ? [v => v.attributes?.favorite !== 1] : []),\n\t\t\t\t// 2: Sort folders first if sorting by name\n\t\t\t\t...(this.userConfig.sort_folders_first ? [v => v.type !== 'folder'] : []),\n\t\t\t\t// 3: Use sorting mode if NOT basename (to be able to use displayName too)\n\t\t\t\t...(this.sortingMode !== 'basename' ? [v => v[this.sortingMode]] : []),\n\t\t\t\t// 4: Use displayName if available, fallback to name\n\t\t\t\tv => v.attributes?.displayName || v.basename,\n\t\t\t\t// 5: Finally, use basename if all previous sorting methods failed\n\t\t\t\tv => v.basename,\n\t\t\t]\n\t\t\tconst orders = [\n\t\t\t\t// (for 1): always sort favorites before normal files\n\t\t\t\t...(this.userConfig.sort_favorites_first ? ['asc'] : []),\n\t\t\t\t// (for 2): always sort folders before files\n\t\t\t\t...(this.userConfig.sort_folders_first ? ['asc'] : []),\n\t\t\t\t// (for 3): Reverse if sorting by mtime as mtime higher means edited more recent -> lower\n\t\t\t\t...(this.sortingMode === 'mtime' ? [this.isAscSorting ? 'desc' : 'asc'] : []),\n\t\t\t\t// (also for 3 so make sure not to conflict with 2 and 3)\n\t\t\t\t...(this.sortingMode !== 'mtime' && this.sortingMode !== 'basename' ? [this.isAscSorting ? 'asc' : 'desc'] : []),\n\t\t\t\t// for 4: use configured sorting direction\n\t\t\t\tthis.isAscSorting ? 'asc' : 'desc',\n\t\t\t\t// for 5: use configured sorting direction\n\t\t\t\tthis.isAscSorting ? 'asc' : 'desc',\n\t\t\t] as ('asc'|'desc')[]\n\t\t\treturn [identifiers, orders] as const\n\t\t},\n\n\t\t/**\n\t\t * The current directory contents.\n\t\t */\n\t\tdirContentsSorted(): Node[] {\n\t\t\tif (!this.currentView) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tlet filteredDirContent = [...this.dirContents]\n\t\t\t// Filter based on the filterText obtained from nextcloud:unified-search.search event.\n\t\t\tif (this.filterText) {\n\t\t\t\tfilteredDirContent = filteredDirContent.filter(node => {\n\t\t\t\t\treturn node.basename.toLowerCase().includes(this.filterText.toLowerCase())\n\t\t\t\t})\n\t\t\t\tconsole.debug('Files view filtered', filteredDirContent)\n\t\t\t}\n\n\t\t\tconst customColumn = (this.currentView?.columns || [])\n\t\t\t\t.find(column => column.id === this.sortingMode)\n\n\t\t\t// Custom column must provide their own sorting methods\n\t\t\tif (customColumn?.sort && typeof customColumn.sort === 'function') {\n\t\t\t\tconst results = [...this.dirContents].sort(customColumn.sort)\n\t\t\t\treturn this.isAscSorting ? results : results.reverse()\n\t\t\t}\n\n\t\t\treturn orderBy(\n\t\t\t\tfilteredDirContent,\n\t\t\t\t...this.sortingParameters,\n\t\t\t)\n\t\t},\n\n\t\tdirContents(): Node[] {\n\t\t\tconst showHidden = this.userConfigStore?.userConfig.show_hidden\n\t\t\treturn (this.currentFolder?._children || [])\n\t\t\t\t.map(this.getNode)\n\t\t\t\t.filter(file => {\n\t\t\t\t\tif (!showHidden) {\n\t\t\t\t\t\treturn file && file?.attributes?.hidden !== true && !file?.basename.startsWith('.')\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !!file\n\t\t\t\t})\n\t\t},\n\n\t\t/**\n\t\t * The current directory is empty.\n\t\t */\n\t\tisEmptyDir(): boolean {\n\t\t\treturn this.dirContents.length === 0\n\t\t},\n\n\t\t/**\n\t\t * We are refreshing the current directory.\n\t\t * But we already have a cached version of it\n\t\t * that is not empty.\n\t\t */\n\t\tisRefreshing(): boolean {\n\t\t\treturn this.currentFolder !== undefined\n\t\t\t\t&& !this.isEmptyDir\n\t\t\t\t&& this.loading\n\t\t},\n\n\t\t/**\n\t\t * Route to the previous directory.\n\t\t */\n\t\ttoPreviousDir(): Route {\n\t\t\tconst dir = this.dir.split('/').slice(0, -1).join('/') || '/'\n\t\t\treturn { ...this.$route, query: { dir } }\n\t\t},\n\n\t\tshareAttributes(): number[] | undefined {\n\t\t\tif (!this.currentFolder?.attributes?.['share-types']) {\n\t\t\t\treturn undefined\n\t\t\t}\n\t\t\treturn Object.values(this.currentFolder?.attributes?.['share-types'] || {}).flat() as number[]\n\t\t},\n\t\tshareButtonLabel() {\n\t\t\tif (!this.shareAttributes) {\n\t\t\t\treturn t('files', 'Share')\n\t\t\t}\n\n\t\t\tif (this.shareButtonType === Type.SHARE_TYPE_LINK) {\n\t\t\t\treturn t('files', 'Shared by link')\n\t\t\t}\n\t\t\treturn t('files', 'Shared')\n\t\t},\n\t\tshareButtonType(): Type | null {\n\t\t\tif (!this.shareAttributes) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\t// If all types are links, show the link icon\n\t\t\tif (this.shareAttributes.some(type => type === Type.SHARE_TYPE_LINK)) {\n\t\t\t\treturn Type.SHARE_TYPE_LINK\n\t\t\t}\n\n\t\t\treturn Type.SHARE_TYPE_USER\n\t\t},\n\n\t\tgridViewButtonLabel() {\n\t\t\treturn this.userConfig.grid_view\n\t\t\t\t? t('files', 'Switch to list view')\n\t\t\t\t: t('files', 'Switch to grid view')\n\t\t},\n\n\t\t/**\n\t\t * Check if the current folder has create permissions\n\t\t */\n\t\tcanUpload() {\n\t\t\treturn this.currentFolder && (this.currentFolder.permissions & Permission.CREATE) !== 0\n\t\t},\n\t\tisQuotaExceeded() {\n\t\t\treturn this.currentFolder?.attributes?.['quota-available-bytes'] === 0\n\t\t},\n\t\tcantUploadLabel() {\n\t\t\tif (this.isQuotaExceeded) {\n\t\t\t\treturn t('files', 'Your have used your space quota and cannot upload files anymore')\n\t\t\t}\n\t\t\treturn t('files', 'You don’t have permission to upload or create files here')\n\t\t},\n\n\t\t/**\n\t\t * Check if current folder has share permissions\n\t\t */\n\t\tcanShare() {\n\t\t\treturn isSharingEnabled\n\t\t\t\t&& this.currentFolder && (this.currentFolder.permissions & Permission.SHARE) !== 0\n\t\t},\n\t},\n\n\twatch: {\n\t\tcurrentView(newView, oldView) {\n\t\t\tif (newView?.id === oldView?.id) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlogger.debug('View changed', { newView, oldView })\n\t\t\tthis.selectionStore.reset()\n\t\t\tthis.resetSearch()\n\t\t\tthis.fetchContent()\n\t\t},\n\n\t\tdir(newDir, oldDir) {\n\t\t\tlogger.debug('Directory changed', { newDir, oldDir })\n\t\t\t// TODO: preserve selection on browsing?\n\t\t\tthis.selectionStore.reset()\n\t\t\tthis.resetSearch()\n\t\t\tthis.fetchContent()\n\n\t\t\t// Scroll to top, force virtual scroller to re-render\n\t\t\tconst filesListVirtual = this.$refs?.filesListVirtual as ComponentPublicInstance<typeof FilesListVirtual> | undefined\n\t\t\tif (filesListVirtual?.$el) {\n\t\t\t\tfilesListVirtual.$el.scrollTop = 0\n\t\t\t}\n\t\t},\n\n\t\tdirContents(contents) {\n\t\t\tlogger.debug('Directory contents changed', { view: this.currentView, folder: this.currentFolder, contents })\n\t\t\temit('files:list:updated', { view: this.currentView, folder: this.currentFolder, contents })\n\t\t},\n\t},\n\n\tmounted() {\n\t\tthis.fetchContent()\n\n\t\tsubscribe('files:node:deleted', this.onNodeDeleted)\n\t\tsubscribe('files:node:updated', this.onUpdatedNode)\n\t\tsubscribe('nextcloud:unified-search.search', this.onSearch)\n\t\tsubscribe('nextcloud:unified-search.reset', this.onSearch)\n\n\t\t// reload on settings change\n\t\tthis.unsubscribeStoreCallback = this.userConfigStore.$subscribe(() => this.fetchContent(), { deep: true })\n\t},\n\n\tunmounted() {\n\t\tunsubscribe('files:node:deleted', this.onNodeDeleted)\n\t\tunsubscribe('files:node:updated', this.onUpdatedNode)\n\t\tunsubscribe('nextcloud:unified-search.search', this.onSearch)\n\t\tunsubscribe('nextcloud:unified-search.reset', this.onSearch)\n\t\tthis.unsubscribeStoreCallback()\n\t},\n\n\tmethods: {\n\t\tt,\n\n\t\tasync fetchContent() {\n\t\t\tthis.loading = true\n\t\t\tconst dir = this.dir\n\t\t\tconst currentView = this.currentView\n\n\t\t\tif (!currentView) {\n\t\t\t\tlogger.debug('The current view doesn\\'t exists or is not ready.', { currentView })\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If we have a cancellable promise ongoing, cancel it\n\t\t\tif (this.promise && 'cancel' in this.promise) {\n\t\t\t\tthis.promise.cancel()\n\t\t\t\tlogger.debug('Cancelled previous ongoing fetch')\n\t\t\t}\n\n\t\t\t// Fetch the current dir contents\n\t\t\tthis.promise = currentView.getContents(dir) as Promise<ContentsWithRoot>\n\t\t\ttry {\n\t\t\t\tconst { folder, contents } = await this.promise\n\t\t\t\tlogger.debug('Fetched contents', { dir, folder, contents })\n\n\t\t\t\t// Update store\n\t\t\t\tthis.filesStore.updateNodes(contents)\n\n\t\t\t\t// Define current directory children\n\t\t\t\t// TODO: make it more official\n\t\t\t\tthis.$set(folder, '_children', contents.map(node => node.source))\n\n\t\t\t\t// If we're in the root dir, define the root\n\t\t\t\tif (dir === '/') {\n\t\t\t\t\tthis.filesStore.setRoot({ service: currentView.id, root: folder })\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, add the folder to the store\n\t\t\t\t\tif (folder.fileid) {\n\t\t\t\t\t\tthis.filesStore.updateNodes([folder])\n\t\t\t\t\t\tthis.pathsStore.addPath({ service: currentView.id, source: folder.source, path: dir })\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If we're here, the view API messed up\n\t\t\t\t\t\tlogger.fatal('Invalid root folder returned', { dir, folder, currentView })\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update paths store\n\t\t\t\tconst folders = contents.filter(node => node.type === 'folder')\n\t\t\t\tfolders.forEach((node) => {\n\t\t\t\t\tthis.pathsStore.addPath({ service: currentView.id, source: node.source, path: join(dir, node.basename) })\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('Error while fetching content', { error })\n\t\t\t} finally {\n\t\t\t\tthis.loading = false\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Get a cached note from the store\n\t\t *\n\t\t * @param {number} fileId the file id to get\n\t\t * @return {Folder|File}\n\t\t */\n\t\tgetNode(fileId) {\n\t\t\treturn this.filesStore.getNode(fileId)\n\t\t},\n\n\t\t/**\n\t\t * Handle the node deleted event to reset open file\n\t\t * @param node The deleted node\n\t\t */\n\t\t onNodeDeleted(node: Node) {\n\t\t\tif (node.fileid && node.fileid === this.fileId) {\n\t\t\t\tif (node.fileid === this.currentFolder?.fileid) {\n\t\t\t\t\t// Handle the edge case that the current directory is deleted\n\t\t\t\t\t// in this case we neeed to keept the current view but move to the parent directory\n\t\t\t\t\twindow.OCP.Files.Router.goToRoute(\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t{ view: this.$route.params.view },\n\t\t\t\t\t\t{ dir: this.currentFolder?.dirname ?? '/' },\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\t// If the currently active file is deleted we need to remove the fileid and possible the `openfile` query\n\t\t\t\t\twindow.OCP.Files.Router.goToRoute(\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t{ ...this.$route.params, fileid: undefined },\n\t\t\t\t\t\t{ ...this.$route.query, openfile: undefined },\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * The upload manager have finished handling the queue\n\t\t * @param {Upload} upload the uploaded data\n\t\t */\n\t\tonUpload(upload: Upload) {\n\t\t\t// Let's only refresh the current Folder\n\t\t\t// Navigating to a different folder will refresh it anyway\n\t\t\tconst destinationSource = dirname(upload.source)\n\t\t\tconst needsRefresh = destinationSource === this.currentFolder?.source\n\n\t\t\t// TODO: fetch uploaded files data only\n\t\t\t// Use parseInt(upload.response?.headers?.['oc-fileid']) to get the fileid\n\t\t\tif (needsRefresh) {\n\t\t\t\t// fetchContent will cancel the previous ongoing promise\n\t\t\t\tthis.fetchContent()\n\t\t\t}\n\t\t},\n\n\t\tasync onUploadFail(upload: Upload) {\n\t\t\tconst status = upload.response?.status || 0\n\n\t\t\t// Check known status codes\n\t\t\tif (status === 507) {\n\t\t\t\tshowError(t('files', 'Not enough free space'))\n\t\t\t\treturn\n\t\t\t} else if (status === 404 || status === 409) {\n\t\t\t\tshowError(t('files', 'Target folder does not exist any more'))\n\t\t\t\treturn\n\t\t\t} else if (status === 403) {\n\t\t\t\tshowError(t('files', 'Operation is blocked by access control'))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Else we try to parse the response error message\n\t\t\tif (typeof upload.response?.data === 'string') {\n\t\t\t\ttry {\n\t\t\t\t\tconst parser = new DOMParser()\n\t\t\t\t\tconst doc = parser.parseFromString(upload.response.data, 'text/xml')\n\t\t\t\t\tconst message = doc.getElementsByTagName('s:message')[0]?.textContent ?? ''\n\t\t\t\t\tif (message.trim() !== '') {\n\t\t\t\t\t\t// The server message is also translated\n\t\t\t\t\t\tshowError(t('files', 'Error during upload: {message}', { message }))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogger.error('Could not parse message', { error })\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finally, check the status code if we have one\n\t\t\tif (status !== 0) {\n\t\t\t\tshowError(t('files', 'Error during upload, status code {status}', { status }))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tshowError(t('files', 'Unknown error during upload'))\n\t\t},\n\n\t\t/**\n\t\t * Refreshes the current folder on update.\n\t\t *\n\t\t * @param node is the file/folder being updated.\n\t\t */\n\t\tonUpdatedNode(node?: Node) {\n\t\t\tif (node?.fileid === this.currentFolder?.fileid) {\n\t\t\t\tthis.fetchContent()\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Reset the search query\n\t\t */\n\t\tresetSearch() {\n\t\t\tthis.filterText = ''\n\t\t},\n\n\t\topenSharingSidebar() {\n\t\t\tif (!this.currentFolder) {\n\t\t\t\tlogger.debug('No current folder found for opening sharing sidebar')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (window?.OCA?.Files?.Sidebar?.setActiveTab) {\n\t\t\t\twindow.OCA.Files.Sidebar.setActiveTab('sharing')\n\t\t\t}\n\t\t\tsidebarAction.exec(this.currentFolder, this.currentView, this.currentFolder.path)\n\t\t},\n\t\ttoggleGridView() {\n\t\t\tthis.userConfigStore.update('grid_view', !this.userConfig.grid_view)\n\t\t},\n\t},\n})\n</script>\n\n<style scoped lang=\"scss\">\n.app-content {\n\t// Virtual list needs to be full height and is scrollable\n\tdisplay: flex;\n\toverflow: hidden;\n\tflex-direction: column;\n\tmax-height: 100%;\n\tposition: relative !important;\n}\n\n.files-list {\n\t&__header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\t// Do not grow or shrink (vertically)\n\t\tflex: 0 0;\n\t\tmax-width: 100%;\n\t\t// Align with the navigation toggle icon\n\t\tmargin-block: var(--app-navigation-padding, 4px);\n\t\tmargin-inline: calc(var(--default-clickable-area, 44px) + 2 * var(--app-navigation-padding, 4px)) var(--app-navigation-padding, 4px);\n\n\t\t>* {\n\t\t\t// Do not grow or shrink (horizontally)\n\t\t\t// Only the breadcrumbs shrinks\n\t\t\tflex: 0 0;\n\t\t}\n\n\t\t&-share-button {\n\t\t\tcolor: var(--color-text-maxcontrast) !important;\n\n\t\t\t&--shared {\n\t\t\t\tcolor: var(--color-main-text) !important;\n\t\t\t}\n\t\t}\n\t}\n\n\t&__refresh-icon {\n\t\tflex: 0 0 44px;\n\t\twidth: 44px;\n\t\theight: 44px;\n\t}\n\n\t&__loading-icon {\n\t\tmargin: auto;\n\t}\n}\n</style>\n","<!--\n - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n -->\n<template>\n\t<NcContent app-name=\"files\">\n\t\t<Navigation />\n\t\t<FilesList />\n\t</NcContent>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport NcContent from '@nextcloud/vue/dist/Components/NcContent.js'\n\nimport Navigation from './views/Navigation.vue'\nimport FilesList from './views/FilesList.vue'\n\nexport default defineComponent({\n\tname: 'FilesApp',\n\n\tcomponents: {\n\t\tNcContent,\n\t\tFilesList,\n\t\tNavigation,\n\t},\n})\n</script>\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { PiniaVuePlugin } from 'pinia'\nimport { getNavigation } from '@nextcloud/files'\nimport Vue from 'vue'\n\nimport { pinia } from './store/index.ts'\nimport router from './router/router'\nimport RouterService from './services/RouterService'\nimport SettingsModel from './models/Setting.js'\nimport SettingsService from './services/Settings.js'\nimport FilesApp from './FilesApp.vue'\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ndeclare global {\n\tinterface Window {\n\t\tOC: any;\n\t\tOCA: any;\n\t\tOCP: any;\n\t}\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// Init private and public Files namespace\nwindow.OCA.Files = window.OCA.Files ?? {}\nwindow.OCP.Files = window.OCP.Files ?? {}\n\n// Expose router\nconst Router = new RouterService(router)\nObject.assign(window.OCP.Files, { Router })\n\n// Init Pinia store\nVue.use(PiniaVuePlugin)\n\n// Init Navigation Service\n// This only works with Vue 2 - with Vue 3 this will not modify the source but return just a oberserver\nconst Navigation = Vue.observable(getNavigation())\nVue.prototype.$navigation = Navigation\n\n// Init Files App Settings Service\nconst Settings = new SettingsService()\nObject.assign(window.OCA.Files, { Settings })\nObject.assign(window.OCA.Files.Settings, { Setting: SettingsModel })\n\nconst FilesAppVue = Vue.extend(FilesApp)\nnew FilesAppVue({\n\trouter,\n\tpinia,\n}).$mount('#content')\n"],"names":["Vue","Router","originalPush","to","onComplete","onAbort","err","router","generateUrl","query","result","queryString","RouterService","__publicField","path","replace","name","params","Setting$1","el","open","close","Settings$1","view","e","viewConfig","loadState","useViewConfigStore","args","viewConfigStore","defineStore","state","key","value","axios","emit","newDirection","subscribe","throttle","delay","callback","options","_ref","_ref$noTrailing","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","cancel","_ref2","_ref2$upcomingOnly","upcomingOnly","wrapper","_len","arguments_","_key","self","elapsed","exec","clear","debounce","_ref$atBegin","atBegin","_sfc_main","ChartPie","NcAppNavigationItem","NcProgressBar","usedQuotaByte","formatFileSize","_a","quotaByte","_b","_c","event","response","error","logger","showError","translate","Clipboard","NcAppSettingsDialog","NcAppSettingsSection","NcCheckboxRadioSwitch","NcInputField","Setting","useUserConfigStore","generateRemoteUrl","getCurrentUser","setting","showSuccess","_sfc_main$l","Cog","NavigationQuota","NcAppNavigation","NcIconSvgWrapper","SettingsModal","a","b","list","oldView","_d","isExpanded","dir","fetchNode","node","propfindPayload","davGetDefaultPropfind","client","davRootPath","davResultToNode","useFilesStore","fileStore","source","sources","fileId","service","nodes","files","acc","root","n","usePathsStore","pathsStore","payload","getNavigation","FileType","parentSource","parentFolder","useSelectionStore","selection","lastSelectedIndex","uploader","useUploaderStore","getUploader","stringify","orderBy","collection","identifiers","orders","sorting","_","index","collator","getLanguage","getCanonicalLocale","identifier","Directory","contents","directory","file","entry","traverseTree","resolve","reject","entries","readDirectory","dirReader","getEntries","results","createDirectoryIfNotExists","absolutePath","davClient","davGetClient","stat","resolveConflict","destination","conflicts","uploads","selected","renamed","openConflictPicker","showInfo","t","dataTransferToFileTree","items","item","warned","fileTree","showWarning","onDropExternalFiles","hasConflict","queue","uploadDirectoryContents","relativePath","join","joinPaths","errors","onDropInternalFiles","isCopy","NodeStatus","handleCopyMoveNodeTo","MoveCopyAction","useDragAndDropStore","filesListWidthMixin","defineComponent","fileListEl","_sfc_main$k","NcBreadcrumbs","NcBreadcrumb","draggingStore","filesStore","selectionStore","uploaderStore","cumulativePath","HomeSvg","basename","folder","canDrop","Permission","section","useActionsMenuStore","useRenamingStore","renamingStore","_sfc_main$j","FileMultipleIcon","FolderIcon","totalSize","total","size","getSummaryFor","preview","Preview","DragAndDropPreview","getDragAndDropPreview","_sfc_main$i","element","actions","getFileActions","_sfc_main$h","ArrowLeftIcon","CustomElementRender","NcActionButton","NcActions","NcActionSeparator","NcLoadingIcon","action","DefaultType","topActionsIds","arr","title","isSubmenu","displayName","success","id","menuAction","vOnClickOutside","FileEntryMixin","Folder","NcFile","Node","hashCode","extname","ext","canDrag","opened","contentRect","isMoreThanOneSelected","sidebarAction","currentTarget","image","useKeyboardStore","keyboardStore","_sfc_main$g","newSelectedIndex","isAlreadySelected","start","end","lastSelection","filesToSelect","forbiddenCharacters","_sfc_main$f","NcTextField","newName","enabledDefaultActions","renaming","input","trimmedName","char","extLength","length","oldName","oldEncodedSource","isAxiosError","_e","_sfc_main$d","StarSvg","_sfc_main$c","AccountGroupIcon","AccountPlusIcon","CollectivesIcon","FavoriteIcon","FileIcon","FolderOpenIcon","KeyIcon","LinkIcon","NetworkIcon","TagIcon","previewUrl","url","etag","isLivePhoto","PlayCircleIcon","shareTypes","_f","type","ShareType","_h","_g","_sfc_main$b","FileEntryActions","FileEntryCheckbox","FileEntryName","FileEntryPreview","NcDateTime","actionsMenuStore","ratio","mtime","moment","_sfc_main$a","_sfc_main$9","enabled","_sfc_main$8","View","column","filesSortingMixin","mapState","_sfc_main$7","MenuDown","MenuUp","NcButton","_sfc_main$6","FilesListTableHeaderButton","label","mode","_sfc_main$5","oldItemsKeys","unusedKeys","isOverScrolled","lastIndex","hiddenAfterItems","columnCount","oldColumnCount","before","thead","targetRow","scrollTop","topScroll","_sfc_main$4","selectionSources","failedSources","_sfc_main$3","FilesListHeader","FilesListTableFooter","FilesListTableHeader","VirtualList","FilesListTableHeaderActions","userConfigStore","FileEntry","FileEntryGrid","getFileListHeaders","defaultCaption","viewCaption","sortableCaption","virtualListNote","warn","defaultAction","tableElement","tableTop","tableBottom","_sfc_main$2","TrayArrowDownIcon","mainContent","lastUpload","upload","UploadStatus","isSharingEnabled","getCapabilities","_sfc_main$1","BreadCrumbs","DragAndDropNotice","FilesListVirtual","ListViewIcon","NcAppContent","NcEmptyContent","PlusIcon","UploadPicker","ViewGridIcon","enableGridView","Type","searchEvent","number","v","filteredDirContent","customColumn","showHidden","newView","newDir","oldDir","filesListVirtual","unsubscribe","currentView","dirname","status","message","NcContent","FilesList","Navigation","PiniaVuePlugin","Settings","SettingsService","SettingsModel","FilesAppVue","FilesApp","pinia"],"mappings":"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","x_google_ignoreList":[5]}