{"version":3,"file":"node_modules_nextcloud_dialogs_dist_chunks_PublicAuthPrompt-BSFsDqYB_mjs-node_modules_nextcloud_dialogs_dist_chunks_PublicAuthPrompt-BSFsDqYB_mjs.js?v=5414d4143400c9b713c3","mappingssources":["webpack:///nextcloud/node_modules/@nextcloud/dialogs/dist/chunks/PublicAuthPrompt-BSFsDqYB.mjs"],"sourcesContent":["import { defineComponent } from \"vue\";\nimport { getBuilder } from \"@nextcloud/browser-storage\";\nimport { setGuestNickname } from \"@nextcloud/auth\";\nimport { showError } from \"@nextcloud/dialogs\";\nimport NcDialog from \"@nextcloud/vue/components/NcDialog\";\nimport NcNoteCard from \"@nextcloud/vue/components/NcNoteCard\";\nimport NcTextField from \"@nextcloud/vue/components/NcTextField\";\nimport { t, n as normalizeComponent } from \"./_plugin-vue2_normalizer-jrlE7CJU.mjs\";\nimport { validateFilename, InvalidFilenameError, InvalidFilenameErrorReason } from \"@nextcloud/files\";\n/*!\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nfunction getGuestNameValidity(name) {\n  if (name.trim() === \"\") {\n    return t(\"Names must not be empty.\");\n  }\n  if (name.startsWith(\".\")) {\n    return t(\"Names must not start with a dot.\");\n  }\n  try {\n    validateFilename(name);\n    return \"\";\n  } catch (error) {\n    if (!(error instanceof InvalidFilenameError)) {\n      throw error;\n    }\n    switch (error.reason) {\n      case InvalidFilenameErrorReason.Character:\n        return t('\"{char}\" is not allowed inside a name.', { char: error.segment });\n      case InvalidFilenameErrorReason.ReservedName:\n        return t('\"{segment}\" is a reserved name and not allowed.', { segment: error.segment });\n      case InvalidFilenameErrorReason.Extension:\n        if (error.segment.match(/\\.[a-z]/i)) {\n          return t('\"{extension}\" is not an allowed name.', { extension: error.segment });\n        }\n        return t('Names must not end with \"{extension}\".', { extension: error.segment });\n      default:\n        return t(\"Invalid name.\");\n    }\n  }\n}\nconst storage = getBuilder(\"public\").build();\nconst _sfc_main = defineComponent({\n  name: \"PublicAuthPrompt\",\n  components: {\n    NcDialog,\n    NcNoteCard,\n    NcTextField\n  },\n  props: {\n    /**\n     * Preselected nickname\n     * @default '' No name preselected by default\n     */\n    nickname: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Dialog title\n     */\n    title: {\n      type: String,\n      default: t(\"Guest identification\")\n    },\n    /**\n     * Dialog text under the dialog title\n     * e.g 'Enter your name to access the file'\n     * @default '' Not shown by default\n     */\n    text: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Dialog notice\n     * @default 'You are currently not identified.'\n     */\n    notice: {\n      type: String,\n      default: t(\"You are currently not identified.\")\n    },\n    /**\n     * Dialog submit button label\n     * @default 'Submit name'\n     */\n    submitLabel: {\n      type: String,\n      default: t(\"Submit name\")\n    },\n    /**\n     * Whether the dialog is cancellable\n     * @default false\n     */\n    cancellable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    return {\n      t\n    };\n  },\n  emits: [\"close\"],\n  data() {\n    return {\n      name: \"\"\n    };\n  },\n  computed: {\n    dialogButtons() {\n      const cancelButton = {\n        label: t(\"Cancel\"),\n        variant: \"tertiary\",\n        callback: () => this.$emit(\"close\")\n      };\n      const submitButton = {\n        label: this.submitLabel,\n        type: \"submit\",\n        variant: \"primary\"\n      };\n      if (this.cancellable) {\n        return [cancelButton, submitButton];\n      }\n      return [submitButton];\n    }\n  },\n  watch: {\n    /** Reset name to pre-selected nickname (e.g. Talk / Collabora ) */\n    nickname: {\n      handler() {\n        this.name = this.nickname;\n      },\n      immediate: true\n    },\n    name() {\n      const newName = this.name.trim?.() || \"\";\n      const input = this.$refs.input?.$el.querySelector(\"input\");\n      if (!input) {\n        return;\n      }\n      const validity = getGuestNameValidity(newName);\n      input.setCustomValidity(validity);\n      input.reportValidity();\n    }\n  },\n  methods: {\n    onSubmit() {\n      const input = this.$refs.input;\n      const nickname = this.name.trim();\n      if (nickname === \"\") {\n        input.setCustomValidity(t(\"You cannot leave the name empty.\"));\n        input.reportValidity();\n        input.focus();\n        return;\n      }\n      if (nickname.length < 2) {\n        input.setCustomValidity(t(\"Please enter a name with at least 2 characters.\"));\n        input.reportValidity();\n        input.focus();\n        return;\n      }\n      try {\n        setGuestNickname(nickname);\n      } catch (e) {\n        showError(t(\"Failed to set nickname.\"));\n        console.error(\"Failed to set nickname\", e);\n        input.focus();\n        return;\n      }\n      storage.setItem(\"public-auth-prompt-shown\", \"true\");\n      this.$emit(\"close\", this.name);\n    }\n  }\n});\nvar _sfc_render = function render() {\n  var _vm = this, _c = _vm._self._c;\n  _vm._self._setupProxy;\n  return _c(\"NcDialog\", { staticClass: \"public-auth-prompt\", attrs: { \"buttons\": _vm.dialogButtons, \"data-cy-public-auth-prompt-dialog\": \"\", \"is-form\": \"\", \"no-close\": \"\", \"name\": _vm.title }, on: { \"submit\": _vm.onSubmit } }, [_vm.text ? _c(\"p\", { staticClass: \"public-auth-prompt__text\" }, [_vm._v(\" \" + _vm._s(_vm.text) + \" \")]) : _vm._e(), _c(\"NcNoteCard\", { staticClass: \"public-auth-prompt__header\", attrs: { \"text\": _vm.notice, \"type\": \"info\" } }), _c(\"NcTextField\", { ref: \"input\", staticClass: \"public-auth-prompt__input\", attrs: { \"data-cy-public-auth-prompt-dialog-name\": \"\", \"label\": _vm.t(\"Name\"), \"placeholder\": _vm.t(\"Enter your name\"), \"required\": !_vm.cancellable, \"minlength\": \"2\", \"name\": \"name\" }, model: { value: _vm.name, callback: function($$v) {\n    _vm.name = $$v;\n  }, expression: \"name\" } })], 1);\n};\nvar _sfc_staticRenderFns = [];\nvar __component__ = /* @__PURE__ */ normalizeComponent(\n  _sfc_main,\n  _sfc_render,\n  _sfc_staticRenderFns,\n  false,\n  null,\n  \"143ac1fb\"\n);\nconst PublicAuthPrompt = __component__.exports;\nexport {\n  PublicAuthPrompt as default\n};\n//# sourceMappingURL=PublicAuthPrompt-BSFsDqYB.mjs.map\n"],"names":[],"sourceRoot":""}