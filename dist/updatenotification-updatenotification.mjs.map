{"version":3,"file":"updatenotification-updatenotification.mjs","sources":["../apps/updatenotification/src/components/UpdateNotification.vue","../apps/updatenotification/src/updatenotification.js"],"sourcesContent":["<!--\n  - SPDX-FileCopyrightText: 2019-2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<NcSettingsSection id=\"updatenotification\" :name=\"t('updatenotification', 'Update')\">\n\t\t<div class=\"update\">\n\t\t\t<template v-if=\"isNewVersionAvailable\">\n\t\t\t\t<NcNoteCard v-if=\"versionIsEol\" type=\"warning\">\n\t\t\t\t\t{{ t('updatenotification', 'The version you are running is not maintained anymore. Please make sure to update to a supported version as soon as possible.') }}\n\t\t\t\t</NcNoteCard>\n\n\t\t\t\t<p>\n\t\t\t\t\t<!-- eslint-disable-next-line vue/no-v-html -->\n\t\t\t\t\t<span v-html=\"newVersionAvailableString\" /><br>\n\t\t\t\t\t<span v-if=\"!isListFetched\" class=\"icon icon-loading-small\" />\n\t\t\t\t\t<!-- eslint-disable-next-line vue/no-v-html -->\n\t\t\t\t\t<span v-html=\"statusText\" />\n\t\t\t\t</p>\n\n\t\t\t\t<template v-if=\"missingAppUpdates.length\">\n\t\t\t\t\t<h3 class=\"clickable\" @click=\"toggleHideMissingUpdates\">\n\t\t\t\t\t\t{{ t('updatenotification', 'Apps missing compatible version') }}\n\t\t\t\t\t\t<span v-if=\"!hideMissingUpdates\" class=\"icon icon-triangle-n\" />\n\t\t\t\t\t\t<span v-if=\"hideMissingUpdates\" class=\"icon icon-triangle-s\" />\n\t\t\t\t\t</h3>\n\t\t\t\t\t<ul v-if=\"!hideMissingUpdates\" class=\"applist\">\n\t\t\t\t\t\t<li v-for=\"(app, index) in missingAppUpdates\" :key=\"index\">\n\t\t\t\t\t\t\t<a :href=\"'https://apps.nextcloud.com/apps/' + app.appId\" :title=\"t('settings', 'View in store')\">{{ app.appName }} ↗</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</template>\n\n\t\t\t\t<template v-if=\"availableAppUpdates.length\">\n\t\t\t\t\t<h3 class=\"clickable\" @click=\"toggleHideAvailableUpdates\">\n\t\t\t\t\t\t{{ t('updatenotification', 'Apps with compatible version') }}\n\t\t\t\t\t\t<span v-if=\"!hideAvailableUpdates\" class=\"icon icon-triangle-n\" />\n\t\t\t\t\t\t<span v-if=\"hideAvailableUpdates\" class=\"icon icon-triangle-s\" />\n\t\t\t\t\t</h3>\n\t\t\t\t\t<ul v-if=\"!hideAvailableUpdates\" class=\"applist\">\n\t\t\t\t\t\t<li v-for=\"(app, index) in availableAppUpdates\" :key=\"index\">\n\t\t\t\t\t\t\t<a :href=\"'https://apps.nextcloud.com/apps/' + app.appId\" :title=\"t('settings', 'View in store')\">{{ app.appName }} ↗</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</template>\n\n\t\t\t\t<template v-if=\"!isWebUpdaterRecommended && updaterEnabled && webUpdaterEnabled\">\n\t\t\t\t\t<h3 class=\"warning\">\n\t\t\t\t\t\t{{ t('updatenotification', 'Please note that the web updater is not recommended with more than 100 accounts! Please use the command line updater instead!') }}\n\t\t\t\t\t</h3>\n\t\t\t\t</template>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a v-if=\"updaterEnabled && webUpdaterEnabled\"\n\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\tclass=\"button primary\"\n\t\t\t\t\t\t@click=\"clickUpdaterButton\">{{ t('updatenotification', 'Open updater') }}</a>\n\t\t\t\t\t<a v-if=\"downloadLink\"\n\t\t\t\t\t\t:href=\"downloadLink\"\n\t\t\t\t\t\tclass=\"button\"\n\t\t\t\t\t\t:class=\"{ hidden: !updaterEnabled }\">{{ t('updatenotification', 'Download now') }}</a>\n\t\t\t\t\t<span v-if=\"updaterEnabled && !webUpdaterEnabled\">\n\t\t\t\t\t\t{{ t('updatenotification', 'Web updater is disabled. Please use the command line updater or the appropriate update mechanism for your installation method (e.g. Docker pull) to update.') }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<NcActions v-if=\"whatsNewData || changelogURL\"\n\t\t\t\t\t\t:force-menu=\"true\"\n\t\t\t\t\t\t:menu-name=\"t('updatenotification', 'What\\'s new?')\"\n\t\t\t\t\t\ttype=\"tertiary\">\n\t\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t\t<IconNewBox :size=\"20\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template #default>\n\t\t\t\t\t\t\t<NcActionCaption v-for=\"changes,index in whatsNewData\" :key=\"index\" :name=\"changes\" />\n\t\t\t\t\t\t\t<NcActionLink v-if=\"changelogURL\"\n\t\t\t\t\t\t\t\t:href=\"changelogURL\"\n\t\t\t\t\t\t\t\tclose-after-click\n\t\t\t\t\t\t\t\ttarget=\"_blank\">\n\t\t\t\t\t\t\t\t{{ t('updatenotification', 'View changelog') }}\n\t\t\t\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t\t\t\t<IconLink :size=\"20\" />\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</NcActionLink>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</NcActions>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template v-else-if=\"!isUpdateChecked\">\n\t\t\t\t{{ t('updatenotification', 'The update check is not yet finished. Please refresh the page.') }}\n\t\t\t</template>\n\t\t\t<template v-else>\n\t\t\t\t{{ t('updatenotification', 'Your version is up to date.') }}\n\t\t\t\t<a :title=\"lastCheckedOnString\"\n\t\t\t\t\t:aria-label=\"lastCheckedOnString\"\n\t\t\t\t\thref=\"https://nextcloud.com/changelog/\"\n\t\t\t\t\tclass=\"icon-info details\"\n\t\t\t\t\ttarget=\"_blank\" />\n\t\t\t</template>\n\n\t\t\t<template v-if=\"!isDefaultUpdateServerURL\">\n\t\t\t\t<p class=\"topMargin\">\n\t\t\t\t\t<em>{{ t('updatenotification', 'A non-default update server is in use to be checked for updates:') }} <code>{{ updateServerURL }}</code></em>\n\t\t\t\t</p>\n\t\t\t</template>\n\t\t</div>\n\n\t\t<h3>{{ t('updatenotification', 'Update channel') }}</h3>\n\t\t<p class=\"inlineblock\">\n\t\t\t{{ t('updatenotification', 'Changing the update channel also affects the apps management page. E.g. after switching to the beta channel, beta app updates will be offered to you in the apps management page.') }}\n\t\t</p>\n\t\t<div class=\"update-channel-selector\">\n\t\t\t<span>{{ t('updatenotification', 'Current update channel:') }}</span>\n\t\t\t<NcActions :force-menu=\"true\"\n\t\t\t\t:menu-name=\"localizedChannelName\"\n\t\t\t\ttype=\"tertiary\">\n\t\t\t\t<template #icon>\n\t\t\t\t\t<IconChevronDown :size=\"20\" />\n\t\t\t\t</template>\n\t\t\t\t<template #default>\n\t\t\t\t\t<NcActionButton v-for=\"channel in channelList\"\n\t\t\t\t\t\t:key=\"channel.value\"\n\t\t\t\t\t\t:disabled=\"channel.disabled\"\n\t\t\t\t\t\t:name=\"channel.text\"\n\t\t\t\t\t\t:value=\"channel.value\"\n\t\t\t\t\t\t:model-value=\"currentChannel\"\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tclose-after-click\n\t\t\t\t\t\t@update:modelValue=\"changeReleaseChannel\">\n\t\t\t\t\t\t<template #icon>\n\t\t\t\t\t\t\t<component :is=\"channel.icon\" :size=\"20\" />\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t{{ channel.longtext }}\n\t\t\t\t\t</NcActionButton>\n\t\t\t\t</template>\n\t\t\t</NcActions>\n\t\t</div>\n\t\t<p>\n\t\t\t<em>{{ t('updatenotification', 'You can always update to a newer version. But you can never downgrade to a more stable version.') }}</em><br>\n\t\t\t<!-- eslint-disable-next-line vue/no-v-html -->\n\t\t\t<em v-html=\"noteDelayedStableString\" />\n\t\t</p>\n\n\t\t<NcSelect id=\"notify-members-settings-select-wrapper\"\n\t\t\tv-model=\"notifyGroups\"\n\t\t\t:input-label=\"t('updatenotification', 'Notify members of the following groups about available updates:')\"\n\t\t\t:options=\"groups\"\n\t\t\t:multiple=\"true\"\n\t\t\tlabel=\"displayname\"\n\t\t\t:loading=\"loadingGroups\"\n\t\t\t:close-on-select=\"false\"\n\t\t\t@search=\"searchGroup\">\n\t\t\t<template #no-options>\n\t\t\t\t{{ t('updatenotification', 'No groups') }}\n\t\t\t</template>\n\t\t</NcSelect>\n\t\t<p>\n\t\t\t<em v-if=\"currentChannel === 'daily' || currentChannel === 'git'\">{{ t('updatenotification', 'Only notifications for app updates are available.') }}</em>\n\t\t\t<em v-if=\"currentChannel === 'daily'\">{{ t('updatenotification', 'The selected update channel makes dedicated notifications for the server obsolete.') }}</em>\n\t\t\t<em v-else-if=\"currentChannel === 'git'\">{{ t('updatenotification', 'The selected update channel does not support updates of the server.') }}</em>\n\t\t</p>\n\t</NcSettingsSection>\n</template>\n\n<script>\nimport { showSuccess } from '@nextcloud/dialogs'\nimport { loadState } from '@nextcloud/initial-state'\nimport { getLoggerBuilder } from '@nextcloud/logger'\nimport { generateUrl, getRootUrl, generateOcsUrl } from '@nextcloud/router'\n\nimport axios from '@nextcloud/axios'\nimport NcActions from '@nextcloud/vue/dist/Components/NcActions.js'\nimport NcActionButton from '@nextcloud/vue/dist/Components/NcActionButton.js'\nimport NcActionCaption from '@nextcloud/vue/dist/Components/NcActionCaption.js'\nimport NcActionLink from '@nextcloud/vue/dist/Components/NcActionLink.js'\nimport NcNoteCard from '@nextcloud/vue/dist/Components/NcNoteCard.js'\nimport NcSelect from '@nextcloud/vue/dist/Components/NcSelect.js'\nimport NcSettingsSection from '@nextcloud/vue/dist/Components/NcSettingsSection.js'\nimport IconChevronDown from 'vue-material-design-icons/ChevronDown.vue'\nimport IconCloudCheckVariant from 'vue-material-design-icons/CloudCheckVariant.vue'\nimport IconLink from 'vue-material-design-icons/Link.vue'\nimport IconNewBox from 'vue-material-design-icons/NewBox.vue'\nimport IconPencil from 'vue-material-design-icons/Pencil.vue'\nimport IconSourceBranch from 'vue-material-design-icons/SourceBranch.vue'\nimport IconStar from 'vue-material-design-icons/Star.vue'\nimport IconWeatherNight from 'vue-material-design-icons/WeatherNight.vue'\nimport IconWrench from 'vue-material-design-icons/Wrench.vue'\nimport debounce from 'debounce'\n\nconst logger = getLoggerBuilder()\n\t.setApp('updatenotification')\n\t.detectUser()\n\t.build()\n\nexport default {\n\tname: 'UpdateNotification',\n\tcomponents: {\n\t\tIconChevronDown,\n\t\tIconLink,\n\t\tIconNewBox,\n\t\tNcActions,\n\t\tNcActionButton,\n\t\tNcActionCaption,\n\t\tNcActionLink,\n\t\tNcNoteCard,\n\t\tNcSelect,\n\t\tNcSettingsSection,\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tloadingGroups: false,\n\t\t\tnewVersionString: '',\n\t\t\tlastCheckedDate: '',\n\t\t\tisUpdateChecked: false,\n\t\t\twebUpdaterEnabled: true,\n\t\t\tisWebUpdaterRecommended: true,\n\t\t\tupdaterEnabled: true,\n\t\t\tversionIsEol: false,\n\t\t\tdownloadLink: '',\n\t\t\tisNewVersionAvailable: false,\n\t\t\thasValidSubscription: false,\n\t\t\tupdateServerURL: '',\n\t\t\tchangelogURL: '',\n\t\t\twhatsNewData: [],\n\t\t\tcurrentChannel: '',\n\t\t\tchannels: [],\n\t\t\tnotifyGroups: '',\n\t\t\tgroups: [],\n\t\t\tisDefaultUpdateServerURL: true,\n\t\t\tenableChangeWatcher: false,\n\n\t\t\tavailableAppUpdates: [],\n\t\t\tmissingAppUpdates: [],\n\t\t\tappStoreFailed: false,\n\t\t\tappStoreDisabled: false,\n\t\t\tisListFetched: false,\n\t\t\thideMissingUpdates: false,\n\t\t\thideAvailableUpdates: true,\n\t\t\topenedWhatsNew: false,\n\t\t\topenedUpdateChannelMenu: false,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tnewVersionAvailableString() {\n\t\t\treturn t('updatenotification', 'A new version is available: <strong>{newVersionString}</strong>', {\n\t\t\t\tnewVersionString: this.newVersionString,\n\t\t\t})\n\t\t},\n\n\t\tnoteDelayedStableString() {\n\t\t\treturn t('updatenotification', 'Note that after a new release the update only shows up after the first minor release or later. We roll out new versions spread out over time and sometimes skip a version when issues are found. Learn more about updates and release channels at {link}')\n\t\t\t\t.replace('{link}', '<a href=\"https://nextcloud.com/release-channels/\">https://nextcloud.com/release-channels/</a>')\n\t\t},\n\n\t\tlastCheckedOnString() {\n\t\t\treturn t('updatenotification', 'Checked on {lastCheckedDate} - Open changelog', {\n\t\t\t\tlastCheckedDate: this.lastCheckedDate,\n\t\t\t})\n\t\t},\n\n\t\tstatusText() {\n\t\t\tif (!this.isListFetched) {\n\t\t\t\treturn t('updatenotification', 'Checking apps for compatible versions')\n\t\t\t}\n\n\t\t\tif (this.appStoreDisabled) {\n\t\t\t\treturn t('updatenotification', 'Please make sure your config.php does not set <samp>appstoreenabled</samp> to false.')\n\t\t\t}\n\n\t\t\tif (this.appStoreFailed) {\n\t\t\t\treturn t('updatenotification', 'Could not connect to the App Store or no updates have been returned at all. Search manually for updates or make sure your server has access to the internet and can connect to the App Store.')\n\t\t\t}\n\n\t\t\treturn this.missingAppUpdates.length === 0\n\t\t\t\t? t('updatenotification', '<strong>All</strong> apps have a compatible version for this Nextcloud version available.', this)\n\t\t\t\t: n('updatenotification', '<strong>%n</strong> app has no compatible version for this Nextcloud version available.', '<strong>%n</strong> apps have no compatible version for this Nextcloud version available.', this.missingAppUpdates.length)\n\t\t},\n\n\t\tchannelList() {\n\t\t\tconst channelList = []\n\n\t\t\tchannelList.push({\n\t\t\t\ttext: t('updatenotification', 'Enterprise'),\n\t\t\t\tlongtext: t('updatenotification', 'For enterprise use. Provides always the latest patch level, but will not update to the next major release immediately. That update happens once Nextcloud GmbH has done additional hardening and testing for large-scale and mission-critical deployments. This channel is only available to customers and provides the Nextcloud Enterprise package.'),\n\t\t\t\ticon: IconStar,\n\t\t\t\tactive: this.currentChannel === 'enterprise',\n\t\t\t\tdisabled: !this.hasValidSubscription,\n\t\t\t\tvalue: 'enterprise',\n\t\t\t})\n\n\t\t\tchannelList.push({\n\t\t\t\ttext: t('updatenotification', 'Stable'),\n\t\t\t\tlongtext: t('updatenotification', 'The most recent stable version. It is suited for regular use and will always update to the latest major version.'),\n\t\t\t\ticon: IconCloudCheckVariant,\n\t\t\t\tvalue: 'stable',\n\t\t\t})\n\n\t\t\tchannelList.push({\n\t\t\t\ttext: t('updatenotification', 'Beta'),\n\t\t\t\tlongtext: t('updatenotification', 'A pre-release version only for testing new features, not for production environments.'),\n\t\t\t\ticon: IconWrench,\n\t\t\t\tvalue: 'beta',\n\t\t\t})\n\n\t\t\tif (this.isNonDefaultChannel(this.currentChannel)) {\n\t\t\t\tconst nonDefaultIcons = {\n\t\t\t\t\tdaily: IconWeatherNight,\n\t\t\t\t\tgit: IconSourceBranch,\n\t\t\t\t}\n\t\t\t\tchannelList.push({\n\t\t\t\t\ttext: this.currentChannel,\n\t\t\t\t\ticon: nonDefaultIcons[this.currentChannel] || IconPencil,\n\t\t\t\t\tvalue: this.currentChannel,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn channelList\n\t\t},\n\n\t\tlocalizedChannelName() {\n\t\t\tswitch (this.currentChannel) {\n\t\t\tcase 'enterprise':\n\t\t\t\treturn t('updatenotification', 'Enterprise')\n\t\t\tcase 'stable':\n\t\t\t\treturn t('updatenotification', 'Stable')\n\t\t\tcase 'beta':\n\t\t\t\treturn t('updatenotification', 'Beta')\n\t\t\tdefault:\n\t\t\t\treturn this.currentChannel\n\t\t\t}\n\t\t},\n\t},\n\n\twatch: {\n\t\tnotifyGroups() {\n\t\t\tif (!this.enableChangeWatcher) {\n\t\t\t\t// The first time is when loading the app\n\t\t\t\tthis.enableChangeWatcher = true\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst groups = this.notifyGroups.map(group => {\n\t\t\t\treturn group.id\n\t\t\t})\n\n\t\t\tOCP.AppConfig.setValue('updatenotification', 'notify_groups', JSON.stringify(groups))\n\t\t},\n\t\tisNewVersionAvailable() {\n\t\t\tif (!this.isNewVersionAvailable) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\taxios.get(generateOcsUrl('apps/updatenotification/api/v1/applist/{newVersion}', {\n\t\t\t\tnewVersion: this.newVersion,\n\t\t\t})).then(({ data }) => {\n\t\t\t\tthis.availableAppUpdates = data.ocs.data.available\n\t\t\t\tthis.missingAppUpdates = data.ocs.data.missing\n\t\t\t\tthis.isListFetched = true\n\t\t\t\tthis.appStoreFailed = false\n\t\t\t}).catch(({ data }) => {\n\t\t\t\tthis.availableAppUpdates = []\n\t\t\t\tthis.missingAppUpdates = []\n\t\t\t\tthis.appStoreDisabled = data.ocs.data.appstore_disabled\n\t\t\t\tthis.isListFetched = true\n\t\t\t\tthis.appStoreFailed = true\n\t\t\t})\n\t\t},\n\t},\n\tbeforeMount() {\n\t\t// Parse server data\n\t\tconst data = loadState('updatenotification', 'data')\n\n\t\tthis.newVersion = data.newVersion\n\t\tthis.newVersionString = data.newVersionString\n\t\tthis.lastCheckedDate = data.lastChecked\n\t\tthis.isUpdateChecked = data.isUpdateChecked\n\t\tthis.webUpdaterEnabled = data.webUpdaterEnabled\n\t\tthis.isWebUpdaterRecommended = data.isWebUpdaterRecommended\n\t\tthis.updaterEnabled = data.updaterEnabled\n\t\tthis.downloadLink = data.downloadLink\n\t\tthis.isNewVersionAvailable = data.isNewVersionAvailable\n\t\tthis.updateServerURL = data.updateServerURL\n\t\tthis.currentChannel = data.currentChannel\n\t\tthis.channels = data.channels\n\t\tthis.notifyGroups = data.notifyGroups\n\t\tthis.isDefaultUpdateServerURL = data.isDefaultUpdateServerURL\n\t\tthis.versionIsEol = data.versionIsEol\n\t\tthis.hasValidSubscription = data.hasValidSubscription\n\t\tif (data.changes && data.changes.changelogURL) {\n\t\t\tthis.changelogURL = data.changes.changelogURL\n\t\t}\n\t\tif (data.changes && data.changes.whatsNew) {\n\t\t\tif (data.changes.whatsNew.admin) {\n\t\t\t\tthis.whatsNewData = this.whatsNewData.concat(data.changes.whatsNew.admin)\n\t\t\t}\n\t\t\tthis.whatsNewData = this.whatsNewData.concat(data.changes.whatsNew.regular)\n\t\t}\n\t},\n\n\tmounted() {\n\t\tthis.searchGroup()\n\t},\n\n\tmethods: {\n\t\tsearchGroup: debounce(async function(query) {\n\t\t\tthis.loadingGroups = true\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(generateOcsUrl('cloud/groups/details'), {\n\t\t\t\t\tsearch: query,\n\t\t\t\t\tlimit: 20,\n\t\t\t\t\toffset: 0,\n\t\t\t\t})\n\t\t\t\tthis.groups = response.data.ocs.data.groups.sort(function(a, b) {\n\t\t\t\t\treturn a.displayname.localeCompare(b.displayname)\n\t\t\t\t})\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('Could not fetch groups', err)\n\t\t\t} finally {\n\t\t\t\tthis.loadingGroups = false\n\t\t\t}\n\t\t}, 500),\n\t\t/**\n\t\t * Creates a new authentication token and loads the updater URL\n\t\t */\n\t\tclickUpdaterButton() {\n\t\t\taxios.get(generateUrl('/apps/updatenotification/credentials'))\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t// create a form to send a proper post request to the updater\n\t\t\t\t\tconst form = document.createElement('form')\n\t\t\t\t\tform.setAttribute('method', 'post')\n\t\t\t\t\tform.setAttribute('action', getRootUrl() + '/updater/')\n\n\t\t\t\t\tconst hiddenField = document.createElement('input')\n\t\t\t\t\thiddenField.setAttribute('type', 'hidden')\n\t\t\t\t\thiddenField.setAttribute('name', 'updater-secret-input')\n\t\t\t\t\thiddenField.setAttribute('value', data)\n\n\t\t\t\t\tform.appendChild(hiddenField)\n\n\t\t\t\t\tdocument.body.appendChild(form)\n\t\t\t\t\tform.submit()\n\t\t\t\t})\n\t\t},\n\n\t\tisNonDefaultChannel(channel) {\n\t\t\treturn !['enterprise', 'stable', 'beta'].includes(channel)\n\t\t},\n\n\t\tchangeReleaseChannel(channel) {\n\t\t\tif (this.isNonDefaultChannel(channel)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.currentChannel = channel\n\n\t\t\taxios.post(generateUrl('/apps/updatenotification/channel'), {\n\t\t\t\tchannel: this.currentChannel,\n\t\t\t}).then(({ data }) => {\n\t\t\t\tshowSuccess(data.data.message)\n\t\t\t})\n\n\t\t\tthis.openedUpdateChannelMenu = false\n\t\t},\n\t\ttoggleHideMissingUpdates() {\n\t\t\tthis.hideMissingUpdates = !this.hideMissingUpdates\n\t\t},\n\t\ttoggleHideAvailableUpdates() {\n\t\t\tthis.hideAvailableUpdates = !this.hideAvailableUpdates\n\t\t},\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\t#updatenotification {\n\t\t& > * {\n\t\t\tmax-width: 900px;\n\t\t}\n\n\t\t.topMargin {\n\t\t\tmargin-top: 15px;\n\t\t}\n\n\t\tdiv.update,\n\t\tp:not(.inlineblock) {\n\t\t\tmargin-bottom: 25px;\n\t\t}\n\t\th2.inlineblock {\n\t\t\tmargin-top: 25px;\n\t\t}\n\t\th3 {\n\t\t\t&.clickable {\n\t\t\t\tcursor: pointer;\n\t\t\t\t.icon {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.update-channel-selector {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 12px;\n\t\t}\n\t\t.icon {\n\t\t\tdisplay: inline-block;\n\t\t\tmargin-bottom: -3px;\n\t\t}\n\t\t.icon-triangle-s, .icon-triangle-n {\n\t\t\topacity: 0.5;\n\t\t}\n\t\t.applist {\n\t\t\tmargin-bottom: 25px;\n\t\t}\n\t}\n</style>\n<style lang=\"scss\">\n#updatenotification {\n\t/* override NcSelect styling so that label can have correct width */\n\t#notify-members-settings-select-wrapper {\n\t\twidth: fit-content;\n\n\t\t.vs__dropdown-toggle {\n\t\t\tmin-width: 100%;\n\t\t}\n\t}\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2018 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport { translate, translatePlural } from '@nextcloud/l10n'\n\nimport Vue from 'vue'\nimport Root from './components/UpdateNotification.vue'\n\nVue.mixin({\n\tmethods: {\n\t\tt(app, text, vars, count, options) {\n\t\t\treturn translate(app, text, vars, count, options)\n\t\t},\n\t\tn(app, textSingular, textPlural, count, vars, options) {\n\t\t\treturn translatePlural(app, textSingular, textPlural, count, vars, options)\n\t\t},\n\t},\n})\n\n// eslint-disable-next-line no-new\nnew Vue({\n\tel: '#updatenotification',\n\trender: h => h(Root),\n})\n"],"names":["logger","getLoggerBuilder","_sfc_main","IconChevronDown","IconLink","IconNewBox","NcActions","NcActionButton","NcActionCaption","NcActionLink","NcNoteCard","NcSelect","NcSettingsSection","channelList","IconStar","IconCloudCheckVariant","IconWrench","nonDefaultIcons","IconWeatherNight","IconSourceBranch","IconPencil","groups","group","axios","generateOcsUrl","data","loadState","debounce","query","response","a","b","err","generateUrl","form","getRootUrl","hiddenField","channel","showSuccess","Vue","app","text","vars","count","options","translate","textSingular","textPlural","translatePlural","h","Root"],"mappings":"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"}