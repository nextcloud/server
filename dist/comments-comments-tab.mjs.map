{"version":3,"mappings":";;8ZASA,IAAIA,EACAC,EAKG,SAASC,GAA0B,CAClC,WAAI,SAAS,sBAAsB,CACzC,MAAO,MAAOC,EAAI,CAAE,QAAAC,EAAS,SAAAC,EAAU,OAAAC,KAAa,CACnD,GAAI,CAACN,EAAuB,CAC3B,KAAM,CAAE,QAASO,CAA2B,QAAMC,EAAA,wBAAAD,CAAA,eAAO,6CAAmC,mFACpEP,EAAAS,EAAI,OAAOF,CAAsB,CAC1D,CACAN,EAA4B,IAAID,EAAsB,CACrD,OAAQI,EACR,UAAW,CACV,eAAgBE,EAChB,WAAYD,EAAS,EACtB,EACA,EACDJ,EAA0B,OAAOE,CAAE,EACnCO,EAAO,KAAK,qDAAsD,CAAE,SAAAL,CAAU,EAC/E,EACA,QAAS,IAAM,CAEVJ,GACHA,EAA0B,SAAS,CAErC,EACA,EAEM,WAAI,SAAS,uBAAuB,MAAO,CAAE,SAAAI,EAAU,MAAAM,EAAO,OAAAC,KAAa,CACjF,KAAM,CAAE,KAAMC,CAAA,EAAa,MAAMC,EAAY,CAAE,aAAc,QAAS,WAAYT,EAAS,EAAG,EAAG,CAAE,MAAAM,EAAO,OAAAC,CAAQ,GAClHF,EAAO,MAAM,kBAAmB,CAAE,SAAAL,EAAU,SAAAQ,CAAU,GACtD,KAAM,CAAE,QAASE,CAAgB,QAAMP,EAAA,wBAAAO,CAAA,eAAO,4CAAkC,oFAC1EC,EAAqBP,EAAI,OAAOM,CAAW,EAE1C,OAAAF,EAAS,IAAKI,IAAa,CACjC,UAAWC,EAAOD,EAAQ,MAAM,gBAAgB,EAAE,SAAS,QAAQ,EACnE,MAAME,EAAS,CAAE,QAAAf,EAAS,OAAAE,GAAU,CAC9B,2BAAwB,IAAIU,EAAmB,CACnD,OAAQZ,EACR,UAAW,CACV,QAAAa,EACA,WAAYZ,EAAS,GACrB,eAAgBC,CACjB,EACA,EACI,2BAAsB,OAAOa,CAAO,CAC1C,EACA,SAAU,CACT,KAAK,sBAAsB,UAC5B,CACC,IACF,EAED,OAAO,IAAI,SAAS,sBAAuBC,GAAaA,EAAS,OAAS,UAAU,EACpFV,EAAO,KAAK,wDAAwD,CACrE,OCzDA,GAAIW,EAAU,WAAY,kBAAmB,EAAK,KAAKC,EAAA,qBAAK,WAAL,YAAAA,EAAe,yBAA0B,OAE/F,OAAO,iBAAiB,mBAAoB,UAAW,CACtDpB,EAAyB,CAC3B,CAAE,MACK,CAEN,IAAIqB,EAAc,KAClB,MAAMC,EAAa,IAAI,IAAI,MAAM,QAAQ,IAAI,CAC5C,GAAI,WACJ,KAAM,EAAE,WAAY,UAAU,EAC9B,QAASC,EAET,MAAM,MAAMtB,EAAIE,EAAUD,EAAS,CAC9BmB,GACHA,EAAY,SAAU,EAEvBA,EAAc,IAAI,IAAI,SAAS,KAAK,QAAS,CAE5C,OAAQnB,EACR,UAAW,CACV,WAAYC,EAAS,EACrB,CACL,CAAI,EAED,MAAMkB,EAAY,OAAOlB,EAAS,EAAE,EACpCkB,EAAY,OAAOpB,CAAE,CACrB,EACD,OAAOE,EAAU,CAChBkB,EAAY,OAAOlB,EAAS,EAAE,CAC9B,EACD,SAAU,CACTkB,EAAY,SAAU,EACtBA,EAAc,IACd,EACD,qBAAsB,CACrBA,EAAY,sBAAuB,CACnC,CACH,CAAE,EAED,OAAO,iBAAiB,mBAAoB,UAAW,CAClD,IAAI,OAAS,IAAI,MAAM,SAC1B,IAAI,MAAM,QAAQ,YAAYC,CAAU,CAE3C,CAAE,CACF","names":["ActivityTabPluginView","ActivityTabPluginInstance","registerCommentsPlugins","el","context","fileInfo","reload","ActivityCommmentAction","__vitePreload","Vue","logger","limit","offset","comments","getComments","CommentView","CommentsViewObject","comment","moment","element","activity","loadState","_a","TabInstance","commentTab","MessageReplyText"],"ignoreList":[],"sources":["../apps/comments/src/comments-activity-tab.ts","../apps/comments/src/comments-tab.js"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport moment from '@nextcloud/moment'\nimport Vue from 'vue'\nimport logger from './logger.js'\nimport { getComments } from './services/GetComments.js'\n\nlet ActivityTabPluginView\nlet ActivityTabPluginInstance\n\n/**\n * Register the comments plugins for the Activity sidebar\n */\nexport function registerCommentsPlugins() {\n\twindow.OCA.Activity.registerSidebarAction({\n\t\tmount: async (el, { context, fileInfo, reload }) => {\n\t\t\tif (!ActivityTabPluginView) {\n\t\t\t\tconst { default: ActivityCommmentAction } = await import('./views/ActivityCommentAction.vue')\n\t\t\t\tActivityTabPluginView = Vue.extend(ActivityCommmentAction)\n\t\t\t}\n\t\t\tActivityTabPluginInstance = new ActivityTabPluginView({\n\t\t\t\tparent: context,\n\t\t\t\tpropsData: {\n\t\t\t\t\treloadCallback: reload,\n\t\t\t\t\tresourceId: fileInfo.id,\n\t\t\t\t},\n\t\t\t})\n\t\t\tActivityTabPluginInstance.$mount(el)\n\t\t\tlogger.info('Comments plugin mounted in Activity sidebar action', { fileInfo })\n\t\t},\n\t\tunmount: () => {\n\t\t\t// destroy previous instance if available\n\t\t\tif (ActivityTabPluginInstance) {\n\t\t\t\tActivityTabPluginInstance.$destroy()\n\t\t\t}\n\t\t},\n\t})\n\n\twindow.OCA.Activity.registerSidebarEntries(async ({ fileInfo, limit, offset }) => {\n\t\tconst { data: comments } = await getComments({ resourceType: 'files', resourceId: fileInfo.id }, { limit, offset })\n\t\tlogger.debug('Loaded comments', { fileInfo, comments })\n\t\tconst { default: CommentView } = await import('./views/ActivityCommentEntry.vue')\n\t\tconst CommentsViewObject = Vue.extend(CommentView)\n\n\t\treturn comments.map((comment) => ({\n\t\t\ttimestamp: moment(comment.props.creationDateTime).toDate().getTime(),\n\t\t\tmount(element, { context, reload }) {\n\t\t\t\tthis._CommentsViewInstance = new CommentsViewObject({\n\t\t\t\t\tparent: context,\n\t\t\t\t\tpropsData: {\n\t\t\t\t\t\tcomment,\n\t\t\t\t\t\tresourceId: fileInfo.id,\n\t\t\t\t\t\treloadCallback: reload,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tthis._CommentsViewInstance.$mount(element)\n\t\t\t},\n\t\t\tunmount() {\n\t\t\t\tthis._CommentsViewInstance.$destroy()\n\t\t\t},\n\t\t}))\n\t})\n\n\twindow.OCA.Activity.registerSidebarFilter((activity) => activity.type !== 'comments')\n\tlogger.info('Comments plugin registered for Activity sidebar action')\n}\n","/**\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n// eslint-disable-next-line n/no-missing-import, import/no-unresolved\nimport MessageReplyText from '@mdi/svg/svg/message-reply-text.svg?raw'\nimport { loadState } from '@nextcloud/initial-state'\nimport { registerCommentsPlugins } from './comments-activity-tab.ts'\n\nif (loadState('comments', 'activityEnabled', false) && OCA?.Activity?.registerSidebarAction !== undefined) {\n\t// Do not mount own tab but mount into activity\n\twindow.addEventListener('DOMContentLoaded', function() {\n\t\tregisterCommentsPlugins()\n\t})\n} else {\n\t// Init Comments tab component\n\tlet TabInstance = null\n\tconst commentTab = new OCA.Files.Sidebar.Tab({\n\t\tid: 'comments',\n\t\tname: t('comments', 'Comments'),\n\t\ticonSvg: MessageReplyText,\n\n\t\tasync mount(el, fileInfo, context) {\n\t\t\tif (TabInstance) {\n\t\t\t\tTabInstance.$destroy()\n\t\t\t}\n\t\t\tTabInstance = new OCA.Comments.View('files', {\n\t\t\t\t// Better integration with vue parent component\n\t\t\t\tparent: context,\n\t\t\t\tpropsData: {\n\t\t\t\t\tresourceId: fileInfo.id,\n\t\t\t\t},\n\t\t\t})\n\t\t\t// Only mount after we have all the info we need\n\t\t\tawait TabInstance.update(fileInfo.id)\n\t\t\tTabInstance.$mount(el)\n\t\t},\n\t\tupdate(fileInfo) {\n\t\t\tTabInstance.update(fileInfo.id)\n\t\t},\n\t\tdestroy() {\n\t\t\tTabInstance.$destroy()\n\t\t\tTabInstance = null\n\t\t},\n\t\tscrollBottomReached() {\n\t\t\tTabInstance.onScrollBottomReached()\n\t\t},\n\t})\n\n\twindow.addEventListener('DOMContentLoaded', function() {\n\t\tif (OCA.Files && OCA.Files.Sidebar) {\n\t\t\tOCA.Files.Sidebar.registerTab(commentTab)\n\t\t}\n\t})\n}\n"],"file":"comments-comments-tab.mjs"}